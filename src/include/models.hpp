
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.16.0

#include <stan/model/model_header.hpp>

namespace model_all_mod_nopred_blockmod_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_all_mod_nopred_blockmod");
    reader.add_event(239, 239, "end", "model_all_mod_nopred_blockmod");
    return reader;
}

class model_all_mod_nopred_blockmod : public prob_grad {
private:
    int model_id;
    int n;
    int n_pred;
    int n_block;
    int n_block_pred;
    vector_d size_data;
    vector_d age;
    vector<int> block_data;
    vector<int> block_holdout;
    int n_plot;
    vector_d age_plot;
    matrix_d age_holdout;
public:
    model_all_mod_nopred_blockmod(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_all_mod_nopred_blockmod(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_all_mod_nopred_blockmod_namespace::model_all_mod_nopred_blockmod";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "model_id", "int", context__.to_vec());
        model_id = int(0);
        vals_i__ = context__.vals_i("model_id");
        pos__ = 0;
        model_id = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n", "int", context__.to_vec());
        n = int(0);
        vals_i__ = context__.vals_i("n");
        pos__ = 0;
        n = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_pred", "int", context__.to_vec());
        n_pred = int(0);
        vals_i__ = context__.vals_i("n_pred");
        pos__ = 0;
        n_pred = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_block", "int", context__.to_vec());
        n_block = int(0);
        vals_i__ = context__.vals_i("n_block");
        pos__ = 0;
        n_block = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_block_pred", "int", context__.to_vec());
        n_block_pred = int(0);
        vals_i__ = context__.vals_i("n_block_pred");
        pos__ = 0;
        n_block_pred = vals_i__[pos__++];
        validate_non_negative_index("size_data", "n", n);
        context__.validate_dims("data initialization", "size_data", "vector_d", context__.to_vec(n));
        validate_non_negative_index("size_data", "n", n);
        size_data = vector_d(static_cast<Eigen::VectorXd::Index>(n));
        vals_r__ = context__.vals_r("size_data");
        pos__ = 0;
        size_t size_data_i_vec_lim__ = n;
        for (size_t i_vec__ = 0; i_vec__ < size_data_i_vec_lim__; ++i_vec__) {
            size_data[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("age", "n", n);
        context__.validate_dims("data initialization", "age", "vector_d", context__.to_vec(n));
        validate_non_negative_index("age", "n", n);
        age = vector_d(static_cast<Eigen::VectorXd::Index>(n));
        vals_r__ = context__.vals_r("age");
        pos__ = 0;
        size_t age_i_vec_lim__ = n;
        for (size_t i_vec__ = 0; i_vec__ < age_i_vec_lim__; ++i_vec__) {
            age[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("block_data", "n", n);
        context__.validate_dims("data initialization", "block_data", "int", context__.to_vec(n));
        validate_non_negative_index("block_data", "n", n);
        block_data = std::vector<int>(n,int(0));
        vals_i__ = context__.vals_i("block_data");
        pos__ = 0;
        size_t block_data_limit_0__ = n;
        for (size_t i_0__ = 0; i_0__ < block_data_limit_0__; ++i_0__) {
            block_data[i_0__] = vals_i__[pos__++];
        }
        validate_non_negative_index("block_holdout", "n_pred", n_pred);
        context__.validate_dims("data initialization", "block_holdout", "int", context__.to_vec(n_pred));
        validate_non_negative_index("block_holdout", "n_pred", n_pred);
        block_holdout = std::vector<int>(n_pred,int(0));
        vals_i__ = context__.vals_i("block_holdout");
        pos__ = 0;
        size_t block_holdout_limit_0__ = n_pred;
        for (size_t i_0__ = 0; i_0__ < block_holdout_limit_0__; ++i_0__) {
            block_holdout[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "n_plot", "int", context__.to_vec());
        n_plot = int(0);
        vals_i__ = context__.vals_i("n_plot");
        pos__ = 0;
        n_plot = vals_i__[pos__++];
        validate_non_negative_index("age_plot", "n_plot", n_plot);
        context__.validate_dims("data initialization", "age_plot", "vector_d", context__.to_vec(n_plot));
        validate_non_negative_index("age_plot", "n_plot", n_plot);
        age_plot = vector_d(static_cast<Eigen::VectorXd::Index>(n_plot));
        vals_r__ = context__.vals_r("age_plot");
        pos__ = 0;
        size_t age_plot_i_vec_lim__ = n_plot;
        for (size_t i_vec__ = 0; i_vec__ < age_plot_i_vec_lim__; ++i_vec__) {
            age_plot[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("age_holdout", "n_pred", n_pred);
        validate_non_negative_index("age_holdout", "1", 1);
        context__.validate_dims("data initialization", "age_holdout", "matrix_d", context__.to_vec(n_pred,1));
        validate_non_negative_index("age_holdout", "n_pred", n_pred);
        validate_non_negative_index("age_holdout", "1", 1);
        age_holdout = matrix_d(static_cast<Eigen::VectorXd::Index>(n_pred),static_cast<Eigen::VectorXd::Index>(1));
        vals_r__ = context__.vals_r("age_holdout");
        pos__ = 0;
        size_t age_holdout_m_mat_lim__ = n_pred;
        size_t age_holdout_n_mat_lim__ = 1;
        for (size_t n_mat__ = 0; n_mat__ < age_holdout_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < age_holdout_m_mat_lim__; ++m_mat__) {
                age_holdout(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }

        // validate, data variables
        check_greater_or_equal(function__,"model_id",model_id,0);
        check_greater_or_equal(function__,"n",n,0);
        check_greater_or_equal(function__,"n_pred",n_pred,0);
        check_greater_or_equal(function__,"n_block",n_block,0);
        check_greater_or_equal(function__,"n_block_pred",n_block_pred,0);
        check_greater_or_equal(function__,"size_data",size_data,0);
        for (int k0__ = 0; k0__ < n; ++k0__) {
            check_greater_or_equal(function__,"block_data[k0__]",block_data[k0__],0);
            check_less_or_equal(function__,"block_data[k0__]",block_data[k0__],n_block);
        }
        for (int k0__ = 0; k0__ < n_pred; ++k0__) {
            check_greater_or_equal(function__,"block_holdout[k0__]",block_holdout[k0__],0);
            check_less_or_equal(function__,"block_holdout[k0__]",block_holdout[k0__],n_block_pred);
        }
        check_greater_or_equal(function__,"n_plot",n_plot,0);
        // initialize data variables

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // validate, set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        ++num_params_r__;
        validate_non_negative_index("psi1", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("psi2", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("psi3", "n_block", n_block);
        num_params_r__ += n_block;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        validate_non_negative_index("h1", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h2", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h3", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h1_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h2_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h3_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
    }

    ~model_all_mod_nopred_blockmod() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("sigma_obs")))
            throw std::runtime_error("variable sigma_obs missing");
        vals_r__ = context__.vals_r("sigma_obs");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma_obs", "double", context__.to_vec());
        // generate_declaration sigma_obs
        double sigma_obs(0);
        sigma_obs = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma_obs);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_obs: ") + e.what());
        }

        if (!(context__.contains_r("psi1")))
            throw std::runtime_error("variable psi1 missing");
        vals_r__ = context__.vals_r("psi1");
        pos__ = 0U;
        validate_non_negative_index("psi1", "n_block", n_block);
        context__.validate_dims("initialization", "psi1", "vector_d", context__.to_vec(n_block));
        // generate_declaration psi1
        vector_d psi1(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            psi1(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(psi1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi1: ") + e.what());
        }

        if (!(context__.contains_r("psi2")))
            throw std::runtime_error("variable psi2 missing");
        vals_r__ = context__.vals_r("psi2");
        pos__ = 0U;
        validate_non_negative_index("psi2", "n_block", n_block);
        context__.validate_dims("initialization", "psi2", "vector_d", context__.to_vec(n_block));
        // generate_declaration psi2
        vector_d psi2(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            psi2(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(psi2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi2: ") + e.what());
        }

        if (!(context__.contains_r("psi3")))
            throw std::runtime_error("variable psi3 missing");
        vals_r__ = context__.vals_r("psi3");
        pos__ = 0U;
        validate_non_negative_index("psi3", "n_block", n_block);
        context__.validate_dims("initialization", "psi3", "vector_d", context__.to_vec(n_block));
        // generate_declaration psi3
        vector_d psi3(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            psi3(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(psi3);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi3: ") + e.what());
        }

        if (!(context__.contains_r("block_sd1")))
            throw std::runtime_error("variable block_sd1 missing");
        vals_r__ = context__.vals_r("block_sd1");
        pos__ = 0U;
        context__.validate_dims("initialization", "block_sd1", "double", context__.to_vec());
        // generate_declaration block_sd1
        double block_sd1(0);
        block_sd1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,block_sd1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable block_sd1: ") + e.what());
        }

        if (!(context__.contains_r("block_sd2")))
            throw std::runtime_error("variable block_sd2 missing");
        vals_r__ = context__.vals_r("block_sd2");
        pos__ = 0U;
        context__.validate_dims("initialization", "block_sd2", "double", context__.to_vec());
        // generate_declaration block_sd2
        double block_sd2(0);
        block_sd2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,block_sd2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable block_sd2: ") + e.what());
        }

        if (!(context__.contains_r("block_sd3")))
            throw std::runtime_error("variable block_sd3 missing");
        vals_r__ = context__.vals_r("block_sd3");
        pos__ = 0U;
        context__.validate_dims("initialization", "block_sd3", "double", context__.to_vec());
        // generate_declaration block_sd3
        double block_sd3(0);
        block_sd3 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,block_sd3);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable block_sd3: ") + e.what());
        }

        if (!(context__.contains_r("psi_mean1")))
            throw std::runtime_error("variable psi_mean1 missing");
        vals_r__ = context__.vals_r("psi_mean1");
        pos__ = 0U;
        context__.validate_dims("initialization", "psi_mean1", "double", context__.to_vec());
        // generate_declaration psi_mean1
        double psi_mean1(0);
        psi_mean1 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi_mean1: ") + e.what());
        }

        if (!(context__.contains_r("psi_mean2")))
            throw std::runtime_error("variable psi_mean2 missing");
        vals_r__ = context__.vals_r("psi_mean2");
        pos__ = 0U;
        context__.validate_dims("initialization", "psi_mean2", "double", context__.to_vec());
        // generate_declaration psi_mean2
        double psi_mean2(0);
        psi_mean2 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi_mean2: ") + e.what());
        }

        if (!(context__.contains_r("psi_mean3")))
            throw std::runtime_error("variable psi_mean3 missing");
        vals_r__ = context__.vals_r("psi_mean3");
        pos__ = 0U;
        context__.validate_dims("initialization", "psi_mean3", "double", context__.to_vec());
        // generate_declaration psi_mean3
        double psi_mean3(0);
        psi_mean3 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean3);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi_mean3: ") + e.what());
        }

        if (!(context__.contains_r("sd_h1")))
            throw std::runtime_error("variable sd_h1 missing");
        vals_r__ = context__.vals_r("sd_h1");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h1", "double", context__.to_vec());
        // generate_declaration sd_h1
        double sd_h1(0);
        sd_h1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h1: ") + e.what());
        }

        if (!(context__.contains_r("sd_h2")))
            throw std::runtime_error("variable sd_h2 missing");
        vals_r__ = context__.vals_r("sd_h2");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h2", "double", context__.to_vec());
        // generate_declaration sd_h2
        double sd_h2(0);
        sd_h2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h2: ") + e.what());
        }

        if (!(context__.contains_r("sd_h3")))
            throw std::runtime_error("variable sd_h3 missing");
        vals_r__ = context__.vals_r("sd_h3");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h3", "double", context__.to_vec());
        // generate_declaration sd_h3
        double sd_h3(0);
        sd_h3 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h3);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h3: ") + e.what());
        }

        if (!(context__.contains_r("h1")))
            throw std::runtime_error("variable h1 missing");
        vals_r__ = context__.vals_r("h1");
        pos__ = 0U;
        validate_non_negative_index("h1", "n_block", n_block);
        context__.validate_dims("initialization", "h1", "vector_d", context__.to_vec(n_block));
        // generate_declaration h1
        vector_d h1(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h1(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,h1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h1: ") + e.what());
        }

        if (!(context__.contains_r("h2")))
            throw std::runtime_error("variable h2 missing");
        vals_r__ = context__.vals_r("h2");
        pos__ = 0U;
        validate_non_negative_index("h2", "n_block", n_block);
        context__.validate_dims("initialization", "h2", "vector_d", context__.to_vec(n_block));
        // generate_declaration h2
        vector_d h2(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h2(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,h2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h2: ") + e.what());
        }

        if (!(context__.contains_r("h3")))
            throw std::runtime_error("variable h3 missing");
        vals_r__ = context__.vals_r("h3");
        pos__ = 0U;
        validate_non_negative_index("h3", "n_block", n_block);
        context__.validate_dims("initialization", "h3", "vector_d", context__.to_vec(n_block));
        // generate_declaration h3
        vector_d h3(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h3(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,h3);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h3: ") + e.what());
        }

        if (!(context__.contains_r("h1_holdout")))
            throw std::runtime_error("variable h1_holdout missing");
        vals_r__ = context__.vals_r("h1_holdout");
        pos__ = 0U;
        validate_non_negative_index("h1_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h1_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h1_holdout
        vector_d h1_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h1_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,h1_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h1_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h2_holdout")))
            throw std::runtime_error("variable h2_holdout missing");
        vals_r__ = context__.vals_r("h2_holdout");
        pos__ = 0U;
        validate_non_negative_index("h2_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h2_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h2_holdout
        vector_d h2_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h2_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,h2_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h2_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h3_holdout")))
            throw std::runtime_error("variable h3_holdout missing");
        vals_r__ = context__.vals_r("h3_holdout");
        pos__ = 0U;
        validate_non_negative_index("h3_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h3_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h3_holdout
        vector_d h3_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h3_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,h3_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h3_holdout: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        T__ sigma_obs;
        (void) sigma_obs;  // dummy to suppress unused var warning
        if (jacobian__)
            sigma_obs = in__.scalar_lb_constrain(0,lp__);
        else
            sigma_obs = in__.scalar_lb_constrain(0);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi1;
        (void) psi1;  // dummy to suppress unused var warning
        if (jacobian__)
            psi1 = in__.vector_constrain(n_block,lp__);
        else
            psi1 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi2;
        (void) psi2;  // dummy to suppress unused var warning
        if (jacobian__)
            psi2 = in__.vector_constrain(n_block,lp__);
        else
            psi2 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi3;
        (void) psi3;  // dummy to suppress unused var warning
        if (jacobian__)
            psi3 = in__.vector_constrain(n_block,lp__);
        else
            psi3 = in__.vector_constrain(n_block);

        T__ block_sd1;
        (void) block_sd1;  // dummy to suppress unused var warning
        if (jacobian__)
            block_sd1 = in__.scalar_lb_constrain(0,lp__);
        else
            block_sd1 = in__.scalar_lb_constrain(0);

        T__ block_sd2;
        (void) block_sd2;  // dummy to suppress unused var warning
        if (jacobian__)
            block_sd2 = in__.scalar_lb_constrain(0,lp__);
        else
            block_sd2 = in__.scalar_lb_constrain(0);

        T__ block_sd3;
        (void) block_sd3;  // dummy to suppress unused var warning
        if (jacobian__)
            block_sd3 = in__.scalar_lb_constrain(0,lp__);
        else
            block_sd3 = in__.scalar_lb_constrain(0);

        T__ psi_mean1;
        (void) psi_mean1;  // dummy to suppress unused var warning
        if (jacobian__)
            psi_mean1 = in__.scalar_constrain(lp__);
        else
            psi_mean1 = in__.scalar_constrain();

        T__ psi_mean2;
        (void) psi_mean2;  // dummy to suppress unused var warning
        if (jacobian__)
            psi_mean2 = in__.scalar_constrain(lp__);
        else
            psi_mean2 = in__.scalar_constrain();

        T__ psi_mean3;
        (void) psi_mean3;  // dummy to suppress unused var warning
        if (jacobian__)
            psi_mean3 = in__.scalar_constrain(lp__);
        else
            psi_mean3 = in__.scalar_constrain();

        T__ sd_h1;
        (void) sd_h1;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h1 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h1 = in__.scalar_lb_constrain(0);

        T__ sd_h2;
        (void) sd_h2;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h2 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h2 = in__.scalar_lb_constrain(0);

        T__ sd_h3;
        (void) sd_h3;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h3 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h3 = in__.scalar_lb_constrain(0);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h1;
        (void) h1;  // dummy to suppress unused var warning
        if (jacobian__)
            h1 = in__.vector_lb_constrain(0,n_block,lp__);
        else
            h1 = in__.vector_lb_constrain(0,n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h2;
        (void) h2;  // dummy to suppress unused var warning
        if (jacobian__)
            h2 = in__.vector_lb_constrain(0,n_block,lp__);
        else
            h2 = in__.vector_lb_constrain(0,n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h3;
        (void) h3;  // dummy to suppress unused var warning
        if (jacobian__)
            h3 = in__.vector_lb_constrain(0,n_block,lp__);
        else
            h3 = in__.vector_lb_constrain(0,n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h1_holdout;
        (void) h1_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h1_holdout = in__.vector_lb_constrain(0,n_block_pred,lp__);
        else
            h1_holdout = in__.vector_lb_constrain(0,n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h2_holdout;
        (void) h2_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h2_holdout = in__.vector_lb_constrain(0,n_block_pred,lp__);
        else
            h2_holdout = in__.vector_lb_constrain(0,n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h3_holdout;
        (void) h3_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h3_holdout = in__.vector_lb_constrain(0,n_block_pred,lp__);
        else
            h3_holdout = in__.vector_lb_constrain(0,n_block_pred);


        // transformed parameters
        validate_non_negative_index("mu", "n", n);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  mu(static_cast<Eigen::VectorXd::Index>(n));
        (void) mu;  // dummy to suppress unused var warning

        stan::math::initialize(mu, DUMMY_VAR__);
        stan::math::fill(mu,DUMMY_VAR__);


        try {
            for (int i = 1; i <= n; ++i) {

                if (as_bool(logical_eq(model_id,1))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) / (get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1) + pow(get_base1(h3,get_base1(block_data,i,"block_data",1),"h3",1),get_base1(age,i,"age",1)))));
                }
                if (as_bool(logical_eq(model_id,2))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) / (1 + exp((-(get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1)) * (get_base1(age,i,"age",1) - get_base1(h3,get_base1(block_data,i,"block_data",1),"h3",1)))))));
                }
                if (as_bool(logical_eq(model_id,3))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) / (1 + exp((-(get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1)) * (log(get_base1(age,i,"age",1)) - get_base1(h3,get_base1(block_data,i,"block_data",1),"h3",1)))))));
                }
                if (as_bool(logical_eq(model_id,4))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) + (get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1) * log(get_base1(age,i,"age",1)))));
                }
                if (as_bool(logical_eq(model_id,5))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) * log((1 + (get_base1(age,i,"age",1) / get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1))))));
                }
                if (as_bool(logical_eq(model_id,6))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) / (1 + exp(((-(get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1)) * get_base1(age,i,"age",1)) + get_base1(h3,get_base1(block_data,i,"block_data",1),"h3",1))))));
                }
                if (as_bool(logical_eq(model_id,7))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) * (get_base1(age,i,"age",1) / (get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1) + get_base1(age,i,"age",1)))));
                }
                if (as_bool(logical_eq(model_id,8))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) * (1 - exp((-(get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1)) * get_base1(age,i,"age",1))))));
                }
                if (as_bool(logical_eq(model_id,9))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) * pow(get_base1(age,i,"age",1),get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1))));
                }
                if (as_bool(logical_eq(model_id,10))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) * pow(get_base1(age,i,"age",1),(get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1) - (get_base1(h3,get_base1(block_data,i,"block_data",1),"h3",1) / get_base1(age,i,"age",1))))));
                }
                if (as_bool(logical_eq(model_id,11))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) * (1 - exp((-(get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1)) * pow(get_base1(age,i,"age",1),get_base1(h3,get_base1(block_data,i,"block_data",1),"h3",1)))))));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < n; ++i0__) {
            if (stan::math::is_uninitialized(mu(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: mu" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning

        // model body
        try {

            lp_accum__.add(normal_log<propto__>(log(size_data), mu, sigma_obs));
            lp_accum__.add(normal_log<propto__>(sigma_obs, 0, 2));
            lp_accum__.add(normal_log<propto__>(psi1, psi_mean1, block_sd1));
            lp_accum__.add(normal_log<propto__>(psi2, psi_mean2, block_sd2));
            lp_accum__.add(normal_log<propto__>(psi3, psi_mean3, block_sd3));
            lp_accum__.add(normal_log<propto__>(block_sd1, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(block_sd2, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(block_sd3, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(psi_mean1, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(psi_mean2, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(psi_mean3, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(h1, psi1, sd_h1));
            lp_accum__.add(normal_log<propto__>(h2, psi2, sd_h2));
            lp_accum__.add(normal_log<propto__>(h3, psi3, sd_h3));
            lp_accum__.add(normal_log<propto__>(h1_holdout, psi_mean1, sd_h1));
            lp_accum__.add(normal_log<propto__>(h2_holdout, psi_mean2, sd_h2));
            lp_accum__.add(normal_log<propto__>(h3_holdout, psi_mean3, sd_h3));
            lp_accum__.add(normal_log<propto__>(sd_h1, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h2, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h3, 0.0, 2.0));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("sigma_obs");
        names__.push_back("psi1");
        names__.push_back("psi2");
        names__.push_back("psi3");
        names__.push_back("block_sd1");
        names__.push_back("block_sd2");
        names__.push_back("block_sd3");
        names__.push_back("psi_mean1");
        names__.push_back("psi_mean2");
        names__.push_back("psi_mean3");
        names__.push_back("sd_h1");
        names__.push_back("sd_h2");
        names__.push_back("sd_h3");
        names__.push_back("h1");
        names__.push_back("h2");
        names__.push_back("h3");
        names__.push_back("h1_holdout");
        names__.push_back("h2_holdout");
        names__.push_back("h3_holdout");
        names__.push_back("mu");
        names__.push_back("mu_plot_growth");
        names__.push_back("mu_plot_agr");
        names__.push_back("mu_pred");
        names__.push_back("size_plot");
        names__.push_back("size_plot_agr");
        names__.push_back("size_pred");
        names__.push_back("log_lik");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_all_mod_nopred_blockmod_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double sigma_obs = in__.scalar_lb_constrain(0);
        vector_d psi1 = in__.vector_constrain(n_block);
        vector_d psi2 = in__.vector_constrain(n_block);
        vector_d psi3 = in__.vector_constrain(n_block);
        double block_sd1 = in__.scalar_lb_constrain(0);
        double block_sd2 = in__.scalar_lb_constrain(0);
        double block_sd3 = in__.scalar_lb_constrain(0);
        double psi_mean1 = in__.scalar_constrain();
        double psi_mean2 = in__.scalar_constrain();
        double psi_mean3 = in__.scalar_constrain();
        double sd_h1 = in__.scalar_lb_constrain(0);
        double sd_h2 = in__.scalar_lb_constrain(0);
        double sd_h3 = in__.scalar_lb_constrain(0);
        vector_d h1 = in__.vector_lb_constrain(0,n_block);
        vector_d h2 = in__.vector_lb_constrain(0,n_block);
        vector_d h3 = in__.vector_lb_constrain(0,n_block);
        vector_d h1_holdout = in__.vector_lb_constrain(0,n_block_pred);
        vector_d h2_holdout = in__.vector_lb_constrain(0,n_block_pred);
        vector_d h3_holdout = in__.vector_lb_constrain(0,n_block_pred);
        vars__.push_back(sigma_obs);
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi1[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi2[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi3[k_0__]);
        }
        vars__.push_back(block_sd1);
        vars__.push_back(block_sd2);
        vars__.push_back(block_sd3);
        vars__.push_back(psi_mean1);
        vars__.push_back(psi_mean2);
        vars__.push_back(psi_mean3);
        vars__.push_back(sd_h1);
        vars__.push_back(sd_h2);
        vars__.push_back(sd_h3);
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h1[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h2[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h3[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h1_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h2_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h3_holdout[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        validate_non_negative_index("mu", "n", n);
        vector_d mu(static_cast<Eigen::VectorXd::Index>(n));
        (void) mu;  // dummy to suppress unused var warning

        stan::math::initialize(mu, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu,DUMMY_VAR__);


        try {
            for (int i = 1; i <= n; ++i) {

                if (as_bool(logical_eq(model_id,1))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) / (get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1) + pow(get_base1(h3,get_base1(block_data,i,"block_data",1),"h3",1),get_base1(age,i,"age",1)))));
                }
                if (as_bool(logical_eq(model_id,2))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) / (1 + exp((-(get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1)) * (get_base1(age,i,"age",1) - get_base1(h3,get_base1(block_data,i,"block_data",1),"h3",1)))))));
                }
                if (as_bool(logical_eq(model_id,3))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) / (1 + exp((-(get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1)) * (log(get_base1(age,i,"age",1)) - get_base1(h3,get_base1(block_data,i,"block_data",1),"h3",1)))))));
                }
                if (as_bool(logical_eq(model_id,4))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) + (get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1) * log(get_base1(age,i,"age",1)))));
                }
                if (as_bool(logical_eq(model_id,5))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) * log((1 + (get_base1(age,i,"age",1) / get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1))))));
                }
                if (as_bool(logical_eq(model_id,6))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) / (1 + exp(((-(get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1)) * get_base1(age,i,"age",1)) + get_base1(h3,get_base1(block_data,i,"block_data",1),"h3",1))))));
                }
                if (as_bool(logical_eq(model_id,7))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) * (get_base1(age,i,"age",1) / (get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1) + get_base1(age,i,"age",1)))));
                }
                if (as_bool(logical_eq(model_id,8))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) * (1 - exp((-(get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1)) * get_base1(age,i,"age",1))))));
                }
                if (as_bool(logical_eq(model_id,9))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) * pow(get_base1(age,i,"age",1),get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1))));
                }
                if (as_bool(logical_eq(model_id,10))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) * pow(get_base1(age,i,"age",1),(get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1) - (get_base1(h3,get_base1(block_data,i,"block_data",1),"h3",1) / get_base1(age,i,"age",1))))));
                }
                if (as_bool(logical_eq(model_id,11))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) * (1 - exp((-(get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1)) * pow(get_base1(age,i,"age",1),get_base1(h3,get_base1(block_data,i,"block_data",1),"h3",1)))))));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters
        for (int k_0__ = 0; k_0__ < n; ++k_0__) {
            vars__.push_back(mu[k_0__]);
        }

        if (!include_gqs__) return;
        // declare and define generated quantities
        validate_non_negative_index("mu_plot_growth", "n_plot", n_plot);
        validate_non_negative_index("mu_plot_growth", "n_block", n_block);
        matrix_d mu_plot_growth(static_cast<Eigen::VectorXd::Index>(n_plot),static_cast<Eigen::VectorXd::Index>(n_block));
        (void) mu_plot_growth;  // dummy to suppress unused var warning

        stan::math::initialize(mu_plot_growth, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu_plot_growth,DUMMY_VAR__);
        validate_non_negative_index("mu_plot_agr", "n_plot", n_plot);
        validate_non_negative_index("mu_plot_agr", "n_block", n_block);
        matrix_d mu_plot_agr(static_cast<Eigen::VectorXd::Index>(n_plot),static_cast<Eigen::VectorXd::Index>(n_block));
        (void) mu_plot_agr;  // dummy to suppress unused var warning

        stan::math::initialize(mu_plot_agr, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu_plot_agr,DUMMY_VAR__);
        validate_non_negative_index("mu_pred", "n_pred", n_pred);
        vector_d mu_pred(static_cast<Eigen::VectorXd::Index>(n_pred));
        (void) mu_pred;  // dummy to suppress unused var warning

        stan::math::initialize(mu_pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu_pred,DUMMY_VAR__);
        validate_non_negative_index("size_plot", "n_plot", n_plot);
        validate_non_negative_index("size_plot", "n_block", n_block);
        matrix_d size_plot(static_cast<Eigen::VectorXd::Index>(n_plot),static_cast<Eigen::VectorXd::Index>(n_block));
        (void) size_plot;  // dummy to suppress unused var warning

        stan::math::initialize(size_plot, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(size_plot,DUMMY_VAR__);
        validate_non_negative_index("size_plot_agr", "n_plot", n_plot);
        validate_non_negative_index("size_plot_agr", "n_block", n_block);
        matrix_d size_plot_agr(static_cast<Eigen::VectorXd::Index>(n_plot),static_cast<Eigen::VectorXd::Index>(n_block));
        (void) size_plot_agr;  // dummy to suppress unused var warning

        stan::math::initialize(size_plot_agr, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(size_plot_agr,DUMMY_VAR__);
        validate_non_negative_index("size_pred", "n_pred", n_pred);
        vector_d size_pred(static_cast<Eigen::VectorXd::Index>(n_pred));
        (void) size_pred;  // dummy to suppress unused var warning

        stan::math::initialize(size_pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(size_pred,DUMMY_VAR__);
        validate_non_negative_index("log_lik", "n", n);
        vector_d log_lik(static_cast<Eigen::VectorXd::Index>(n));
        (void) log_lik;  // dummy to suppress unused var warning

        stan::math::initialize(log_lik, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(log_lik,DUMMY_VAR__);


        try {
            for (int i = 1; i <= n_plot; ++i) {

                for (int j = 1; j <= n_block; ++j) {

                    if (as_bool(logical_eq(model_id,1))) {

                        stan::math::assign(get_base1_lhs(mu_plot_growth,i,j,"mu_plot_growth",1), (get_base1(h1,j,"h1",1) / (get_base1(h2,j,"h2",1) + pow(get_base1(h3,j,"h3",1),get_base1(age_plot,i,"age_plot",1)))));
                    }
                    if (as_bool(logical_eq(model_id,2))) {

                        stan::math::assign(get_base1_lhs(mu_plot_growth,i,j,"mu_plot_growth",1), (get_base1(h1,j,"h1",1) / (1 + exp((-(get_base1(h2,j,"h2",1)) * (get_base1(age_plot,i,"age_plot",1) - get_base1(h3,j,"h3",1)))))));
                    }
                    if (as_bool(logical_eq(model_id,3))) {

                        stan::math::assign(get_base1_lhs(mu_plot_growth,i,j,"mu_plot_growth",1), (get_base1(h1,j,"h1",1) / (1 + exp((-(get_base1(h2,j,"h2",1)) * (log(get_base1(age_plot,i,"age_plot",1)) - get_base1(h3,j,"h3",1)))))));
                    }
                    if (as_bool(logical_eq(model_id,4))) {

                        stan::math::assign(get_base1_lhs(mu_plot_growth,i,j,"mu_plot_growth",1), (get_base1(h1,j,"h1",1) + (get_base1(h2,j,"h2",1) * log(get_base1(age_plot,i,"age_plot",1)))));
                    }
                    if (as_bool(logical_eq(model_id,5))) {

                        stan::math::assign(get_base1_lhs(mu_plot_growth,i,j,"mu_plot_growth",1), (get_base1(h1,j,"h1",1) * log((1 + (get_base1(age_plot,i,"age_plot",1) / get_base1(h2,j,"h2",1))))));
                    }
                    if (as_bool(logical_eq(model_id,6))) {

                        stan::math::assign(get_base1_lhs(mu_plot_growth,i,j,"mu_plot_growth",1), (get_base1(h1,j,"h1",1) / (1 + exp(((-(get_base1(h2,j,"h2",1)) * get_base1(age_plot,i,"age_plot",1)) + get_base1(h3,j,"h3",1))))));
                    }
                    if (as_bool(logical_eq(model_id,7))) {

                        stan::math::assign(get_base1_lhs(mu_plot_growth,i,j,"mu_plot_growth",1), (get_base1(h1,j,"h1",1) * (get_base1(age_plot,i,"age_plot",1) / (get_base1(h2,j,"h2",1) + get_base1(age_plot,i,"age_plot",1)))));
                    }
                    if (as_bool(logical_eq(model_id,8))) {

                        stan::math::assign(get_base1_lhs(mu_plot_growth,i,j,"mu_plot_growth",1), (get_base1(h1,j,"h1",1) * (1 - exp((-(get_base1(h2,j,"h2",1)) * get_base1(age_plot,i,"age_plot",1))))));
                    }
                    if (as_bool(logical_eq(model_id,9))) {

                        stan::math::assign(get_base1_lhs(mu_plot_growth,i,j,"mu_plot_growth",1), (get_base1(h1,j,"h1",1) * pow(get_base1(age_plot,i,"age_plot",1),get_base1(h2,j,"h2",1))));
                    }
                    if (as_bool(logical_eq(model_id,10))) {

                        stan::math::assign(get_base1_lhs(mu_plot_growth,i,j,"mu_plot_growth",1), (get_base1(h1,j,"h1",1) * pow(get_base1(age_plot,i,"age_plot",1),(get_base1(h2,j,"h2",1) - (get_base1(h3,j,"h3",1) / get_base1(age_plot,i,"age_plot",1))))));
                    }
                    if (as_bool(logical_eq(model_id,11))) {

                        stan::math::assign(get_base1_lhs(mu_plot_growth,i,j,"mu_plot_growth",1), (get_base1(h1,j,"h1",1) * (1 - exp((-(get_base1(h2,j,"h2",1)) * pow(get_base1(age_plot,i,"age_plot",1),get_base1(h3,j,"h3",1)))))));
                    }
                }
            }
            for (int i = 1; i <= n_plot; ++i) {
                for (int j = 1; j <= n_block; ++j) {
                    stan::math::assign(get_base1_lhs(size_plot,i,j,"size_plot",1), exp(get_base1(mu_plot_growth,i,j,"mu_plot_growth",1)));
                }
            }
            for (int i = 1; i <= n_plot; ++i) {

                for (int j = 1; j <= n_block; ++j) {

                    if (as_bool(logical_eq(model_id,1))) {

                        stan::math::assign(get_base1_lhs(mu_plot_agr,i,j,"mu_plot_agr",1), (((-(get_base1(h1,j,"h1",1)) * pow(get_base1(h3,j,"h3",1),get_base1(age_plot,i,"age_plot",1))) * log(get_base1(h3,j,"h3",1))) / pow((get_base1(h2,j,"h2",1) + pow(get_base1(h3,j,"h3",1),get_base1(age_plot,i,"age_plot",1))),2)));
                    }
                    if (as_bool(logical_eq(model_id,2))) {

                        stan::math::assign(get_base1_lhs(mu_plot_agr,i,j,"mu_plot_agr",1), (get_base1(mu_plot_growth,i,j,"mu_plot_growth",1) * ((get_base1(h2,j,"h2",1) * exp((-(get_base1(h2,j,"h2",1)) * (get_base1(age_plot,i,"age_plot",1) - get_base1(h3,j,"h3",1))))) / (1 + exp((-(get_base1(h2,j,"h2",1)) * (get_base1(age_plot,i,"age_plot",1) - get_base1(h3,j,"h3",1))))))));
                    }
                    if (as_bool(logical_eq(model_id,3))) {

                        stan::math::assign(get_base1_lhs(mu_plot_agr,i,j,"mu_plot_agr",1), (get_base1(mu_plot_growth,i,j,"mu_plot_growth",1) * ((get_base1(h2,j,"h2",1) * exp((-(get_base1(h2,j,"h2",1)) * (log(get_base1(age_plot,i,"age_plot",1)) - get_base1(h3,j,"h3",1))))) / (1 + exp((-(get_base1(h2,j,"h2",1)) * (log(get_base1(age_plot,i,"age_plot",1)) - get_base1(h3,j,"h3",1))))))));
                    }
                    if (as_bool(logical_eq(model_id,4))) {

                        stan::math::assign(get_base1_lhs(mu_plot_agr,i,j,"mu_plot_agr",1), (get_base1(h2,j,"h2",1) / get_base1(age_plot,i,"age_plot",1)));
                    }
                    if (as_bool(logical_eq(model_id,5))) {

                        stan::math::assign(get_base1_lhs(mu_plot_agr,i,j,"mu_plot_agr",1), (get_base1(h1,j,"h1",1) / (get_base1(h2,j,"h2",1) + get_base1(age_plot,i,"age_plot",1))));
                    }
                    if (as_bool(logical_eq(model_id,6))) {

                        stan::math::assign(get_base1_lhs(mu_plot_agr,i,j,"mu_plot_agr",1), ((get_base1(h2,j,"h2",1) * get_base1(h1,j,"h1",1)) / ((2 * cosh((get_base1(h3,j,"h3",1) - (get_base1(h2,j,"h2",1) * get_base1(age_plot,i,"age_plot",1))))) + 2)));
                    }
                    if (as_bool(logical_eq(model_id,7))) {

                        stan::math::assign(get_base1_lhs(mu_plot_agr,i,j,"mu_plot_agr",1), (get_base1(h1,j,"h1",1) * (get_base1(h2,j,"h2",1) / pow((get_base1(h2,j,"h2",1) + get_base1(age_plot,i,"age_plot",1)),2))));
                    }
                    if (as_bool(logical_eq(model_id,8))) {

                        stan::math::assign(get_base1_lhs(mu_plot_agr,i,j,"mu_plot_agr",1), ((get_base1(h1,j,"h1",1) * get_base1(h2,j,"h2",1)) * exp((-(get_base1(h2,j,"h2",1)) * get_base1(age_plot,i,"age_plot",1)))));
                    }
                    if (as_bool(logical_eq(model_id,9))) {

                        stan::math::assign(get_base1_lhs(mu_plot_agr,i,j,"mu_plot_agr",1), ((get_base1(h1,j,"h1",1) * get_base1(h2,j,"h2",1)) * pow(get_base1(age_plot,i,"age_plot",1),(get_base1(h2,j,"h2",1) - 1))));
                    }
                    if (as_bool(logical_eq(model_id,10))) {

                        stan::math::assign(get_base1_lhs(mu_plot_agr,i,j,"mu_plot_agr",1), (get_base1(mu_plot_growth,i,j,"mu_plot_growth",1) * (((get_base1(h2,j,"h2",1) - (get_base1(h3,j,"h3",1) / get_base1(age_plot,i,"age_plot",1))) / get_base1(age_plot,i,"age_plot",1)) + ((get_base1(h3,j,"h3",1) * log(get_base1(age_plot,i,"age_plot",1))) / pow(get_base1(age_plot,i,"age_plot",1),2)))));
                    }
                    if (as_bool(logical_eq(model_id,11))) {

                        stan::math::assign(get_base1_lhs(mu_plot_agr,i,j,"mu_plot_agr",1), ((((get_base1(h1,j,"h1",1) * get_base1(h2,j,"h2",1)) * get_base1(h3,j,"h3",1)) * pow(get_base1(age_plot,i,"age_plot",1),(get_base1(h3,j,"h3",1) - 1))) * exp((-(get_base1(h2,j,"h2",1)) * pow(get_base1(age_plot,i,"age_plot",1),get_base1(h3,j,"h3",1))))));
                    }
                }
            }
            for (int i = 1; i <= n_plot; ++i) {
                for (int j = 1; j <= n_block; ++j) {
                    stan::math::assign(get_base1_lhs(size_plot_agr,i,j,"size_plot_agr",1), exp(get_base1(mu_plot_agr,i,j,"mu_plot_agr",1)));
                }
            }
            for (int i = 1; i <= n_pred; ++i) {

                if (as_bool(logical_eq(model_id,1))) {

                    stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), (get_base1(h1_holdout,get_base1(block_holdout,i,"block_holdout",1),"h1_holdout",1) / (get_base1(h2_holdout,get_base1(block_holdout,i,"block_holdout",1),"h2_holdout",1) + pow(get_base1(h3_holdout,get_base1(block_holdout,i,"block_holdout",1),"h3_holdout",1),get_base1(age_holdout,i,1,"age_holdout",1)))));
                }
                if (as_bool(logical_eq(model_id,2))) {

                    stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), (get_base1(h1_holdout,get_base1(block_holdout,i,"block_holdout",1),"h1_holdout",1) / (1 + exp((-(get_base1(h2_holdout,get_base1(block_holdout,i,"block_holdout",1),"h2_holdout",1)) * (get_base1(age_holdout,i,1,"age_holdout",1) - get_base1(h3_holdout,get_base1(block_holdout,i,"block_holdout",1),"h3_holdout",1)))))));
                }
                if (as_bool(logical_eq(model_id,3))) {

                    stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), (get_base1(h1_holdout,get_base1(block_holdout,i,"block_holdout",1),"h1_holdout",1) / (1 + exp((-(get_base1(h2_holdout,get_base1(block_holdout,i,"block_holdout",1),"h2_holdout",1)) * (log(get_base1(age_holdout,i,1,"age_holdout",1)) - get_base1(h3_holdout,get_base1(block_holdout,i,"block_holdout",1),"h3_holdout",1)))))));
                }
                if (as_bool(logical_eq(model_id,4))) {

                    stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), (get_base1(h1_holdout,get_base1(block_holdout,i,"block_holdout",1),"h1_holdout",1) + (get_base1(h2_holdout,get_base1(block_holdout,i,"block_holdout",1),"h2_holdout",1) * log(get_base1(age_holdout,i,1,"age_holdout",1)))));
                }
                if (as_bool(logical_eq(model_id,5))) {

                    stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), (get_base1(h1_holdout,get_base1(block_holdout,i,"block_holdout",1),"h1_holdout",1) * log((1 + (get_base1(age_holdout,i,1,"age_holdout",1) / get_base1(h2_holdout,get_base1(block_holdout,i,"block_holdout",1),"h2_holdout",1))))));
                }
                if (as_bool(logical_eq(model_id,6))) {

                    stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), (get_base1(h1_holdout,get_base1(block_holdout,i,"block_holdout",1),"h1_holdout",1) / (1 + exp(((-(get_base1(h2_holdout,get_base1(block_holdout,i,"block_holdout",1),"h2_holdout",1)) * get_base1(age_holdout,i,1,"age_holdout",1)) + get_base1(h3_holdout,get_base1(block_holdout,i,"block_holdout",1),"h3_holdout",1))))));
                }
                if (as_bool(logical_eq(model_id,7))) {

                    stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), (get_base1(h1_holdout,get_base1(block_holdout,i,"block_holdout",1),"h1_holdout",1) * (get_base1(age_holdout,i,1,"age_holdout",1) / (get_base1(h2_holdout,get_base1(block_holdout,i,"block_holdout",1),"h2_holdout",1) + get_base1(age_holdout,i,1,"age_holdout",1)))));
                }
                if (as_bool(logical_eq(model_id,8))) {

                    stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), (get_base1(h1_holdout,get_base1(block_holdout,i,"block_holdout",1),"h1_holdout",1) * (1 - exp((-(get_base1(h2_holdout,get_base1(block_holdout,i,"block_holdout",1),"h2_holdout",1)) * get_base1(age_holdout,i,1,"age_holdout",1))))));
                }
                if (as_bool(logical_eq(model_id,9))) {

                    stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), (get_base1(h1_holdout,get_base1(block_holdout,i,"block_holdout",1),"h1_holdout",1) * pow(get_base1(age_holdout,i,1,"age_holdout",1),get_base1(h2_holdout,get_base1(block_holdout,i,"block_holdout",1),"h2_holdout",1))));
                }
                if (as_bool(logical_eq(model_id,10))) {

                    stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), (get_base1(h1_holdout,get_base1(block_holdout,i,"block_holdout",1),"h1_holdout",1) * pow(get_base1(age_holdout,i,1,"age_holdout",1),(get_base1(h2_holdout,get_base1(block_holdout,i,"block_holdout",1),"h2_holdout",1) - (get_base1(h3_holdout,get_base1(block_holdout,i,"block_holdout",1),"h3_holdout",1) / get_base1(age_holdout,i,1,"age_holdout",1))))));
                }
                if (as_bool(logical_eq(model_id,11))) {

                    stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), (get_base1(h1_holdout,get_base1(block_holdout,i,"block_holdout",1),"h1_holdout",1) * (1 - exp((-(get_base1(h2_holdout,get_base1(block_holdout,i,"block_holdout",1),"h2_holdout",1)) * pow(get_base1(age_holdout,i,1,"age_holdout",1),get_base1(h3_holdout,get_base1(block_holdout,i,"block_holdout",1),"h3_holdout",1)))))));
                }
            }
            for (int i = 1; i <= n_pred; ++i) {
                stan::math::assign(get_base1_lhs(size_pred,i,"size_pred",1), exp(get_base1(mu_pred,i,"mu_pred",1)));
            }
            for (int i = 1; i <= n; ++i) {
                stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), normal_log(log(get_base1(size_data,i,"size_data",1)),get_base1(mu,i,"mu",1),sigma_obs));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities
        check_greater_or_equal(function__,"size_plot",size_plot,0);
        check_greater_or_equal(function__,"size_plot_agr",size_plot_agr,0);
        check_greater_or_equal(function__,"size_pred",size_pred,0);

        // write generated quantities
        for (int k_1__ = 0; k_1__ < n_block; ++k_1__) {
            for (int k_0__ = 0; k_0__ < n_plot; ++k_0__) {
                vars__.push_back(mu_plot_growth(k_0__, k_1__));
            }
        }
        for (int k_1__ = 0; k_1__ < n_block; ++k_1__) {
            for (int k_0__ = 0; k_0__ < n_plot; ++k_0__) {
                vars__.push_back(mu_plot_agr(k_0__, k_1__));
            }
        }
        for (int k_0__ = 0; k_0__ < n_pred; ++k_0__) {
            vars__.push_back(mu_pred[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < n_block; ++k_1__) {
            for (int k_0__ = 0; k_0__ < n_plot; ++k_0__) {
                vars__.push_back(size_plot(k_0__, k_1__));
            }
        }
        for (int k_1__ = 0; k_1__ < n_block; ++k_1__) {
            for (int k_0__ = 0; k_0__ < n_plot; ++k_0__) {
                vars__.push_back(size_plot_agr(k_0__, k_1__));
            }
        }
        for (int k_0__ = 0; k_0__ < n_pred; ++k_0__) {
            vars__.push_back(size_pred[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_all_mod_nopred_blockmod";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_obs";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h3";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h1_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h2_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h3_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= n_block; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_plot_growth" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= n_block; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_plot_agr" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= n_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= n_block; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "size_plot" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= n_block; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "size_plot_agr" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= n_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_obs";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h3";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h1_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h2_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h3_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= n_block; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_plot_growth" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= n_block; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_plot_agr" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= n_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= n_block; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "size_plot" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= n_block; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "size_plot_agr" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= n_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}




// Code generated by Stan version 2.16.0

#include <stan/model/model_header.hpp>

namespace model_all_mod_nopred_onemod_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_all_mod_nopred_onemod");
    reader.add_event(205, 205, "end", "model_all_mod_nopred_onemod");
    return reader;
}

class model_all_mod_nopred_onemod : public prob_grad {
private:
    int model_id;
    int n;
    int n_pred;
    vector_d size_data;
    vector_d age;
    int n_plot;
    vector_d age_plot;
    matrix_d age_holdout;
public:
    model_all_mod_nopred_onemod(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_all_mod_nopred_onemod(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_all_mod_nopred_onemod_namespace::model_all_mod_nopred_onemod";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "model_id", "int", context__.to_vec());
        model_id = int(0);
        vals_i__ = context__.vals_i("model_id");
        pos__ = 0;
        model_id = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n", "int", context__.to_vec());
        n = int(0);
        vals_i__ = context__.vals_i("n");
        pos__ = 0;
        n = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_pred", "int", context__.to_vec());
        n_pred = int(0);
        vals_i__ = context__.vals_i("n_pred");
        pos__ = 0;
        n_pred = vals_i__[pos__++];
        validate_non_negative_index("size_data", "n", n);
        context__.validate_dims("data initialization", "size_data", "vector_d", context__.to_vec(n));
        validate_non_negative_index("size_data", "n", n);
        size_data = vector_d(static_cast<Eigen::VectorXd::Index>(n));
        vals_r__ = context__.vals_r("size_data");
        pos__ = 0;
        size_t size_data_i_vec_lim__ = n;
        for (size_t i_vec__ = 0; i_vec__ < size_data_i_vec_lim__; ++i_vec__) {
            size_data[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("age", "n", n);
        context__.validate_dims("data initialization", "age", "vector_d", context__.to_vec(n));
        validate_non_negative_index("age", "n", n);
        age = vector_d(static_cast<Eigen::VectorXd::Index>(n));
        vals_r__ = context__.vals_r("age");
        pos__ = 0;
        size_t age_i_vec_lim__ = n;
        for (size_t i_vec__ = 0; i_vec__ < age_i_vec_lim__; ++i_vec__) {
            age[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "n_plot", "int", context__.to_vec());
        n_plot = int(0);
        vals_i__ = context__.vals_i("n_plot");
        pos__ = 0;
        n_plot = vals_i__[pos__++];
        validate_non_negative_index("age_plot", "n_plot", n_plot);
        context__.validate_dims("data initialization", "age_plot", "vector_d", context__.to_vec(n_plot));
        validate_non_negative_index("age_plot", "n_plot", n_plot);
        age_plot = vector_d(static_cast<Eigen::VectorXd::Index>(n_plot));
        vals_r__ = context__.vals_r("age_plot");
        pos__ = 0;
        size_t age_plot_i_vec_lim__ = n_plot;
        for (size_t i_vec__ = 0; i_vec__ < age_plot_i_vec_lim__; ++i_vec__) {
            age_plot[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("age_holdout", "n_pred", n_pred);
        validate_non_negative_index("age_holdout", "1", 1);
        context__.validate_dims("data initialization", "age_holdout", "matrix_d", context__.to_vec(n_pred,1));
        validate_non_negative_index("age_holdout", "n_pred", n_pred);
        validate_non_negative_index("age_holdout", "1", 1);
        age_holdout = matrix_d(static_cast<Eigen::VectorXd::Index>(n_pred),static_cast<Eigen::VectorXd::Index>(1));
        vals_r__ = context__.vals_r("age_holdout");
        pos__ = 0;
        size_t age_holdout_m_mat_lim__ = n_pred;
        size_t age_holdout_n_mat_lim__ = 1;
        for (size_t n_mat__ = 0; n_mat__ < age_holdout_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < age_holdout_m_mat_lim__; ++m_mat__) {
                age_holdout(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }

        // validate, data variables
        check_greater_or_equal(function__,"model_id",model_id,0);
        check_greater_or_equal(function__,"n",n,0);
        check_greater_or_equal(function__,"n_pred",n_pred,0);
        check_greater_or_equal(function__,"size_data",size_data,0);
        check_greater_or_equal(function__,"n_plot",n_plot,0);
        // initialize data variables

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // validate, set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
    }

    ~model_all_mod_nopred_onemod() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("sigma_obs")))
            throw std::runtime_error("variable sigma_obs missing");
        vals_r__ = context__.vals_r("sigma_obs");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma_obs", "double", context__.to_vec());
        // generate_declaration sigma_obs
        double sigma_obs(0);
        sigma_obs = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma_obs);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_obs: ") + e.what());
        }

        if (!(context__.contains_r("h1")))
            throw std::runtime_error("variable h1 missing");
        vals_r__ = context__.vals_r("h1");
        pos__ = 0U;
        context__.validate_dims("initialization", "h1", "double", context__.to_vec());
        // generate_declaration h1
        double h1(0);
        h1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,h1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h1: ") + e.what());
        }

        if (!(context__.contains_r("h2")))
            throw std::runtime_error("variable h2 missing");
        vals_r__ = context__.vals_r("h2");
        pos__ = 0U;
        context__.validate_dims("initialization", "h2", "double", context__.to_vec());
        // generate_declaration h2
        double h2(0);
        h2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,h2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h2: ") + e.what());
        }

        if (!(context__.contains_r("h3")))
            throw std::runtime_error("variable h3 missing");
        vals_r__ = context__.vals_r("h3");
        pos__ = 0U;
        context__.validate_dims("initialization", "h3", "double", context__.to_vec());
        // generate_declaration h3
        double h3(0);
        h3 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,h3);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h3: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        T__ sigma_obs;
        (void) sigma_obs;  // dummy to suppress unused var warning
        if (jacobian__)
            sigma_obs = in__.scalar_lb_constrain(0,lp__);
        else
            sigma_obs = in__.scalar_lb_constrain(0);

        T__ h1;
        (void) h1;  // dummy to suppress unused var warning
        if (jacobian__)
            h1 = in__.scalar_lb_constrain(0,lp__);
        else
            h1 = in__.scalar_lb_constrain(0);

        T__ h2;
        (void) h2;  // dummy to suppress unused var warning
        if (jacobian__)
            h2 = in__.scalar_lb_constrain(0,lp__);
        else
            h2 = in__.scalar_lb_constrain(0);

        T__ h3;
        (void) h3;  // dummy to suppress unused var warning
        if (jacobian__)
            h3 = in__.scalar_lb_constrain(0,lp__);
        else
            h3 = in__.scalar_lb_constrain(0);


        // transformed parameters
        validate_non_negative_index("mu", "n", n);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  mu(static_cast<Eigen::VectorXd::Index>(n));
        (void) mu;  // dummy to suppress unused var warning

        stan::math::initialize(mu, DUMMY_VAR__);
        stan::math::fill(mu,DUMMY_VAR__);
        T__ h1_holdout;
        (void) h1_holdout;  // dummy to suppress unused var warning

        stan::math::initialize(h1_holdout, DUMMY_VAR__);
        stan::math::fill(h1_holdout,DUMMY_VAR__);
        T__ h2_holdout;
        (void) h2_holdout;  // dummy to suppress unused var warning

        stan::math::initialize(h2_holdout, DUMMY_VAR__);
        stan::math::fill(h2_holdout,DUMMY_VAR__);
        T__ h3_holdout;
        (void) h3_holdout;  // dummy to suppress unused var warning

        stan::math::initialize(h3_holdout, DUMMY_VAR__);
        stan::math::fill(h3_holdout,DUMMY_VAR__);


        try {
            for (int i = 1; i <= n; ++i) {

                if (as_bool(logical_eq(model_id,1))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (h1 / (h2 + pow(h3,get_base1(age,i,"age",1)))));
                }
                if (as_bool(logical_eq(model_id,2))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (h1 / (1 + exp((-(h2) * (get_base1(age,i,"age",1) - h3))))));
                }
                if (as_bool(logical_eq(model_id,3))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (h1 / (1 + exp((-(h2) * (log(get_base1(age,i,"age",1)) - h3))))));
                }
                if (as_bool(logical_eq(model_id,4))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (h1 + (h2 * log(get_base1(age,i,"age",1)))));
                }
                if (as_bool(logical_eq(model_id,5))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (h1 * log((1 + (get_base1(age,i,"age",1) / h2)))));
                }
                if (as_bool(logical_eq(model_id,6))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (h1 / (1 + exp(((-(h2) * get_base1(age,i,"age",1)) + h3)))));
                }
                if (as_bool(logical_eq(model_id,7))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (h1 * (get_base1(age,i,"age",1) / (h2 + get_base1(age,i,"age",1)))));
                }
                if (as_bool(logical_eq(model_id,8))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (h1 * (1 - exp((-(h2) * get_base1(age,i,"age",1))))));
                }
                if (as_bool(logical_eq(model_id,9))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (h1 * pow(get_base1(age,i,"age",1),h2)));
                }
                if (as_bool(logical_eq(model_id,10))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (h1 * pow(get_base1(age,i,"age",1),(h2 - (h3 / get_base1(age,i,"age",1))))));
                }
                if (as_bool(logical_eq(model_id,11))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (h1 * (1 - exp((-(h2) * pow(get_base1(age,i,"age",1),h3))))));
                }
            }
            stan::math::assign(h1_holdout, h1);
            stan::math::assign(h2_holdout, h2);
            stan::math::assign(h3_holdout, h3);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < n; ++i0__) {
            if (stan::math::is_uninitialized(mu(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: mu" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        if (stan::math::is_uninitialized(h1_holdout)) {
            std::stringstream msg__;
            msg__ << "Undefined transformed parameter: h1_holdout";
            throw std::runtime_error(msg__.str());
        }
        if (stan::math::is_uninitialized(h2_holdout)) {
            std::stringstream msg__;
            msg__ << "Undefined transformed parameter: h2_holdout";
            throw std::runtime_error(msg__.str());
        }
        if (stan::math::is_uninitialized(h3_holdout)) {
            std::stringstream msg__;
            msg__ << "Undefined transformed parameter: h3_holdout";
            throw std::runtime_error(msg__.str());
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning
        check_greater_or_equal(function__,"h1_holdout",h1_holdout,0);
        check_greater_or_equal(function__,"h2_holdout",h2_holdout,0);
        check_greater_or_equal(function__,"h3_holdout",h3_holdout,0);

        // model body
        try {

            lp_accum__.add(normal_log<propto__>(log(size_data), mu, sigma_obs));
            lp_accum__.add(normal_log<propto__>(sigma_obs, 0, 2));
            lp_accum__.add(normal_log<propto__>(h1, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(h2, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(h3, 0.0, 2.0));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("sigma_obs");
        names__.push_back("h1");
        names__.push_back("h2");
        names__.push_back("h3");
        names__.push_back("mu");
        names__.push_back("h1_holdout");
        names__.push_back("h2_holdout");
        names__.push_back("h3_holdout");
        names__.push_back("mu_plot_growth");
        names__.push_back("mu_plot_agr");
        names__.push_back("mu_pred");
        names__.push_back("size_plot");
        names__.push_back("size_plot_agr");
        names__.push_back("size_pred");
        names__.push_back("log_lik");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_all_mod_nopred_onemod_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double sigma_obs = in__.scalar_lb_constrain(0);
        double h1 = in__.scalar_lb_constrain(0);
        double h2 = in__.scalar_lb_constrain(0);
        double h3 = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_obs);
        vars__.push_back(h1);
        vars__.push_back(h2);
        vars__.push_back(h3);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        validate_non_negative_index("mu", "n", n);
        vector_d mu(static_cast<Eigen::VectorXd::Index>(n));
        (void) mu;  // dummy to suppress unused var warning

        stan::math::initialize(mu, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu,DUMMY_VAR__);
        double h1_holdout(0.0);
        (void) h1_holdout;  // dummy to suppress unused var warning

        stan::math::initialize(h1_holdout, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(h1_holdout,DUMMY_VAR__);
        double h2_holdout(0.0);
        (void) h2_holdout;  // dummy to suppress unused var warning

        stan::math::initialize(h2_holdout, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(h2_holdout,DUMMY_VAR__);
        double h3_holdout(0.0);
        (void) h3_holdout;  // dummy to suppress unused var warning

        stan::math::initialize(h3_holdout, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(h3_holdout,DUMMY_VAR__);


        try {
            for (int i = 1; i <= n; ++i) {

                if (as_bool(logical_eq(model_id,1))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (h1 / (h2 + pow(h3,get_base1(age,i,"age",1)))));
                }
                if (as_bool(logical_eq(model_id,2))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (h1 / (1 + exp((-(h2) * (get_base1(age,i,"age",1) - h3))))));
                }
                if (as_bool(logical_eq(model_id,3))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (h1 / (1 + exp((-(h2) * (log(get_base1(age,i,"age",1)) - h3))))));
                }
                if (as_bool(logical_eq(model_id,4))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (h1 + (h2 * log(get_base1(age,i,"age",1)))));
                }
                if (as_bool(logical_eq(model_id,5))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (h1 * log((1 + (get_base1(age,i,"age",1) / h2)))));
                }
                if (as_bool(logical_eq(model_id,6))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (h1 / (1 + exp(((-(h2) * get_base1(age,i,"age",1)) + h3)))));
                }
                if (as_bool(logical_eq(model_id,7))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (h1 * (get_base1(age,i,"age",1) / (h2 + get_base1(age,i,"age",1)))));
                }
                if (as_bool(logical_eq(model_id,8))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (h1 * (1 - exp((-(h2) * get_base1(age,i,"age",1))))));
                }
                if (as_bool(logical_eq(model_id,9))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (h1 * pow(get_base1(age,i,"age",1),h2)));
                }
                if (as_bool(logical_eq(model_id,10))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (h1 * pow(get_base1(age,i,"age",1),(h2 - (h3 / get_base1(age,i,"age",1))))));
                }
                if (as_bool(logical_eq(model_id,11))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (h1 * (1 - exp((-(h2) * pow(get_base1(age,i,"age",1),h3))))));
                }
            }
            stan::math::assign(h1_holdout, h1);
            stan::math::assign(h2_holdout, h2);
            stan::math::assign(h3_holdout, h3);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        check_greater_or_equal(function__,"h1_holdout",h1_holdout,0);
        check_greater_or_equal(function__,"h2_holdout",h2_holdout,0);
        check_greater_or_equal(function__,"h3_holdout",h3_holdout,0);

        // write transformed parameters
        for (int k_0__ = 0; k_0__ < n; ++k_0__) {
            vars__.push_back(mu[k_0__]);
        }
        vars__.push_back(h1_holdout);
        vars__.push_back(h2_holdout);
        vars__.push_back(h3_holdout);

        if (!include_gqs__) return;
        // declare and define generated quantities
        validate_non_negative_index("mu_plot_growth", "n_plot", n_plot);
        vector_d mu_plot_growth(static_cast<Eigen::VectorXd::Index>(n_plot));
        (void) mu_plot_growth;  // dummy to suppress unused var warning

        stan::math::initialize(mu_plot_growth, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu_plot_growth,DUMMY_VAR__);
        validate_non_negative_index("mu_plot_agr", "n_plot", n_plot);
        vector_d mu_plot_agr(static_cast<Eigen::VectorXd::Index>(n_plot));
        (void) mu_plot_agr;  // dummy to suppress unused var warning

        stan::math::initialize(mu_plot_agr, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu_plot_agr,DUMMY_VAR__);
        validate_non_negative_index("mu_pred", "n_pred", n_pred);
        vector_d mu_pred(static_cast<Eigen::VectorXd::Index>(n_pred));
        (void) mu_pred;  // dummy to suppress unused var warning

        stan::math::initialize(mu_pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu_pred,DUMMY_VAR__);
        validate_non_negative_index("size_plot", "n_plot", n_plot);
        vector_d size_plot(static_cast<Eigen::VectorXd::Index>(n_plot));
        (void) size_plot;  // dummy to suppress unused var warning

        stan::math::initialize(size_plot, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(size_plot,DUMMY_VAR__);
        validate_non_negative_index("size_plot_agr", "n_plot", n_plot);
        vector_d size_plot_agr(static_cast<Eigen::VectorXd::Index>(n_plot));
        (void) size_plot_agr;  // dummy to suppress unused var warning

        stan::math::initialize(size_plot_agr, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(size_plot_agr,DUMMY_VAR__);
        validate_non_negative_index("size_pred", "n_pred", n_pred);
        vector_d size_pred(static_cast<Eigen::VectorXd::Index>(n_pred));
        (void) size_pred;  // dummy to suppress unused var warning

        stan::math::initialize(size_pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(size_pred,DUMMY_VAR__);
        validate_non_negative_index("log_lik", "n", n);
        vector_d log_lik(static_cast<Eigen::VectorXd::Index>(n));
        (void) log_lik;  // dummy to suppress unused var warning

        stan::math::initialize(log_lik, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(log_lik,DUMMY_VAR__);


        try {
            for (int i = 1; i <= n_plot; ++i) {

                if (as_bool(logical_eq(model_id,1))) {

                    stan::math::assign(get_base1_lhs(mu_plot_growth,i,"mu_plot_growth",1), (h1 / (h2 + pow(h3,get_base1(age_plot,i,"age_plot",1)))));
                }
                if (as_bool(logical_eq(model_id,2))) {

                    stan::math::assign(get_base1_lhs(mu_plot_growth,i,"mu_plot_growth",1), (h1 / (1 + exp((-(h2) * (get_base1(age_plot,i,"age_plot",1) - h3))))));
                }
                if (as_bool(logical_eq(model_id,3))) {

                    stan::math::assign(get_base1_lhs(mu_plot_growth,i,"mu_plot_growth",1), (h1 / (1 + exp((-(h2) * (log(get_base1(age_plot,i,"age_plot",1)) - h3))))));
                }
                if (as_bool(logical_eq(model_id,4))) {

                    stan::math::assign(get_base1_lhs(mu_plot_growth,i,"mu_plot_growth",1), (h1 + (h2 * log(get_base1(age_plot,i,"age_plot",1)))));
                }
                if (as_bool(logical_eq(model_id,5))) {

                    stan::math::assign(get_base1_lhs(mu_plot_growth,i,"mu_plot_growth",1), (h1 * log((1 + (get_base1(age_plot,i,"age_plot",1) / h2)))));
                }
                if (as_bool(logical_eq(model_id,6))) {

                    stan::math::assign(get_base1_lhs(mu_plot_growth,i,"mu_plot_growth",1), (h1 / (1 + exp(((-(h2) * get_base1(age_plot,i,"age_plot",1)) + h3)))));
                }
                if (as_bool(logical_eq(model_id,7))) {

                    stan::math::assign(get_base1_lhs(mu_plot_growth,i,"mu_plot_growth",1), (h1 * (get_base1(age_plot,i,"age_plot",1) / (h2 + get_base1(age_plot,i,"age_plot",1)))));
                }
                if (as_bool(logical_eq(model_id,8))) {

                    stan::math::assign(get_base1_lhs(mu_plot_growth,i,"mu_plot_growth",1), (h1 * (1 - exp((-(h2) * get_base1(age_plot,i,"age_plot",1))))));
                }
                if (as_bool(logical_eq(model_id,9))) {

                    stan::math::assign(get_base1_lhs(mu_plot_growth,i,"mu_plot_growth",1), (h1 * pow(get_base1(age_plot,i,"age_plot",1),h2)));
                }
                if (as_bool(logical_eq(model_id,10))) {

                    stan::math::assign(get_base1_lhs(mu_plot_growth,i,"mu_plot_growth",1), (h1 * pow(get_base1(age_plot,i,"age_plot",1),(h2 - (h3 / get_base1(age_plot,i,"age_plot",1))))));
                }
                if (as_bool(logical_eq(model_id,11))) {

                    stan::math::assign(get_base1_lhs(mu_plot_growth,i,"mu_plot_growth",1), (h1 * (1 - exp((-(h2) * pow(get_base1(age_plot,i,"age_plot",1),h3))))));
                }
            }
            for (int i = 1; i <= n_plot; ++i) {
                stan::math::assign(get_base1_lhs(size_plot,i,"size_plot",1), exp(get_base1(mu_plot_growth,i,"mu_plot_growth",1)));
            }
            for (int i = 1; i <= n_plot; ++i) {

                if (as_bool(logical_eq(model_id,1))) {

                    stan::math::assign(get_base1_lhs(mu_plot_agr,i,"mu_plot_agr",1), (((-(h1) * pow(h3,get_base1(age_plot,i,"age_plot",1))) * log(h3)) / pow((h2 + pow(h3,get_base1(age_plot,i,"age_plot",1))),2)));
                }
                if (as_bool(logical_eq(model_id,2))) {

                    stan::math::assign(get_base1_lhs(mu_plot_agr,i,"mu_plot_agr",1), (get_base1(mu_plot_growth,i,"mu_plot_growth",1) * ((h2 * exp((-(h2) * (get_base1(age_plot,i,"age_plot",1) - h3)))) / (1 + exp((-(h2) * (get_base1(age_plot,i,"age_plot",1) - h3)))))));
                }
                if (as_bool(logical_eq(model_id,3))) {

                    stan::math::assign(get_base1_lhs(mu_plot_agr,i,"mu_plot_agr",1), (get_base1(mu_plot_growth,i,"mu_plot_growth",1) * ((h2 * exp((-(h2) * (log(get_base1(age_plot,i,"age_plot",1)) - h3)))) / (1 + exp((-(h2) * (log(get_base1(age_plot,i,"age_plot",1)) - h3)))))));
                }
                if (as_bool(logical_eq(model_id,4))) {

                    stan::math::assign(get_base1_lhs(mu_plot_agr,i,"mu_plot_agr",1), (h2 / get_base1(age_plot,i,"age_plot",1)));
                }
                if (as_bool(logical_eq(model_id,5))) {

                    stan::math::assign(get_base1_lhs(mu_plot_agr,i,"mu_plot_agr",1), (h1 / (h2 + get_base1(age_plot,i,"age_plot",1))));
                }
                if (as_bool(logical_eq(model_id,6))) {

                    stan::math::assign(get_base1_lhs(mu_plot_agr,i,"mu_plot_agr",1), ((h2 * h1) / ((2 * cosh((h3 - (h2 * get_base1(age_plot,i,"age_plot",1))))) + 2)));
                }
                if (as_bool(logical_eq(model_id,7))) {

                    stan::math::assign(get_base1_lhs(mu_plot_agr,i,"mu_plot_agr",1), (h1 * (h2 / pow((h2 + get_base1(age_plot,i,"age_plot",1)),2))));
                }
                if (as_bool(logical_eq(model_id,8))) {

                    stan::math::assign(get_base1_lhs(mu_plot_agr,i,"mu_plot_agr",1), ((h1 * h2) * exp((-(h2) * get_base1(age_plot,i,"age_plot",1)))));
                }
                if (as_bool(logical_eq(model_id,9))) {

                    stan::math::assign(get_base1_lhs(mu_plot_agr,i,"mu_plot_agr",1), ((h1 * h2) * pow(get_base1(age_plot,i,"age_plot",1),(h2 - 1))));
                }
                if (as_bool(logical_eq(model_id,10))) {

                    stan::math::assign(get_base1_lhs(mu_plot_agr,i,"mu_plot_agr",1), (get_base1(mu_plot_growth,i,"mu_plot_growth",1) * (((h2 - (h3 / get_base1(age_plot,i,"age_plot",1))) / get_base1(age_plot,i,"age_plot",1)) + ((h3 * log(get_base1(age_plot,i,"age_plot",1))) / pow(get_base1(age_plot,i,"age_plot",1),2)))));
                }
                if (as_bool(logical_eq(model_id,11))) {

                    stan::math::assign(get_base1_lhs(mu_plot_agr,i,"mu_plot_agr",1), ((((h1 * h2) * h3) * pow(get_base1(age_plot,i,"age_plot",1),(h3 - 1))) * exp((-(h2) * pow(get_base1(age_plot,i,"age_plot",1),h3)))));
                }
            }
            for (int i = 1; i <= n_plot; ++i) {
                stan::math::assign(get_base1_lhs(size_plot_agr,i,"size_plot_agr",1), exp(get_base1(mu_plot_agr,i,"mu_plot_agr",1)));
            }
            for (int i = 1; i <= n_pred; ++i) {

                if (as_bool(logical_eq(model_id,1))) {

                    stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), (h1_holdout / (h2_holdout + pow(h3_holdout,get_base1(age_holdout,i,1,"age_holdout",1)))));
                }
                if (as_bool(logical_eq(model_id,2))) {

                    stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), (h1_holdout / (1 + exp((-(h2_holdout) * (get_base1(age_holdout,i,1,"age_holdout",1) - h3_holdout))))));
                }
                if (as_bool(logical_eq(model_id,3))) {

                    stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), (h1_holdout / (1 + exp((-(h2_holdout) * (log(get_base1(age_holdout,i,1,"age_holdout",1)) - h3_holdout))))));
                }
                if (as_bool(logical_eq(model_id,4))) {

                    stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), (h1_holdout + (h2_holdout * log(get_base1(age_holdout,i,1,"age_holdout",1)))));
                }
                if (as_bool(logical_eq(model_id,5))) {

                    stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), (h1_holdout * log((1 + (get_base1(age_holdout,i,1,"age_holdout",1) / h2_holdout)))));
                }
                if (as_bool(logical_eq(model_id,6))) {

                    stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), (h1_holdout / (1 + exp(((-(h2_holdout) * get_base1(age_holdout,i,1,"age_holdout",1)) + h3_holdout)))));
                }
                if (as_bool(logical_eq(model_id,7))) {

                    stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), (h1_holdout * (get_base1(age_holdout,i,1,"age_holdout",1) / (h2_holdout + get_base1(age_holdout,i,1,"age_holdout",1)))));
                }
                if (as_bool(logical_eq(model_id,8))) {

                    stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), (h1_holdout * (1 - exp((-(h2_holdout) * get_base1(age_holdout,i,1,"age_holdout",1))))));
                }
                if (as_bool(logical_eq(model_id,9))) {

                    stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), (h1_holdout * pow(get_base1(age_holdout,i,1,"age_holdout",1),h2_holdout)));
                }
                if (as_bool(logical_eq(model_id,10))) {

                    stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), (h1_holdout * pow(get_base1(age_holdout,i,1,"age_holdout",1),(h2_holdout - (h3_holdout / get_base1(age_holdout,i,1,"age_holdout",1))))));
                }
                if (as_bool(logical_eq(model_id,11))) {

                    stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), (h1_holdout * (1 - exp((-(h2_holdout) * pow(get_base1(age_holdout,i,1,"age_holdout",1),h3_holdout))))));
                }
            }
            for (int i = 1; i <= n_pred; ++i) {
                stan::math::assign(get_base1_lhs(size_pred,i,"size_pred",1), exp(get_base1(mu_pred,i,"mu_pred",1)));
            }
            for (int i = 1; i <= n; ++i) {
                stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), normal_log(log(get_base1(size_data,i,"size_data",1)),get_base1(mu,i,"mu",1),sigma_obs));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities
        check_greater_or_equal(function__,"size_plot",size_plot,0);
        check_greater_or_equal(function__,"size_plot_agr",size_plot_agr,0);
        check_greater_or_equal(function__,"size_pred",size_pred,0);

        // write generated quantities
        for (int k_0__ = 0; k_0__ < n_plot; ++k_0__) {
            vars__.push_back(mu_plot_growth[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_plot; ++k_0__) {
            vars__.push_back(mu_plot_agr[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_pred; ++k_0__) {
            vars__.push_back(mu_pred[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_plot; ++k_0__) {
            vars__.push_back(size_plot[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_plot; ++k_0__) {
            vars__.push_back(size_plot_agr[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_pred; ++k_0__) {
            vars__.push_back(size_pred[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_all_mod_nopred_onemod";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_obs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h3";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "h1_holdout";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h2_holdout";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h3_holdout";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_plot_growth" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_plot_agr" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_plot" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_plot_agr" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_obs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h3";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "h1_holdout";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h2_holdout";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h3_holdout";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_plot_growth" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_plot_agr" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_plot" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_plot_agr" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}




// Code generated by Stan version 2.16.0

#include <stan/model/model_header.hpp>

namespace model_all_mod_pred_blockmod_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_all_mod_pred_blockmod");
    reader.add_event(248, 248, "end", "model_all_mod_pred_blockmod");
    return reader;
}

class model_all_mod_pred_blockmod : public prob_grad {
private:
    int model_id;
    int n;
    int n_pred;
    int n_block;
    int n_block_pred;
    int n_x1;
    int n_x2;
    int n_x3;
    matrix_d x1;
    matrix_d x2;
    matrix_d x3;
    matrix_d x1_pred;
    matrix_d x2_pred;
    matrix_d x3_pred;
    vector_d size_data;
    vector_d age;
    matrix_d age_holdout;
    vector<int> block_data;
    vector<int> block_holdout;
    int n_plot;
    vector_d age_plot;
public:
    model_all_mod_pred_blockmod(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_all_mod_pred_blockmod(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_all_mod_pred_blockmod_namespace::model_all_mod_pred_blockmod";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "model_id", "int", context__.to_vec());
        model_id = int(0);
        vals_i__ = context__.vals_i("model_id");
        pos__ = 0;
        model_id = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n", "int", context__.to_vec());
        n = int(0);
        vals_i__ = context__.vals_i("n");
        pos__ = 0;
        n = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_pred", "int", context__.to_vec());
        n_pred = int(0);
        vals_i__ = context__.vals_i("n_pred");
        pos__ = 0;
        n_pred = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_block", "int", context__.to_vec());
        n_block = int(0);
        vals_i__ = context__.vals_i("n_block");
        pos__ = 0;
        n_block = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_block_pred", "int", context__.to_vec());
        n_block_pred = int(0);
        vals_i__ = context__.vals_i("n_block_pred");
        pos__ = 0;
        n_block_pred = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_x1", "int", context__.to_vec());
        n_x1 = int(0);
        vals_i__ = context__.vals_i("n_x1");
        pos__ = 0;
        n_x1 = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_x2", "int", context__.to_vec());
        n_x2 = int(0);
        vals_i__ = context__.vals_i("n_x2");
        pos__ = 0;
        n_x2 = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_x3", "int", context__.to_vec());
        n_x3 = int(0);
        vals_i__ = context__.vals_i("n_x3");
        pos__ = 0;
        n_x3 = vals_i__[pos__++];
        validate_non_negative_index("x1", "n_block", n_block);
        validate_non_negative_index("x1", "n_x1", n_x1);
        context__.validate_dims("data initialization", "x1", "matrix_d", context__.to_vec(n_block,n_x1));
        validate_non_negative_index("x1", "n_block", n_block);
        validate_non_negative_index("x1", "n_x1", n_x1);
        x1 = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block),static_cast<Eigen::VectorXd::Index>(n_x1));
        vals_r__ = context__.vals_r("x1");
        pos__ = 0;
        size_t x1_m_mat_lim__ = n_block;
        size_t x1_n_mat_lim__ = n_x1;
        for (size_t n_mat__ = 0; n_mat__ < x1_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x1_m_mat_lim__; ++m_mat__) {
                x1(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x2", "n_block", n_block);
        validate_non_negative_index("x2", "n_x2", n_x2);
        context__.validate_dims("data initialization", "x2", "matrix_d", context__.to_vec(n_block,n_x2));
        validate_non_negative_index("x2", "n_block", n_block);
        validate_non_negative_index("x2", "n_x2", n_x2);
        x2 = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block),static_cast<Eigen::VectorXd::Index>(n_x2));
        vals_r__ = context__.vals_r("x2");
        pos__ = 0;
        size_t x2_m_mat_lim__ = n_block;
        size_t x2_n_mat_lim__ = n_x2;
        for (size_t n_mat__ = 0; n_mat__ < x2_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x2_m_mat_lim__; ++m_mat__) {
                x2(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x3", "n_block", n_block);
        validate_non_negative_index("x3", "n_x3", n_x3);
        context__.validate_dims("data initialization", "x3", "matrix_d", context__.to_vec(n_block,n_x3));
        validate_non_negative_index("x3", "n_block", n_block);
        validate_non_negative_index("x3", "n_x3", n_x3);
        x3 = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block),static_cast<Eigen::VectorXd::Index>(n_x3));
        vals_r__ = context__.vals_r("x3");
        pos__ = 0;
        size_t x3_m_mat_lim__ = n_block;
        size_t x3_n_mat_lim__ = n_x3;
        for (size_t n_mat__ = 0; n_mat__ < x3_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x3_m_mat_lim__; ++m_mat__) {
                x3(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x1_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x1_pred", "n_x1", n_x1);
        context__.validate_dims("data initialization", "x1_pred", "matrix_d", context__.to_vec(n_block_pred,n_x1));
        validate_non_negative_index("x1_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x1_pred", "n_x1", n_x1);
        x1_pred = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block_pred),static_cast<Eigen::VectorXd::Index>(n_x1));
        vals_r__ = context__.vals_r("x1_pred");
        pos__ = 0;
        size_t x1_pred_m_mat_lim__ = n_block_pred;
        size_t x1_pred_n_mat_lim__ = n_x1;
        for (size_t n_mat__ = 0; n_mat__ < x1_pred_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x1_pred_m_mat_lim__; ++m_mat__) {
                x1_pred(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x2_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x2_pred", "n_x2", n_x2);
        context__.validate_dims("data initialization", "x2_pred", "matrix_d", context__.to_vec(n_block_pred,n_x2));
        validate_non_negative_index("x2_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x2_pred", "n_x2", n_x2);
        x2_pred = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block_pred),static_cast<Eigen::VectorXd::Index>(n_x2));
        vals_r__ = context__.vals_r("x2_pred");
        pos__ = 0;
        size_t x2_pred_m_mat_lim__ = n_block_pred;
        size_t x2_pred_n_mat_lim__ = n_x2;
        for (size_t n_mat__ = 0; n_mat__ < x2_pred_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x2_pred_m_mat_lim__; ++m_mat__) {
                x2_pred(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x3_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x3_pred", "n_x3", n_x3);
        context__.validate_dims("data initialization", "x3_pred", "matrix_d", context__.to_vec(n_block_pred,n_x3));
        validate_non_negative_index("x3_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x3_pred", "n_x3", n_x3);
        x3_pred = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block_pred),static_cast<Eigen::VectorXd::Index>(n_x3));
        vals_r__ = context__.vals_r("x3_pred");
        pos__ = 0;
        size_t x3_pred_m_mat_lim__ = n_block_pred;
        size_t x3_pred_n_mat_lim__ = n_x3;
        for (size_t n_mat__ = 0; n_mat__ < x3_pred_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x3_pred_m_mat_lim__; ++m_mat__) {
                x3_pred(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("size_data", "n", n);
        context__.validate_dims("data initialization", "size_data", "vector_d", context__.to_vec(n));
        validate_non_negative_index("size_data", "n", n);
        size_data = vector_d(static_cast<Eigen::VectorXd::Index>(n));
        vals_r__ = context__.vals_r("size_data");
        pos__ = 0;
        size_t size_data_i_vec_lim__ = n;
        for (size_t i_vec__ = 0; i_vec__ < size_data_i_vec_lim__; ++i_vec__) {
            size_data[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("age", "n", n);
        context__.validate_dims("data initialization", "age", "vector_d", context__.to_vec(n));
        validate_non_negative_index("age", "n", n);
        age = vector_d(static_cast<Eigen::VectorXd::Index>(n));
        vals_r__ = context__.vals_r("age");
        pos__ = 0;
        size_t age_i_vec_lim__ = n;
        for (size_t i_vec__ = 0; i_vec__ < age_i_vec_lim__; ++i_vec__) {
            age[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("age_holdout", "n_pred", n_pred);
        validate_non_negative_index("age_holdout", "1", 1);
        context__.validate_dims("data initialization", "age_holdout", "matrix_d", context__.to_vec(n_pred,1));
        validate_non_negative_index("age_holdout", "n_pred", n_pred);
        validate_non_negative_index("age_holdout", "1", 1);
        age_holdout = matrix_d(static_cast<Eigen::VectorXd::Index>(n_pred),static_cast<Eigen::VectorXd::Index>(1));
        vals_r__ = context__.vals_r("age_holdout");
        pos__ = 0;
        size_t age_holdout_m_mat_lim__ = n_pred;
        size_t age_holdout_n_mat_lim__ = 1;
        for (size_t n_mat__ = 0; n_mat__ < age_holdout_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < age_holdout_m_mat_lim__; ++m_mat__) {
                age_holdout(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("block_data", "n", n);
        context__.validate_dims("data initialization", "block_data", "int", context__.to_vec(n));
        validate_non_negative_index("block_data", "n", n);
        block_data = std::vector<int>(n,int(0));
        vals_i__ = context__.vals_i("block_data");
        pos__ = 0;
        size_t block_data_limit_0__ = n;
        for (size_t i_0__ = 0; i_0__ < block_data_limit_0__; ++i_0__) {
            block_data[i_0__] = vals_i__[pos__++];
        }
        validate_non_negative_index("block_holdout", "n_pred", n_pred);
        context__.validate_dims("data initialization", "block_holdout", "int", context__.to_vec(n_pred));
        validate_non_negative_index("block_holdout", "n_pred", n_pred);
        block_holdout = std::vector<int>(n_pred,int(0));
        vals_i__ = context__.vals_i("block_holdout");
        pos__ = 0;
        size_t block_holdout_limit_0__ = n_pred;
        for (size_t i_0__ = 0; i_0__ < block_holdout_limit_0__; ++i_0__) {
            block_holdout[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "n_plot", "int", context__.to_vec());
        n_plot = int(0);
        vals_i__ = context__.vals_i("n_plot");
        pos__ = 0;
        n_plot = vals_i__[pos__++];
        validate_non_negative_index("age_plot", "n_plot", n_plot);
        context__.validate_dims("data initialization", "age_plot", "vector_d", context__.to_vec(n_plot));
        validate_non_negative_index("age_plot", "n_plot", n_plot);
        age_plot = vector_d(static_cast<Eigen::VectorXd::Index>(n_plot));
        vals_r__ = context__.vals_r("age_plot");
        pos__ = 0;
        size_t age_plot_i_vec_lim__ = n_plot;
        for (size_t i_vec__ = 0; i_vec__ < age_plot_i_vec_lim__; ++i_vec__) {
            age_plot[i_vec__] = vals_r__[pos__++];
        }

        // validate, data variables
        check_greater_or_equal(function__,"model_id",model_id,0);
        check_greater_or_equal(function__,"n",n,0);
        check_greater_or_equal(function__,"n_pred",n_pred,0);
        check_greater_or_equal(function__,"n_block",n_block,0);
        check_greater_or_equal(function__,"n_block_pred",n_block_pred,0);
        check_greater_or_equal(function__,"n_x1",n_x1,0);
        check_greater_or_equal(function__,"n_x2",n_x2,0);
        check_greater_or_equal(function__,"n_x3",n_x3,0);
        check_greater_or_equal(function__,"size_data",size_data,0);
        for (int k0__ = 0; k0__ < n; ++k0__) {
            check_greater_or_equal(function__,"block_data[k0__]",block_data[k0__],0);
            check_less_or_equal(function__,"block_data[k0__]",block_data[k0__],n_block);
        }
        for (int k0__ = 0; k0__ < n_pred; ++k0__) {
            check_greater_or_equal(function__,"block_holdout[k0__]",block_holdout[k0__],0);
            check_less_or_equal(function__,"block_holdout[k0__]",block_holdout[k0__],n_block_pred);
        }
        check_greater_or_equal(function__,"n_plot",n_plot,0);
        // initialize data variables

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // validate, set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        validate_non_negative_index("h1", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h2", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h3", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h1_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h2_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h3_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("b1", "n_x1", n_x1);
        num_params_r__ += n_x1;
        validate_non_negative_index("b2", "n_x2", n_x2);
        num_params_r__ += n_x2;
        validate_non_negative_index("b3", "n_x3", n_x3);
        num_params_r__ += n_x3;
    }

    ~model_all_mod_pred_blockmod() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("sigma_obs")))
            throw std::runtime_error("variable sigma_obs missing");
        vals_r__ = context__.vals_r("sigma_obs");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma_obs", "double", context__.to_vec());
        // generate_declaration sigma_obs
        double sigma_obs(0);
        sigma_obs = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma_obs);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_obs: ") + e.what());
        }

        if (!(context__.contains_r("sd_h1")))
            throw std::runtime_error("variable sd_h1 missing");
        vals_r__ = context__.vals_r("sd_h1");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h1", "double", context__.to_vec());
        // generate_declaration sd_h1
        double sd_h1(0);
        sd_h1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h1: ") + e.what());
        }

        if (!(context__.contains_r("sd_h2")))
            throw std::runtime_error("variable sd_h2 missing");
        vals_r__ = context__.vals_r("sd_h2");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h2", "double", context__.to_vec());
        // generate_declaration sd_h2
        double sd_h2(0);
        sd_h2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h2: ") + e.what());
        }

        if (!(context__.contains_r("sd_h3")))
            throw std::runtime_error("variable sd_h3 missing");
        vals_r__ = context__.vals_r("sd_h3");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h3", "double", context__.to_vec());
        // generate_declaration sd_h3
        double sd_h3(0);
        sd_h3 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h3);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h3: ") + e.what());
        }

        if (!(context__.contains_r("h1")))
            throw std::runtime_error("variable h1 missing");
        vals_r__ = context__.vals_r("h1");
        pos__ = 0U;
        validate_non_negative_index("h1", "n_block", n_block);
        context__.validate_dims("initialization", "h1", "vector_d", context__.to_vec(n_block));
        // generate_declaration h1
        vector_d h1(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h1(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,h1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h1: ") + e.what());
        }

        if (!(context__.contains_r("h2")))
            throw std::runtime_error("variable h2 missing");
        vals_r__ = context__.vals_r("h2");
        pos__ = 0U;
        validate_non_negative_index("h2", "n_block", n_block);
        context__.validate_dims("initialization", "h2", "vector_d", context__.to_vec(n_block));
        // generate_declaration h2
        vector_d h2(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h2(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,h2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h2: ") + e.what());
        }

        if (!(context__.contains_r("h3")))
            throw std::runtime_error("variable h3 missing");
        vals_r__ = context__.vals_r("h3");
        pos__ = 0U;
        validate_non_negative_index("h3", "n_block", n_block);
        context__.validate_dims("initialization", "h3", "vector_d", context__.to_vec(n_block));
        // generate_declaration h3
        vector_d h3(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h3(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,h3);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h3: ") + e.what());
        }

        if (!(context__.contains_r("h1_holdout")))
            throw std::runtime_error("variable h1_holdout missing");
        vals_r__ = context__.vals_r("h1_holdout");
        pos__ = 0U;
        validate_non_negative_index("h1_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h1_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h1_holdout
        vector_d h1_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h1_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,h1_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h1_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h2_holdout")))
            throw std::runtime_error("variable h2_holdout missing");
        vals_r__ = context__.vals_r("h2_holdout");
        pos__ = 0U;
        validate_non_negative_index("h2_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h2_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h2_holdout
        vector_d h2_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h2_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,h2_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h2_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h3_holdout")))
            throw std::runtime_error("variable h3_holdout missing");
        vals_r__ = context__.vals_r("h3_holdout");
        pos__ = 0U;
        validate_non_negative_index("h3_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h3_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h3_holdout
        vector_d h3_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h3_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,h3_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h3_holdout: ") + e.what());
        }

        if (!(context__.contains_r("b1")))
            throw std::runtime_error("variable b1 missing");
        vals_r__ = context__.vals_r("b1");
        pos__ = 0U;
        validate_non_negative_index("b1", "n_x1", n_x1);
        context__.validate_dims("initialization", "b1", "vector_d", context__.to_vec(n_x1));
        // generate_declaration b1
        vector_d b1(static_cast<Eigen::VectorXd::Index>(n_x1));
        for (int j1__ = 0U; j1__ < n_x1; ++j1__)
            b1(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(b1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b1: ") + e.what());
        }

        if (!(context__.contains_r("b2")))
            throw std::runtime_error("variable b2 missing");
        vals_r__ = context__.vals_r("b2");
        pos__ = 0U;
        validate_non_negative_index("b2", "n_x2", n_x2);
        context__.validate_dims("initialization", "b2", "vector_d", context__.to_vec(n_x2));
        // generate_declaration b2
        vector_d b2(static_cast<Eigen::VectorXd::Index>(n_x2));
        for (int j1__ = 0U; j1__ < n_x2; ++j1__)
            b2(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(b2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b2: ") + e.what());
        }

        if (!(context__.contains_r("b3")))
            throw std::runtime_error("variable b3 missing");
        vals_r__ = context__.vals_r("b3");
        pos__ = 0U;
        validate_non_negative_index("b3", "n_x3", n_x3);
        context__.validate_dims("initialization", "b3", "vector_d", context__.to_vec(n_x3));
        // generate_declaration b3
        vector_d b3(static_cast<Eigen::VectorXd::Index>(n_x3));
        for (int j1__ = 0U; j1__ < n_x3; ++j1__)
            b3(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(b3);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b3: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        T__ sigma_obs;
        (void) sigma_obs;  // dummy to suppress unused var warning
        if (jacobian__)
            sigma_obs = in__.scalar_lb_constrain(0,lp__);
        else
            sigma_obs = in__.scalar_lb_constrain(0);

        T__ sd_h1;
        (void) sd_h1;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h1 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h1 = in__.scalar_lb_constrain(0);

        T__ sd_h2;
        (void) sd_h2;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h2 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h2 = in__.scalar_lb_constrain(0);

        T__ sd_h3;
        (void) sd_h3;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h3 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h3 = in__.scalar_lb_constrain(0);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h1;
        (void) h1;  // dummy to suppress unused var warning
        if (jacobian__)
            h1 = in__.vector_lb_constrain(0,n_block,lp__);
        else
            h1 = in__.vector_lb_constrain(0,n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h2;
        (void) h2;  // dummy to suppress unused var warning
        if (jacobian__)
            h2 = in__.vector_lb_constrain(0,n_block,lp__);
        else
            h2 = in__.vector_lb_constrain(0,n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h3;
        (void) h3;  // dummy to suppress unused var warning
        if (jacobian__)
            h3 = in__.vector_lb_constrain(0,n_block,lp__);
        else
            h3 = in__.vector_lb_constrain(0,n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h1_holdout;
        (void) h1_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h1_holdout = in__.vector_lb_constrain(0,n_block_pred,lp__);
        else
            h1_holdout = in__.vector_lb_constrain(0,n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h2_holdout;
        (void) h2_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h2_holdout = in__.vector_lb_constrain(0,n_block_pred,lp__);
        else
            h2_holdout = in__.vector_lb_constrain(0,n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h3_holdout;
        (void) h3_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h3_holdout = in__.vector_lb_constrain(0,n_block_pred,lp__);
        else
            h3_holdout = in__.vector_lb_constrain(0,n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  b1;
        (void) b1;  // dummy to suppress unused var warning
        if (jacobian__)
            b1 = in__.vector_constrain(n_x1,lp__);
        else
            b1 = in__.vector_constrain(n_x1);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  b2;
        (void) b2;  // dummy to suppress unused var warning
        if (jacobian__)
            b2 = in__.vector_constrain(n_x2,lp__);
        else
            b2 = in__.vector_constrain(n_x2);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  b3;
        (void) b3;  // dummy to suppress unused var warning
        if (jacobian__)
            b3 = in__.vector_constrain(n_x3,lp__);
        else
            b3 = in__.vector_constrain(n_x3);


        // transformed parameters
        validate_non_negative_index("mu", "n", n);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  mu(static_cast<Eigen::VectorXd::Index>(n));
        (void) mu;  // dummy to suppress unused var warning

        stan::math::initialize(mu, DUMMY_VAR__);
        stan::math::fill(mu,DUMMY_VAR__);
        validate_non_negative_index("psi1", "n_block", n_block);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi1(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi1;  // dummy to suppress unused var warning

        stan::math::initialize(psi1, DUMMY_VAR__);
        stan::math::fill(psi1,DUMMY_VAR__);
        validate_non_negative_index("psi2", "n_block", n_block);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi2(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi2;  // dummy to suppress unused var warning

        stan::math::initialize(psi2, DUMMY_VAR__);
        stan::math::fill(psi2,DUMMY_VAR__);
        validate_non_negative_index("psi3", "n_block", n_block);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi3(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi3;  // dummy to suppress unused var warning

        stan::math::initialize(psi3, DUMMY_VAR__);
        stan::math::fill(psi3,DUMMY_VAR__);
        validate_non_negative_index("psi1_pred", "n_block_pred", n_block_pred);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi1_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi1_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi1_pred, DUMMY_VAR__);
        stan::math::fill(psi1_pred,DUMMY_VAR__);
        validate_non_negative_index("psi2_pred", "n_block_pred", n_block_pred);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi2_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi2_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi2_pred, DUMMY_VAR__);
        stan::math::fill(psi2_pred,DUMMY_VAR__);
        validate_non_negative_index("psi3_pred", "n_block_pred", n_block_pred);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi3_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi3_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi3_pred, DUMMY_VAR__);
        stan::math::fill(psi3_pred,DUMMY_VAR__);


        try {
            for (int i = 1; i <= n; ++i) {

                if (as_bool(logical_eq(model_id,1))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) / (get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1) + pow(get_base1(h3,get_base1(block_data,i,"block_data",1),"h3",1),get_base1(age,i,"age",1)))));
                }
                if (as_bool(logical_eq(model_id,2))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) / (1 + exp((-(get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1)) * (get_base1(age,i,"age",1) - get_base1(h3,get_base1(block_data,i,"block_data",1),"h3",1)))))));
                }
                if (as_bool(logical_eq(model_id,3))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) / (1 + exp((-(get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1)) * (log(get_base1(age,i,"age",1)) - get_base1(h3,get_base1(block_data,i,"block_data",1),"h3",1)))))));
                }
                if (as_bool(logical_eq(model_id,4))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) + (get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1) * log(get_base1(age,i,"age",1)))));
                }
                if (as_bool(logical_eq(model_id,5))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) * log((1 + (get_base1(age,i,"age",1) / get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1))))));
                }
                if (as_bool(logical_eq(model_id,6))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) / (1 + exp(((-(get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1)) * get_base1(age,i,"age",1)) + get_base1(h3,get_base1(block_data,i,"block_data",1),"h3",1))))));
                }
                if (as_bool(logical_eq(model_id,7))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) * (get_base1(age,i,"age",1) / (get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1) + get_base1(age,i,"age",1)))));
                }
                if (as_bool(logical_eq(model_id,8))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) * (1 - exp((-(get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1)) * get_base1(age,i,"age",1))))));
                }
                if (as_bool(logical_eq(model_id,9))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) * pow(get_base1(age,i,"age",1),get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1))));
                }
                if (as_bool(logical_eq(model_id,10))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) * pow(get_base1(age,i,"age",1),(get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1) - (get_base1(h3,get_base1(block_data,i,"block_data",1),"h3",1) / get_base1(age,i,"age",1))))));
                }
                if (as_bool(logical_eq(model_id,11))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) * (1 - exp((-(get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1)) * pow(get_base1(age,i,"age",1),get_base1(h3,get_base1(block_data,i,"block_data",1),"h3",1)))))));
                }
            }
            stan::math::assign(psi1, multiply(x1,b1));
            stan::math::assign(psi2, multiply(x2,b2));
            stan::math::assign(psi3, multiply(x3,b3));
            stan::math::assign(psi1_pred, multiply(x1_pred,b1));
            stan::math::assign(psi2_pred, multiply(x2_pred,b2));
            stan::math::assign(psi3_pred, multiply(x3_pred,b3));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < n; ++i0__) {
            if (stan::math::is_uninitialized(mu(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: mu" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block; ++i0__) {
            if (stan::math::is_uninitialized(psi1(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi1" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block; ++i0__) {
            if (stan::math::is_uninitialized(psi2(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi2" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block; ++i0__) {
            if (stan::math::is_uninitialized(psi3(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi3" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block_pred; ++i0__) {
            if (stan::math::is_uninitialized(psi1_pred(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi1_pred" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block_pred; ++i0__) {
            if (stan::math::is_uninitialized(psi2_pred(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi2_pred" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block_pred; ++i0__) {
            if (stan::math::is_uninitialized(psi3_pred(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi3_pred" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning

        // model body
        try {

            lp_accum__.add(normal_log<propto__>(log(size_data), mu, sigma_obs));
            lp_accum__.add(normal_log<propto__>(sigma_obs, 0, 2));
            lp_accum__.add(normal_log<propto__>(h1, psi1, sd_h1));
            lp_accum__.add(normal_log<propto__>(h2, psi2, sd_h2));
            lp_accum__.add(normal_log<propto__>(h3, psi3, sd_h3));
            lp_accum__.add(normal_log<propto__>(h1_holdout, psi1_pred, sd_h1));
            lp_accum__.add(normal_log<propto__>(h2_holdout, psi2_pred, sd_h2));
            lp_accum__.add(normal_log<propto__>(h3_holdout, psi3_pred, sd_h3));
            lp_accum__.add(normal_log<propto__>(b1, 0.0, 10.0));
            lp_accum__.add(normal_log<propto__>(b2, 0.0, 10.0));
            lp_accum__.add(normal_log<propto__>(b3, 0.0, 10.0));
            lp_accum__.add(normal_log<propto__>(sd_h1, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h2, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h3, 0.0, 2.0));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("sigma_obs");
        names__.push_back("sd_h1");
        names__.push_back("sd_h2");
        names__.push_back("sd_h3");
        names__.push_back("h1");
        names__.push_back("h2");
        names__.push_back("h3");
        names__.push_back("h1_holdout");
        names__.push_back("h2_holdout");
        names__.push_back("h3_holdout");
        names__.push_back("b1");
        names__.push_back("b2");
        names__.push_back("b3");
        names__.push_back("mu");
        names__.push_back("psi1");
        names__.push_back("psi2");
        names__.push_back("psi3");
        names__.push_back("psi1_pred");
        names__.push_back("psi2_pred");
        names__.push_back("psi3_pred");
        names__.push_back("mu_plot_growth");
        names__.push_back("mu_plot_agr");
        names__.push_back("mu_pred");
        names__.push_back("size_plot");
        names__.push_back("size_plot_agr");
        names__.push_back("size_pred");
        names__.push_back("log_lik");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_all_mod_pred_blockmod_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double sigma_obs = in__.scalar_lb_constrain(0);
        double sd_h1 = in__.scalar_lb_constrain(0);
        double sd_h2 = in__.scalar_lb_constrain(0);
        double sd_h3 = in__.scalar_lb_constrain(0);
        vector_d h1 = in__.vector_lb_constrain(0,n_block);
        vector_d h2 = in__.vector_lb_constrain(0,n_block);
        vector_d h3 = in__.vector_lb_constrain(0,n_block);
        vector_d h1_holdout = in__.vector_lb_constrain(0,n_block_pred);
        vector_d h2_holdout = in__.vector_lb_constrain(0,n_block_pred);
        vector_d h3_holdout = in__.vector_lb_constrain(0,n_block_pred);
        vector_d b1 = in__.vector_constrain(n_x1);
        vector_d b2 = in__.vector_constrain(n_x2);
        vector_d b3 = in__.vector_constrain(n_x3);
        vars__.push_back(sigma_obs);
        vars__.push_back(sd_h1);
        vars__.push_back(sd_h2);
        vars__.push_back(sd_h3);
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h1[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h2[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h3[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h1_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h2_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h3_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_x1; ++k_0__) {
            vars__.push_back(b1[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_x2; ++k_0__) {
            vars__.push_back(b2[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_x3; ++k_0__) {
            vars__.push_back(b3[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        validate_non_negative_index("mu", "n", n);
        vector_d mu(static_cast<Eigen::VectorXd::Index>(n));
        (void) mu;  // dummy to suppress unused var warning

        stan::math::initialize(mu, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu,DUMMY_VAR__);
        validate_non_negative_index("psi1", "n_block", n_block);
        vector_d psi1(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi1;  // dummy to suppress unused var warning

        stan::math::initialize(psi1, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi1,DUMMY_VAR__);
        validate_non_negative_index("psi2", "n_block", n_block);
        vector_d psi2(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi2;  // dummy to suppress unused var warning

        stan::math::initialize(psi2, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi2,DUMMY_VAR__);
        validate_non_negative_index("psi3", "n_block", n_block);
        vector_d psi3(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi3;  // dummy to suppress unused var warning

        stan::math::initialize(psi3, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi3,DUMMY_VAR__);
        validate_non_negative_index("psi1_pred", "n_block_pred", n_block_pred);
        vector_d psi1_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi1_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi1_pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi1_pred,DUMMY_VAR__);
        validate_non_negative_index("psi2_pred", "n_block_pred", n_block_pred);
        vector_d psi2_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi2_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi2_pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi2_pred,DUMMY_VAR__);
        validate_non_negative_index("psi3_pred", "n_block_pred", n_block_pred);
        vector_d psi3_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi3_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi3_pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi3_pred,DUMMY_VAR__);


        try {
            for (int i = 1; i <= n; ++i) {

                if (as_bool(logical_eq(model_id,1))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) / (get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1) + pow(get_base1(h3,get_base1(block_data,i,"block_data",1),"h3",1),get_base1(age,i,"age",1)))));
                }
                if (as_bool(logical_eq(model_id,2))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) / (1 + exp((-(get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1)) * (get_base1(age,i,"age",1) - get_base1(h3,get_base1(block_data,i,"block_data",1),"h3",1)))))));
                }
                if (as_bool(logical_eq(model_id,3))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) / (1 + exp((-(get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1)) * (log(get_base1(age,i,"age",1)) - get_base1(h3,get_base1(block_data,i,"block_data",1),"h3",1)))))));
                }
                if (as_bool(logical_eq(model_id,4))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) + (get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1) * log(get_base1(age,i,"age",1)))));
                }
                if (as_bool(logical_eq(model_id,5))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) * log((1 + (get_base1(age,i,"age",1) / get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1))))));
                }
                if (as_bool(logical_eq(model_id,6))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) / (1 + exp(((-(get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1)) * get_base1(age,i,"age",1)) + get_base1(h3,get_base1(block_data,i,"block_data",1),"h3",1))))));
                }
                if (as_bool(logical_eq(model_id,7))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) * (get_base1(age,i,"age",1) / (get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1) + get_base1(age,i,"age",1)))));
                }
                if (as_bool(logical_eq(model_id,8))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) * (1 - exp((-(get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1)) * get_base1(age,i,"age",1))))));
                }
                if (as_bool(logical_eq(model_id,9))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) * pow(get_base1(age,i,"age",1),get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1))));
                }
                if (as_bool(logical_eq(model_id,10))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) * pow(get_base1(age,i,"age",1),(get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1) - (get_base1(h3,get_base1(block_data,i,"block_data",1),"h3",1) / get_base1(age,i,"age",1))))));
                }
                if (as_bool(logical_eq(model_id,11))) {

                    stan::math::assign(get_base1_lhs(mu,i,"mu",1), (get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1) * (1 - exp((-(get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1)) * pow(get_base1(age,i,"age",1),get_base1(h3,get_base1(block_data,i,"block_data",1),"h3",1)))))));
                }
            }
            stan::math::assign(psi1, multiply(x1,b1));
            stan::math::assign(psi2, multiply(x2,b2));
            stan::math::assign(psi3, multiply(x3,b3));
            stan::math::assign(psi1_pred, multiply(x1_pred,b1));
            stan::math::assign(psi2_pred, multiply(x2_pred,b2));
            stan::math::assign(psi3_pred, multiply(x3_pred,b3));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters
        for (int k_0__ = 0; k_0__ < n; ++k_0__) {
            vars__.push_back(mu[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi1[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi2[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi3[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(psi1_pred[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(psi2_pred[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(psi3_pred[k_0__]);
        }

        if (!include_gqs__) return;
        // declare and define generated quantities
        validate_non_negative_index("mu_plot_growth", "n_plot", n_plot);
        validate_non_negative_index("mu_plot_growth", "n_block", n_block);
        matrix_d mu_plot_growth(static_cast<Eigen::VectorXd::Index>(n_plot),static_cast<Eigen::VectorXd::Index>(n_block));
        (void) mu_plot_growth;  // dummy to suppress unused var warning

        stan::math::initialize(mu_plot_growth, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu_plot_growth,DUMMY_VAR__);
        validate_non_negative_index("mu_plot_agr", "n_plot", n_plot);
        validate_non_negative_index("mu_plot_agr", "n_block", n_block);
        matrix_d mu_plot_agr(static_cast<Eigen::VectorXd::Index>(n_plot),static_cast<Eigen::VectorXd::Index>(n_block));
        (void) mu_plot_agr;  // dummy to suppress unused var warning

        stan::math::initialize(mu_plot_agr, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu_plot_agr,DUMMY_VAR__);
        validate_non_negative_index("mu_pred", "n_pred", n_pred);
        vector_d mu_pred(static_cast<Eigen::VectorXd::Index>(n_pred));
        (void) mu_pred;  // dummy to suppress unused var warning

        stan::math::initialize(mu_pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu_pred,DUMMY_VAR__);
        validate_non_negative_index("size_plot", "n_plot", n_plot);
        validate_non_negative_index("size_plot", "n_block", n_block);
        matrix_d size_plot(static_cast<Eigen::VectorXd::Index>(n_plot),static_cast<Eigen::VectorXd::Index>(n_block));
        (void) size_plot;  // dummy to suppress unused var warning

        stan::math::initialize(size_plot, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(size_plot,DUMMY_VAR__);
        validate_non_negative_index("size_plot_agr", "n_plot", n_plot);
        validate_non_negative_index("size_plot_agr", "n_block", n_block);
        matrix_d size_plot_agr(static_cast<Eigen::VectorXd::Index>(n_plot),static_cast<Eigen::VectorXd::Index>(n_block));
        (void) size_plot_agr;  // dummy to suppress unused var warning

        stan::math::initialize(size_plot_agr, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(size_plot_agr,DUMMY_VAR__);
        validate_non_negative_index("size_pred", "n_pred", n_pred);
        vector_d size_pred(static_cast<Eigen::VectorXd::Index>(n_pred));
        (void) size_pred;  // dummy to suppress unused var warning

        stan::math::initialize(size_pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(size_pred,DUMMY_VAR__);
        validate_non_negative_index("log_lik", "n", n);
        vector_d log_lik(static_cast<Eigen::VectorXd::Index>(n));
        (void) log_lik;  // dummy to suppress unused var warning

        stan::math::initialize(log_lik, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(log_lik,DUMMY_VAR__);


        try {
            for (int i = 1; i <= n_plot; ++i) {

                for (int j = 1; j <= n_block; ++j) {

                    if (as_bool(logical_eq(model_id,1))) {

                        stan::math::assign(get_base1_lhs(mu_plot_growth,i,j,"mu_plot_growth",1), (get_base1(h1,j,"h1",1) / (get_base1(h2,j,"h2",1) + pow(get_base1(h3,j,"h3",1),get_base1(age_plot,i,"age_plot",1)))));
                    }
                    if (as_bool(logical_eq(model_id,2))) {

                        stan::math::assign(get_base1_lhs(mu_plot_growth,i,j,"mu_plot_growth",1), (get_base1(h1,j,"h1",1) / (1 + exp((-(get_base1(h2,j,"h2",1)) * (get_base1(age_plot,i,"age_plot",1) - get_base1(h3,j,"h3",1)))))));
                    }
                    if (as_bool(logical_eq(model_id,3))) {

                        stan::math::assign(get_base1_lhs(mu_plot_growth,i,j,"mu_plot_growth",1), (get_base1(h1,j,"h1",1) / (1 + exp((-(get_base1(h2,j,"h2",1)) * (log(get_base1(age_plot,i,"age_plot",1)) - get_base1(h3,j,"h3",1)))))));
                    }
                    if (as_bool(logical_eq(model_id,4))) {

                        stan::math::assign(get_base1_lhs(mu_plot_growth,i,j,"mu_plot_growth",1), (get_base1(h1,j,"h1",1) + (get_base1(h2,j,"h2",1) * log(get_base1(age_plot,i,"age_plot",1)))));
                    }
                    if (as_bool(logical_eq(model_id,5))) {

                        stan::math::assign(get_base1_lhs(mu_plot_growth,i,j,"mu_plot_growth",1), (get_base1(h1,j,"h1",1) * log((1 + (get_base1(age_plot,i,"age_plot",1) / get_base1(h2,j,"h2",1))))));
                    }
                    if (as_bool(logical_eq(model_id,6))) {

                        stan::math::assign(get_base1_lhs(mu_plot_growth,i,j,"mu_plot_growth",1), (get_base1(h1,j,"h1",1) / (1 + exp(((-(get_base1(h2,j,"h2",1)) * get_base1(age_plot,i,"age_plot",1)) + get_base1(h3,j,"h3",1))))));
                    }
                    if (as_bool(logical_eq(model_id,7))) {

                        stan::math::assign(get_base1_lhs(mu_plot_growth,i,j,"mu_plot_growth",1), (get_base1(h1,j,"h1",1) * (get_base1(age_plot,i,"age_plot",1) / (get_base1(h2,j,"h2",1) + get_base1(age_plot,i,"age_plot",1)))));
                    }
                    if (as_bool(logical_eq(model_id,8))) {

                        stan::math::assign(get_base1_lhs(mu_plot_growth,i,j,"mu_plot_growth",1), (get_base1(h1,j,"h1",1) * (1 - exp((-(get_base1(h2,j,"h2",1)) * get_base1(age_plot,i,"age_plot",1))))));
                    }
                    if (as_bool(logical_eq(model_id,9))) {

                        stan::math::assign(get_base1_lhs(mu_plot_growth,i,j,"mu_plot_growth",1), (get_base1(h1,j,"h1",1) * pow(get_base1(age_plot,i,"age_plot",1),get_base1(h2,j,"h2",1))));
                    }
                    if (as_bool(logical_eq(model_id,10))) {

                        stan::math::assign(get_base1_lhs(mu_plot_growth,i,j,"mu_plot_growth",1), (get_base1(h1,j,"h1",1) * pow(get_base1(age_plot,i,"age_plot",1),(get_base1(h2,j,"h2",1) - (get_base1(h3,j,"h3",1) / get_base1(age_plot,i,"age_plot",1))))));
                    }
                    if (as_bool(logical_eq(model_id,11))) {

                        stan::math::assign(get_base1_lhs(mu_plot_growth,i,j,"mu_plot_growth",1), (get_base1(h1,j,"h1",1) * (1 - exp((-(get_base1(h2,j,"h2",1)) * pow(get_base1(age_plot,i,"age_plot",1),get_base1(h3,j,"h3",1)))))));
                    }
                }
            }
            for (int i = 1; i <= n_plot; ++i) {
                for (int j = 1; j <= n_block; ++j) {
                    stan::math::assign(get_base1_lhs(size_plot,i,j,"size_plot",1), exp(get_base1(mu_plot_growth,i,j,"mu_plot_growth",1)));
                }
            }
            for (int i = 1; i <= n_plot; ++i) {

                for (int j = 1; j <= n_block; ++j) {

                    if (as_bool(logical_eq(model_id,1))) {

                        stan::math::assign(get_base1_lhs(mu_plot_agr,i,j,"mu_plot_agr",1), (((-(get_base1(h1,j,"h1",1)) * pow(get_base1(h3,j,"h3",1),get_base1(age_plot,i,"age_plot",1))) * log(get_base1(h3,j,"h3",1))) / pow((get_base1(h2,j,"h2",1) + pow(get_base1(h3,j,"h3",1),get_base1(age_plot,i,"age_plot",1))),2)));
                    }
                    if (as_bool(logical_eq(model_id,2))) {

                        stan::math::assign(get_base1_lhs(mu_plot_agr,i,j,"mu_plot_agr",1), (get_base1(mu_plot_growth,i,j,"mu_plot_growth",1) * ((get_base1(h2,j,"h2",1) * exp((-(get_base1(h2,j,"h2",1)) * (get_base1(age_plot,i,"age_plot",1) - get_base1(h3,j,"h3",1))))) / (1 + exp((-(get_base1(h2,j,"h2",1)) * (get_base1(age_plot,i,"age_plot",1) - get_base1(h3,j,"h3",1))))))));
                    }
                    if (as_bool(logical_eq(model_id,3))) {

                        stan::math::assign(get_base1_lhs(mu_plot_agr,i,j,"mu_plot_agr",1), (get_base1(mu_plot_growth,i,j,"mu_plot_growth",1) * ((get_base1(h2,j,"h2",1) * exp((-(get_base1(h2,j,"h2",1)) * (log(get_base1(age_plot,i,"age_plot",1)) - get_base1(h3,j,"h3",1))))) / (1 + exp((-(get_base1(h2,j,"h2",1)) * (log(get_base1(age_plot,i,"age_plot",1)) - get_base1(h3,j,"h3",1))))))));
                    }
                    if (as_bool(logical_eq(model_id,4))) {

                        stan::math::assign(get_base1_lhs(mu_plot_agr,i,j,"mu_plot_agr",1), (get_base1(h2,j,"h2",1) / get_base1(age_plot,i,"age_plot",1)));
                    }
                    if (as_bool(logical_eq(model_id,5))) {

                        stan::math::assign(get_base1_lhs(mu_plot_agr,i,j,"mu_plot_agr",1), (get_base1(h1,j,"h1",1) / (get_base1(h2,j,"h2",1) + get_base1(age_plot,i,"age_plot",1))));
                    }
                    if (as_bool(logical_eq(model_id,6))) {

                        stan::math::assign(get_base1_lhs(mu_plot_agr,i,j,"mu_plot_agr",1), ((get_base1(h2,j,"h2",1) * get_base1(h1,j,"h1",1)) / ((2 * cosh((get_base1(h3,j,"h3",1) - (get_base1(h2,j,"h2",1) * get_base1(age_plot,i,"age_plot",1))))) + 2)));
                    }
                    if (as_bool(logical_eq(model_id,7))) {

                        stan::math::assign(get_base1_lhs(mu_plot_agr,i,j,"mu_plot_agr",1), (get_base1(h1,j,"h1",1) * (get_base1(h2,j,"h2",1) / pow((get_base1(h2,j,"h2",1) + get_base1(age_plot,i,"age_plot",1)),2))));
                    }
                    if (as_bool(logical_eq(model_id,8))) {

                        stan::math::assign(get_base1_lhs(mu_plot_agr,i,j,"mu_plot_agr",1), ((get_base1(h1,j,"h1",1) * get_base1(h2,j,"h2",1)) * exp((-(get_base1(h2,j,"h2",1)) * get_base1(age_plot,i,"age_plot",1)))));
                    }
                    if (as_bool(logical_eq(model_id,9))) {

                        stan::math::assign(get_base1_lhs(mu_plot_agr,i,j,"mu_plot_agr",1), ((get_base1(h1,j,"h1",1) * get_base1(h2,j,"h2",1)) * pow(get_base1(age_plot,i,"age_plot",1),(get_base1(h2,j,"h2",1) - 1))));
                    }
                    if (as_bool(logical_eq(model_id,10))) {

                        stan::math::assign(get_base1_lhs(mu_plot_agr,i,j,"mu_plot_agr",1), (get_base1(mu_plot_growth,i,j,"mu_plot_growth",1) * (((get_base1(h2,j,"h2",1) - (get_base1(h3,j,"h3",1) / get_base1(age_plot,i,"age_plot",1))) / get_base1(age_plot,i,"age_plot",1)) + ((get_base1(h3,j,"h3",1) * log(get_base1(age_plot,i,"age_plot",1))) / pow(get_base1(age_plot,i,"age_plot",1),2)))));
                    }
                    if (as_bool(logical_eq(model_id,11))) {

                        stan::math::assign(get_base1_lhs(mu_plot_agr,i,j,"mu_plot_agr",1), ((((get_base1(h1,j,"h1",1) * get_base1(h2,j,"h2",1)) * get_base1(h3,j,"h3",1)) * pow(get_base1(age_plot,i,"age_plot",1),(get_base1(h3,j,"h3",1) - 1))) * exp((-(get_base1(h2,j,"h2",1)) * pow(get_base1(age_plot,i,"age_plot",1),get_base1(h3,j,"h3",1))))));
                    }
                }
            }
            for (int i = 1; i <= n_plot; ++i) {
                for (int j = 1; j <= n_block; ++j) {
                    stan::math::assign(get_base1_lhs(size_plot_agr,i,j,"size_plot_agr",1), exp(get_base1(mu_plot_agr,i,j,"mu_plot_agr",1)));
                }
            }
            for (int i = 1; i <= n_pred; ++i) {

                if (as_bool(logical_eq(model_id,1))) {

                    stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), (get_base1(h1_holdout,get_base1(block_holdout,i,"block_holdout",1),"h1_holdout",1) / (get_base1(h2_holdout,get_base1(block_holdout,i,"block_holdout",1),"h2_holdout",1) + pow(get_base1(h3_holdout,get_base1(block_holdout,i,"block_holdout",1),"h3_holdout",1),get_base1(age_holdout,i,1,"age_holdout",1)))));
                }
                if (as_bool(logical_eq(model_id,2))) {

                    stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), (get_base1(h1_holdout,get_base1(block_holdout,i,"block_holdout",1),"h1_holdout",1) / (1 + exp((-(get_base1(h2_holdout,get_base1(block_holdout,i,"block_holdout",1),"h2_holdout",1)) * (get_base1(age_holdout,i,1,"age_holdout",1) - get_base1(h3_holdout,get_base1(block_holdout,i,"block_holdout",1),"h3_holdout",1)))))));
                }
                if (as_bool(logical_eq(model_id,3))) {

                    stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), (get_base1(h1_holdout,get_base1(block_holdout,i,"block_holdout",1),"h1_holdout",1) / (1 + exp((-(get_base1(h2_holdout,get_base1(block_holdout,i,"block_holdout",1),"h2_holdout",1)) * (log(get_base1(age_holdout,i,1,"age_holdout",1)) - get_base1(h3_holdout,get_base1(block_holdout,i,"block_holdout",1),"h3_holdout",1)))))));
                }
                if (as_bool(logical_eq(model_id,4))) {

                    stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), (get_base1(h1_holdout,get_base1(block_holdout,i,"block_holdout",1),"h1_holdout",1) + (get_base1(h2_holdout,get_base1(block_holdout,i,"block_holdout",1),"h2_holdout",1) * log(get_base1(age_holdout,i,1,"age_holdout",1)))));
                }
                if (as_bool(logical_eq(model_id,5))) {

                    stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), (get_base1(h1_holdout,get_base1(block_holdout,i,"block_holdout",1),"h1_holdout",1) * log((1 + (get_base1(age_holdout,i,1,"age_holdout",1) / get_base1(h2_holdout,get_base1(block_holdout,i,"block_holdout",1),"h2_holdout",1))))));
                }
                if (as_bool(logical_eq(model_id,6))) {

                    stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), (get_base1(h1_holdout,get_base1(block_holdout,i,"block_holdout",1),"h1_holdout",1) / (1 + exp(((-(get_base1(h2_holdout,get_base1(block_holdout,i,"block_holdout",1),"h2_holdout",1)) * get_base1(age_holdout,i,1,"age_holdout",1)) + get_base1(h3_holdout,get_base1(block_holdout,i,"block_holdout",1),"h3_holdout",1))))));
                }
                if (as_bool(logical_eq(model_id,7))) {

                    stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), (get_base1(h1_holdout,get_base1(block_holdout,i,"block_holdout",1),"h1_holdout",1) * (get_base1(age_holdout,i,1,"age_holdout",1) / (get_base1(h2_holdout,get_base1(block_holdout,i,"block_holdout",1),"h2_holdout",1) + get_base1(age_holdout,i,1,"age_holdout",1)))));
                }
                if (as_bool(logical_eq(model_id,8))) {

                    stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), (get_base1(h1_holdout,get_base1(block_holdout,i,"block_holdout",1),"h1_holdout",1) * (1 - exp((-(get_base1(h2_holdout,get_base1(block_holdout,i,"block_holdout",1),"h2_holdout",1)) * get_base1(age_holdout,i,1,"age_holdout",1))))));
                }
                if (as_bool(logical_eq(model_id,9))) {

                    stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), (get_base1(h1_holdout,get_base1(block_holdout,i,"block_holdout",1),"h1_holdout",1) * pow(get_base1(age_holdout,i,1,"age_holdout",1),get_base1(h2_holdout,get_base1(block_holdout,i,"block_holdout",1),"h2_holdout",1))));
                }
                if (as_bool(logical_eq(model_id,10))) {

                    stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), (get_base1(h1_holdout,get_base1(block_holdout,i,"block_holdout",1),"h1_holdout",1) * pow(get_base1(age_holdout,i,1,"age_holdout",1),(get_base1(h2_holdout,get_base1(block_holdout,i,"block_holdout",1),"h2_holdout",1) - (get_base1(h3_holdout,get_base1(block_holdout,i,"block_holdout",1),"h3_holdout",1) / get_base1(age_holdout,i,1,"age_holdout",1))))));
                }
                if (as_bool(logical_eq(model_id,11))) {

                    stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), (get_base1(h1_holdout,get_base1(block_holdout,i,"block_holdout",1),"h1_holdout",1) * (1 - exp((-(get_base1(h2_holdout,get_base1(block_holdout,i,"block_holdout",1),"h2_holdout",1)) * pow(get_base1(age_holdout,i,1,"age_holdout",1),get_base1(h3_holdout,get_base1(block_holdout,i,"block_holdout",1),"h3_holdout",1)))))));
                }
            }
            for (int i = 1; i <= n_pred; ++i) {
                stan::math::assign(get_base1_lhs(size_pred,i,"size_pred",1), exp(get_base1(mu_pred,i,"mu_pred",1)));
            }
            for (int i = 1; i <= n; ++i) {
                stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), normal_log(log(get_base1(size_data,i,"size_data",1)),get_base1(mu,i,"mu",1),sigma_obs));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities
        check_greater_or_equal(function__,"size_plot",size_plot,0);
        check_greater_or_equal(function__,"size_plot_agr",size_plot_agr,0);
        check_greater_or_equal(function__,"size_pred",size_pred,0);

        // write generated quantities
        for (int k_1__ = 0; k_1__ < n_block; ++k_1__) {
            for (int k_0__ = 0; k_0__ < n_plot; ++k_0__) {
                vars__.push_back(mu_plot_growth(k_0__, k_1__));
            }
        }
        for (int k_1__ = 0; k_1__ < n_block; ++k_1__) {
            for (int k_0__ = 0; k_0__ < n_plot; ++k_0__) {
                vars__.push_back(mu_plot_agr(k_0__, k_1__));
            }
        }
        for (int k_0__ = 0; k_0__ < n_pred; ++k_0__) {
            vars__.push_back(mu_pred[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < n_block; ++k_1__) {
            for (int k_0__ = 0; k_0__ < n_plot; ++k_0__) {
                vars__.push_back(size_plot(k_0__, k_1__));
            }
        }
        for (int k_1__ = 0; k_1__ < n_block; ++k_1__) {
            for (int k_0__ = 0; k_0__ < n_plot; ++k_0__) {
                vars__.push_back(size_plot_agr(k_0__, k_1__));
            }
        }
        for (int k_0__ = 0; k_0__ < n_pred; ++k_0__) {
            vars__.push_back(size_pred[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_all_mod_pred_blockmod";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_obs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h3";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h1_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h2_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h3_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x3; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi1_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi2_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi3_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= n_block; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_plot_growth" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= n_block; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_plot_agr" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= n_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= n_block; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "size_plot" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= n_block; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "size_plot_agr" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= n_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_obs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h3";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h1_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h2_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h3_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x3; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi1_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi2_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi3_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= n_block; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_plot_growth" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= n_block; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_plot_agr" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= n_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= n_block; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "size_plot" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= n_block; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "size_plot_agr" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= n_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}




// Code generated by Stan version 2.16.0

#include <stan/model/model_header.hpp>

namespace model_spline_nopred_blockmod_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_spline_nopred_blockmod");
    reader.add_event(316, 316, "end", "model_spline_nopred_blockmod");
    return reader;
}

class model_spline_nopred_blockmod : public prob_grad {
private:
    int n;
    int n_block;
    int n_pred;
    int n_block_pred;
    vector_d size_data;
    int n_age;
    int n_age_pred;
    int n_k;
    vector<int> age_index;
    vector<int> age_index_pred;
    vector<int> block_data;
    vector<int> block_holdout;
    vector<row_vector_d> b_spline;
    vector<row_vector_d> b_spline_pred;
    int n_plot;
    vector_d age_plot;
    vector<vector<row_vector_d> > b_spline_plot;
    vector<vector<row_vector_d> > b_spline_deriv;
public:
    model_spline_nopred_blockmod(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_spline_nopred_blockmod(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_spline_nopred_blockmod_namespace::model_spline_nopred_blockmod";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "n", "int", context__.to_vec());
        n = int(0);
        vals_i__ = context__.vals_i("n");
        pos__ = 0;
        n = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_block", "int", context__.to_vec());
        n_block = int(0);
        vals_i__ = context__.vals_i("n_block");
        pos__ = 0;
        n_block = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_pred", "int", context__.to_vec());
        n_pred = int(0);
        vals_i__ = context__.vals_i("n_pred");
        pos__ = 0;
        n_pred = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_block_pred", "int", context__.to_vec());
        n_block_pred = int(0);
        vals_i__ = context__.vals_i("n_block_pred");
        pos__ = 0;
        n_block_pred = vals_i__[pos__++];
        validate_non_negative_index("size_data", "n", n);
        context__.validate_dims("data initialization", "size_data", "vector_d", context__.to_vec(n));
        validate_non_negative_index("size_data", "n", n);
        size_data = vector_d(static_cast<Eigen::VectorXd::Index>(n));
        vals_r__ = context__.vals_r("size_data");
        pos__ = 0;
        size_t size_data_i_vec_lim__ = n;
        for (size_t i_vec__ = 0; i_vec__ < size_data_i_vec_lim__; ++i_vec__) {
            size_data[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "n_age", "int", context__.to_vec());
        n_age = int(0);
        vals_i__ = context__.vals_i("n_age");
        pos__ = 0;
        n_age = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_age_pred", "int", context__.to_vec());
        n_age_pred = int(0);
        vals_i__ = context__.vals_i("n_age_pred");
        pos__ = 0;
        n_age_pred = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_k", "int", context__.to_vec());
        n_k = int(0);
        vals_i__ = context__.vals_i("n_k");
        pos__ = 0;
        n_k = vals_i__[pos__++];
        validate_non_negative_index("age_index", "n", n);
        context__.validate_dims("data initialization", "age_index", "int", context__.to_vec(n));
        validate_non_negative_index("age_index", "n", n);
        age_index = std::vector<int>(n,int(0));
        vals_i__ = context__.vals_i("age_index");
        pos__ = 0;
        size_t age_index_limit_0__ = n;
        for (size_t i_0__ = 0; i_0__ < age_index_limit_0__; ++i_0__) {
            age_index[i_0__] = vals_i__[pos__++];
        }
        validate_non_negative_index("age_index_pred", "n_pred", n_pred);
        context__.validate_dims("data initialization", "age_index_pred", "int", context__.to_vec(n_pred));
        validate_non_negative_index("age_index_pred", "n_pred", n_pred);
        age_index_pred = std::vector<int>(n_pred,int(0));
        vals_i__ = context__.vals_i("age_index_pred");
        pos__ = 0;
        size_t age_index_pred_limit_0__ = n_pred;
        for (size_t i_0__ = 0; i_0__ < age_index_pred_limit_0__; ++i_0__) {
            age_index_pred[i_0__] = vals_i__[pos__++];
        }
        validate_non_negative_index("block_data", "n", n);
        context__.validate_dims("data initialization", "block_data", "int", context__.to_vec(n));
        validate_non_negative_index("block_data", "n", n);
        block_data = std::vector<int>(n,int(0));
        vals_i__ = context__.vals_i("block_data");
        pos__ = 0;
        size_t block_data_limit_0__ = n;
        for (size_t i_0__ = 0; i_0__ < block_data_limit_0__; ++i_0__) {
            block_data[i_0__] = vals_i__[pos__++];
        }
        validate_non_negative_index("block_holdout", "n_pred", n_pred);
        context__.validate_dims("data initialization", "block_holdout", "int", context__.to_vec(n_pred));
        validate_non_negative_index("block_holdout", "n_pred", n_pred);
        block_holdout = std::vector<int>(n_pred,int(0));
        vals_i__ = context__.vals_i("block_holdout");
        pos__ = 0;
        size_t block_holdout_limit_0__ = n_pred;
        for (size_t i_0__ = 0; i_0__ < block_holdout_limit_0__; ++i_0__) {
            block_holdout[i_0__] = vals_i__[pos__++];
        }
        validate_non_negative_index("b_spline", "n_age", n_age);
        validate_non_negative_index("b_spline", "n_k", n_k);
        context__.validate_dims("data initialization", "b_spline", "row_vector_d", context__.to_vec(n_age,n_k));
        validate_non_negative_index("b_spline", "n_age", n_age);
        validate_non_negative_index("b_spline", "n_k", n_k);
        b_spline = std::vector<row_vector_d>(n_age,row_vector_d(static_cast<Eigen::VectorXd::Index>(n_k)));
        vals_r__ = context__.vals_r("b_spline");
        pos__ = 0;
        size_t b_spline_i_vec_lim__ = n_k;
        for (size_t i_vec__ = 0; i_vec__ < b_spline_i_vec_lim__; ++i_vec__) {
            size_t b_spline_limit_0__ = n_age;
            for (size_t i_0__ = 0; i_0__ < b_spline_limit_0__; ++i_0__) {
                b_spline[i_0__][i_vec__] = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("b_spline_pred", "n_age_pred", n_age_pred);
        validate_non_negative_index("b_spline_pred", "n_k", n_k);
        context__.validate_dims("data initialization", "b_spline_pred", "row_vector_d", context__.to_vec(n_age_pred,n_k));
        validate_non_negative_index("b_spline_pred", "n_age_pred", n_age_pred);
        validate_non_negative_index("b_spline_pred", "n_k", n_k);
        b_spline_pred = std::vector<row_vector_d>(n_age_pred,row_vector_d(static_cast<Eigen::VectorXd::Index>(n_k)));
        vals_r__ = context__.vals_r("b_spline_pred");
        pos__ = 0;
        size_t b_spline_pred_i_vec_lim__ = n_k;
        for (size_t i_vec__ = 0; i_vec__ < b_spline_pred_i_vec_lim__; ++i_vec__) {
            size_t b_spline_pred_limit_0__ = n_age_pred;
            for (size_t i_0__ = 0; i_0__ < b_spline_pred_limit_0__; ++i_0__) {
                b_spline_pred[i_0__][i_vec__] = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "n_plot", "int", context__.to_vec());
        n_plot = int(0);
        vals_i__ = context__.vals_i("n_plot");
        pos__ = 0;
        n_plot = vals_i__[pos__++];
        validate_non_negative_index("age_plot", "n_plot", n_plot);
        context__.validate_dims("data initialization", "age_plot", "vector_d", context__.to_vec(n_plot));
        validate_non_negative_index("age_plot", "n_plot", n_plot);
        age_plot = vector_d(static_cast<Eigen::VectorXd::Index>(n_plot));
        vals_r__ = context__.vals_r("age_plot");
        pos__ = 0;
        size_t age_plot_i_vec_lim__ = n_plot;
        for (size_t i_vec__ = 0; i_vec__ < age_plot_i_vec_lim__; ++i_vec__) {
            age_plot[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("b_spline_plot", "n_plot", n_plot);
        validate_non_negative_index("b_spline_plot", "n_block", n_block);
        validate_non_negative_index("b_spline_plot", "n_k", n_k);
        context__.validate_dims("data initialization", "b_spline_plot", "row_vector_d", context__.to_vec(n_plot,n_block,n_k));
        validate_non_negative_index("b_spline_plot", "n_plot", n_plot);
        validate_non_negative_index("b_spline_plot", "n_block", n_block);
        validate_non_negative_index("b_spline_plot", "n_k", n_k);
        b_spline_plot = std::vector<std::vector<row_vector_d> >(n_plot,std::vector<row_vector_d>(n_block,row_vector_d(static_cast<Eigen::VectorXd::Index>(n_k))));
        vals_r__ = context__.vals_r("b_spline_plot");
        pos__ = 0;
        size_t b_spline_plot_i_vec_lim__ = n_k;
        for (size_t i_vec__ = 0; i_vec__ < b_spline_plot_i_vec_lim__; ++i_vec__) {
            size_t b_spline_plot_limit_1__ = n_block;
            for (size_t i_1__ = 0; i_1__ < b_spline_plot_limit_1__; ++i_1__) {
                size_t b_spline_plot_limit_0__ = n_plot;
                for (size_t i_0__ = 0; i_0__ < b_spline_plot_limit_0__; ++i_0__) {
                    b_spline_plot[i_0__][i_1__][i_vec__] = vals_r__[pos__++];
                }
            }
        }
        validate_non_negative_index("b_spline_deriv", "n_plot", n_plot);
        validate_non_negative_index("b_spline_deriv", "n_block", n_block);
        validate_non_negative_index("b_spline_deriv", "n_k", n_k);
        context__.validate_dims("data initialization", "b_spline_deriv", "row_vector_d", context__.to_vec(n_plot,n_block,n_k));
        validate_non_negative_index("b_spline_deriv", "n_plot", n_plot);
        validate_non_negative_index("b_spline_deriv", "n_block", n_block);
        validate_non_negative_index("b_spline_deriv", "n_k", n_k);
        b_spline_deriv = std::vector<std::vector<row_vector_d> >(n_plot,std::vector<row_vector_d>(n_block,row_vector_d(static_cast<Eigen::VectorXd::Index>(n_k))));
        vals_r__ = context__.vals_r("b_spline_deriv");
        pos__ = 0;
        size_t b_spline_deriv_i_vec_lim__ = n_k;
        for (size_t i_vec__ = 0; i_vec__ < b_spline_deriv_i_vec_lim__; ++i_vec__) {
            size_t b_spline_deriv_limit_1__ = n_block;
            for (size_t i_1__ = 0; i_1__ < b_spline_deriv_limit_1__; ++i_1__) {
                size_t b_spline_deriv_limit_0__ = n_plot;
                for (size_t i_0__ = 0; i_0__ < b_spline_deriv_limit_0__; ++i_0__) {
                    b_spline_deriv[i_0__][i_1__][i_vec__] = vals_r__[pos__++];
                }
            }
        }

        // validate, data variables
        check_greater_or_equal(function__,"n",n,0);
        check_greater_or_equal(function__,"n_block",n_block,0);
        check_greater_or_equal(function__,"n_pred",n_pred,0);
        check_greater_or_equal(function__,"n_block_pred",n_block_pred,0);
        check_greater_or_equal(function__,"size_data",size_data,0);
        check_greater_or_equal(function__,"n_age",n_age,0);
        check_greater_or_equal(function__,"n_age_pred",n_age_pred,0);
        check_greater_or_equal(function__,"n_k",n_k,0);
        for (int k0__ = 0; k0__ < n; ++k0__) {
            check_greater_or_equal(function__,"age_index[k0__]",age_index[k0__],0);
        }
        for (int k0__ = 0; k0__ < n_pred; ++k0__) {
            check_greater_or_equal(function__,"age_index_pred[k0__]",age_index_pred[k0__],0);
        }
        for (int k0__ = 0; k0__ < n; ++k0__) {
            check_greater_or_equal(function__,"block_data[k0__]",block_data[k0__],0);
            check_less_or_equal(function__,"block_data[k0__]",block_data[k0__],n_block);
        }
        for (int k0__ = 0; k0__ < n_pred; ++k0__) {
            check_greater_or_equal(function__,"block_holdout[k0__]",block_holdout[k0__],0);
            check_less_or_equal(function__,"block_holdout[k0__]",block_holdout[k0__],n_block_pred);
        }
        check_greater_or_equal(function__,"n_plot",n_plot,0);
        // initialize data variables

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // validate, set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        validate_non_negative_index("psi1", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("psi2", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("psi3", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("psi4", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("psi5", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("psi6", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("psi7", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("psi8", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("psi9", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("psi10", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("psi11", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("psi12", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("psi13", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("psi14", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("psi15", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("psi16", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("psi17", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("psi18", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h1", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h2", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h3", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h4", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h5", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h6", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h7", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h8", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h9", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h10", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h11", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h12", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h13", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h14", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h15", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h16", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h17", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h18", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h1_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h2_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h3_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h4_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h5_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h6_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h7_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h8_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h9_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h10_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h11_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h12_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h13_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h14_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h15_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h16_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h17_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h18_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
    }

    ~model_spline_nopred_blockmod() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("sigma_obs")))
            throw std::runtime_error("variable sigma_obs missing");
        vals_r__ = context__.vals_r("sigma_obs");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma_obs", "double", context__.to_vec());
        // generate_declaration sigma_obs
        double sigma_obs(0);
        sigma_obs = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma_obs);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_obs: ") + e.what());
        }

        if (!(context__.contains_r("block_sd1")))
            throw std::runtime_error("variable block_sd1 missing");
        vals_r__ = context__.vals_r("block_sd1");
        pos__ = 0U;
        context__.validate_dims("initialization", "block_sd1", "double", context__.to_vec());
        // generate_declaration block_sd1
        double block_sd1(0);
        block_sd1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,block_sd1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable block_sd1: ") + e.what());
        }

        if (!(context__.contains_r("block_sd2")))
            throw std::runtime_error("variable block_sd2 missing");
        vals_r__ = context__.vals_r("block_sd2");
        pos__ = 0U;
        context__.validate_dims("initialization", "block_sd2", "double", context__.to_vec());
        // generate_declaration block_sd2
        double block_sd2(0);
        block_sd2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,block_sd2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable block_sd2: ") + e.what());
        }

        if (!(context__.contains_r("block_sd3")))
            throw std::runtime_error("variable block_sd3 missing");
        vals_r__ = context__.vals_r("block_sd3");
        pos__ = 0U;
        context__.validate_dims("initialization", "block_sd3", "double", context__.to_vec());
        // generate_declaration block_sd3
        double block_sd3(0);
        block_sd3 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,block_sd3);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable block_sd3: ") + e.what());
        }

        if (!(context__.contains_r("block_sd4")))
            throw std::runtime_error("variable block_sd4 missing");
        vals_r__ = context__.vals_r("block_sd4");
        pos__ = 0U;
        context__.validate_dims("initialization", "block_sd4", "double", context__.to_vec());
        // generate_declaration block_sd4
        double block_sd4(0);
        block_sd4 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,block_sd4);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable block_sd4: ") + e.what());
        }

        if (!(context__.contains_r("block_sd5")))
            throw std::runtime_error("variable block_sd5 missing");
        vals_r__ = context__.vals_r("block_sd5");
        pos__ = 0U;
        context__.validate_dims("initialization", "block_sd5", "double", context__.to_vec());
        // generate_declaration block_sd5
        double block_sd5(0);
        block_sd5 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,block_sd5);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable block_sd5: ") + e.what());
        }

        if (!(context__.contains_r("block_sd6")))
            throw std::runtime_error("variable block_sd6 missing");
        vals_r__ = context__.vals_r("block_sd6");
        pos__ = 0U;
        context__.validate_dims("initialization", "block_sd6", "double", context__.to_vec());
        // generate_declaration block_sd6
        double block_sd6(0);
        block_sd6 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,block_sd6);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable block_sd6: ") + e.what());
        }

        if (!(context__.contains_r("block_sd7")))
            throw std::runtime_error("variable block_sd7 missing");
        vals_r__ = context__.vals_r("block_sd7");
        pos__ = 0U;
        context__.validate_dims("initialization", "block_sd7", "double", context__.to_vec());
        // generate_declaration block_sd7
        double block_sd7(0);
        block_sd7 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,block_sd7);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable block_sd7: ") + e.what());
        }

        if (!(context__.contains_r("block_sd8")))
            throw std::runtime_error("variable block_sd8 missing");
        vals_r__ = context__.vals_r("block_sd8");
        pos__ = 0U;
        context__.validate_dims("initialization", "block_sd8", "double", context__.to_vec());
        // generate_declaration block_sd8
        double block_sd8(0);
        block_sd8 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,block_sd8);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable block_sd8: ") + e.what());
        }

        if (!(context__.contains_r("block_sd9")))
            throw std::runtime_error("variable block_sd9 missing");
        vals_r__ = context__.vals_r("block_sd9");
        pos__ = 0U;
        context__.validate_dims("initialization", "block_sd9", "double", context__.to_vec());
        // generate_declaration block_sd9
        double block_sd9(0);
        block_sd9 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,block_sd9);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable block_sd9: ") + e.what());
        }

        if (!(context__.contains_r("block_sd10")))
            throw std::runtime_error("variable block_sd10 missing");
        vals_r__ = context__.vals_r("block_sd10");
        pos__ = 0U;
        context__.validate_dims("initialization", "block_sd10", "double", context__.to_vec());
        // generate_declaration block_sd10
        double block_sd10(0);
        block_sd10 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,block_sd10);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable block_sd10: ") + e.what());
        }

        if (!(context__.contains_r("block_sd11")))
            throw std::runtime_error("variable block_sd11 missing");
        vals_r__ = context__.vals_r("block_sd11");
        pos__ = 0U;
        context__.validate_dims("initialization", "block_sd11", "double", context__.to_vec());
        // generate_declaration block_sd11
        double block_sd11(0);
        block_sd11 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,block_sd11);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable block_sd11: ") + e.what());
        }

        if (!(context__.contains_r("block_sd12")))
            throw std::runtime_error("variable block_sd12 missing");
        vals_r__ = context__.vals_r("block_sd12");
        pos__ = 0U;
        context__.validate_dims("initialization", "block_sd12", "double", context__.to_vec());
        // generate_declaration block_sd12
        double block_sd12(0);
        block_sd12 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,block_sd12);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable block_sd12: ") + e.what());
        }

        if (!(context__.contains_r("block_sd13")))
            throw std::runtime_error("variable block_sd13 missing");
        vals_r__ = context__.vals_r("block_sd13");
        pos__ = 0U;
        context__.validate_dims("initialization", "block_sd13", "double", context__.to_vec());
        // generate_declaration block_sd13
        double block_sd13(0);
        block_sd13 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,block_sd13);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable block_sd13: ") + e.what());
        }

        if (!(context__.contains_r("block_sd14")))
            throw std::runtime_error("variable block_sd14 missing");
        vals_r__ = context__.vals_r("block_sd14");
        pos__ = 0U;
        context__.validate_dims("initialization", "block_sd14", "double", context__.to_vec());
        // generate_declaration block_sd14
        double block_sd14(0);
        block_sd14 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,block_sd14);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable block_sd14: ") + e.what());
        }

        if (!(context__.contains_r("block_sd15")))
            throw std::runtime_error("variable block_sd15 missing");
        vals_r__ = context__.vals_r("block_sd15");
        pos__ = 0U;
        context__.validate_dims("initialization", "block_sd15", "double", context__.to_vec());
        // generate_declaration block_sd15
        double block_sd15(0);
        block_sd15 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,block_sd15);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable block_sd15: ") + e.what());
        }

        if (!(context__.contains_r("block_sd16")))
            throw std::runtime_error("variable block_sd16 missing");
        vals_r__ = context__.vals_r("block_sd16");
        pos__ = 0U;
        context__.validate_dims("initialization", "block_sd16", "double", context__.to_vec());
        // generate_declaration block_sd16
        double block_sd16(0);
        block_sd16 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,block_sd16);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable block_sd16: ") + e.what());
        }

        if (!(context__.contains_r("block_sd17")))
            throw std::runtime_error("variable block_sd17 missing");
        vals_r__ = context__.vals_r("block_sd17");
        pos__ = 0U;
        context__.validate_dims("initialization", "block_sd17", "double", context__.to_vec());
        // generate_declaration block_sd17
        double block_sd17(0);
        block_sd17 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,block_sd17);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable block_sd17: ") + e.what());
        }

        if (!(context__.contains_r("block_sd18")))
            throw std::runtime_error("variable block_sd18 missing");
        vals_r__ = context__.vals_r("block_sd18");
        pos__ = 0U;
        context__.validate_dims("initialization", "block_sd18", "double", context__.to_vec());
        // generate_declaration block_sd18
        double block_sd18(0);
        block_sd18 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,block_sd18);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable block_sd18: ") + e.what());
        }

        if (!(context__.contains_r("psi_mean1")))
            throw std::runtime_error("variable psi_mean1 missing");
        vals_r__ = context__.vals_r("psi_mean1");
        pos__ = 0U;
        context__.validate_dims("initialization", "psi_mean1", "double", context__.to_vec());
        // generate_declaration psi_mean1
        double psi_mean1(0);
        psi_mean1 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi_mean1: ") + e.what());
        }

        if (!(context__.contains_r("psi_mean2")))
            throw std::runtime_error("variable psi_mean2 missing");
        vals_r__ = context__.vals_r("psi_mean2");
        pos__ = 0U;
        context__.validate_dims("initialization", "psi_mean2", "double", context__.to_vec());
        // generate_declaration psi_mean2
        double psi_mean2(0);
        psi_mean2 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi_mean2: ") + e.what());
        }

        if (!(context__.contains_r("psi_mean3")))
            throw std::runtime_error("variable psi_mean3 missing");
        vals_r__ = context__.vals_r("psi_mean3");
        pos__ = 0U;
        context__.validate_dims("initialization", "psi_mean3", "double", context__.to_vec());
        // generate_declaration psi_mean3
        double psi_mean3(0);
        psi_mean3 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean3);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi_mean3: ") + e.what());
        }

        if (!(context__.contains_r("psi_mean4")))
            throw std::runtime_error("variable psi_mean4 missing");
        vals_r__ = context__.vals_r("psi_mean4");
        pos__ = 0U;
        context__.validate_dims("initialization", "psi_mean4", "double", context__.to_vec());
        // generate_declaration psi_mean4
        double psi_mean4(0);
        psi_mean4 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean4);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi_mean4: ") + e.what());
        }

        if (!(context__.contains_r("psi_mean5")))
            throw std::runtime_error("variable psi_mean5 missing");
        vals_r__ = context__.vals_r("psi_mean5");
        pos__ = 0U;
        context__.validate_dims("initialization", "psi_mean5", "double", context__.to_vec());
        // generate_declaration psi_mean5
        double psi_mean5(0);
        psi_mean5 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean5);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi_mean5: ") + e.what());
        }

        if (!(context__.contains_r("psi_mean6")))
            throw std::runtime_error("variable psi_mean6 missing");
        vals_r__ = context__.vals_r("psi_mean6");
        pos__ = 0U;
        context__.validate_dims("initialization", "psi_mean6", "double", context__.to_vec());
        // generate_declaration psi_mean6
        double psi_mean6(0);
        psi_mean6 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean6);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi_mean6: ") + e.what());
        }

        if (!(context__.contains_r("psi_mean7")))
            throw std::runtime_error("variable psi_mean7 missing");
        vals_r__ = context__.vals_r("psi_mean7");
        pos__ = 0U;
        context__.validate_dims("initialization", "psi_mean7", "double", context__.to_vec());
        // generate_declaration psi_mean7
        double psi_mean7(0);
        psi_mean7 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean7);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi_mean7: ") + e.what());
        }

        if (!(context__.contains_r("psi_mean8")))
            throw std::runtime_error("variable psi_mean8 missing");
        vals_r__ = context__.vals_r("psi_mean8");
        pos__ = 0U;
        context__.validate_dims("initialization", "psi_mean8", "double", context__.to_vec());
        // generate_declaration psi_mean8
        double psi_mean8(0);
        psi_mean8 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean8);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi_mean8: ") + e.what());
        }

        if (!(context__.contains_r("psi_mean9")))
            throw std::runtime_error("variable psi_mean9 missing");
        vals_r__ = context__.vals_r("psi_mean9");
        pos__ = 0U;
        context__.validate_dims("initialization", "psi_mean9", "double", context__.to_vec());
        // generate_declaration psi_mean9
        double psi_mean9(0);
        psi_mean9 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean9);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi_mean9: ") + e.what());
        }

        if (!(context__.contains_r("psi_mean10")))
            throw std::runtime_error("variable psi_mean10 missing");
        vals_r__ = context__.vals_r("psi_mean10");
        pos__ = 0U;
        context__.validate_dims("initialization", "psi_mean10", "double", context__.to_vec());
        // generate_declaration psi_mean10
        double psi_mean10(0);
        psi_mean10 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean10);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi_mean10: ") + e.what());
        }

        if (!(context__.contains_r("psi_mean11")))
            throw std::runtime_error("variable psi_mean11 missing");
        vals_r__ = context__.vals_r("psi_mean11");
        pos__ = 0U;
        context__.validate_dims("initialization", "psi_mean11", "double", context__.to_vec());
        // generate_declaration psi_mean11
        double psi_mean11(0);
        psi_mean11 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean11);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi_mean11: ") + e.what());
        }

        if (!(context__.contains_r("psi_mean12")))
            throw std::runtime_error("variable psi_mean12 missing");
        vals_r__ = context__.vals_r("psi_mean12");
        pos__ = 0U;
        context__.validate_dims("initialization", "psi_mean12", "double", context__.to_vec());
        // generate_declaration psi_mean12
        double psi_mean12(0);
        psi_mean12 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean12);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi_mean12: ") + e.what());
        }

        if (!(context__.contains_r("psi_mean13")))
            throw std::runtime_error("variable psi_mean13 missing");
        vals_r__ = context__.vals_r("psi_mean13");
        pos__ = 0U;
        context__.validate_dims("initialization", "psi_mean13", "double", context__.to_vec());
        // generate_declaration psi_mean13
        double psi_mean13(0);
        psi_mean13 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean13);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi_mean13: ") + e.what());
        }

        if (!(context__.contains_r("psi_mean14")))
            throw std::runtime_error("variable psi_mean14 missing");
        vals_r__ = context__.vals_r("psi_mean14");
        pos__ = 0U;
        context__.validate_dims("initialization", "psi_mean14", "double", context__.to_vec());
        // generate_declaration psi_mean14
        double psi_mean14(0);
        psi_mean14 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean14);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi_mean14: ") + e.what());
        }

        if (!(context__.contains_r("psi_mean15")))
            throw std::runtime_error("variable psi_mean15 missing");
        vals_r__ = context__.vals_r("psi_mean15");
        pos__ = 0U;
        context__.validate_dims("initialization", "psi_mean15", "double", context__.to_vec());
        // generate_declaration psi_mean15
        double psi_mean15(0);
        psi_mean15 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean15);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi_mean15: ") + e.what());
        }

        if (!(context__.contains_r("psi_mean16")))
            throw std::runtime_error("variable psi_mean16 missing");
        vals_r__ = context__.vals_r("psi_mean16");
        pos__ = 0U;
        context__.validate_dims("initialization", "psi_mean16", "double", context__.to_vec());
        // generate_declaration psi_mean16
        double psi_mean16(0);
        psi_mean16 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean16);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi_mean16: ") + e.what());
        }

        if (!(context__.contains_r("psi_mean17")))
            throw std::runtime_error("variable psi_mean17 missing");
        vals_r__ = context__.vals_r("psi_mean17");
        pos__ = 0U;
        context__.validate_dims("initialization", "psi_mean17", "double", context__.to_vec());
        // generate_declaration psi_mean17
        double psi_mean17(0);
        psi_mean17 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean17);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi_mean17: ") + e.what());
        }

        if (!(context__.contains_r("psi_mean18")))
            throw std::runtime_error("variable psi_mean18 missing");
        vals_r__ = context__.vals_r("psi_mean18");
        pos__ = 0U;
        context__.validate_dims("initialization", "psi_mean18", "double", context__.to_vec());
        // generate_declaration psi_mean18
        double psi_mean18(0);
        psi_mean18 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(psi_mean18);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi_mean18: ") + e.what());
        }

        if (!(context__.contains_r("sd_h1")))
            throw std::runtime_error("variable sd_h1 missing");
        vals_r__ = context__.vals_r("sd_h1");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h1", "double", context__.to_vec());
        // generate_declaration sd_h1
        double sd_h1(0);
        sd_h1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h1: ") + e.what());
        }

        if (!(context__.contains_r("sd_h2")))
            throw std::runtime_error("variable sd_h2 missing");
        vals_r__ = context__.vals_r("sd_h2");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h2", "double", context__.to_vec());
        // generate_declaration sd_h2
        double sd_h2(0);
        sd_h2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h2: ") + e.what());
        }

        if (!(context__.contains_r("sd_h3")))
            throw std::runtime_error("variable sd_h3 missing");
        vals_r__ = context__.vals_r("sd_h3");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h3", "double", context__.to_vec());
        // generate_declaration sd_h3
        double sd_h3(0);
        sd_h3 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h3);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h3: ") + e.what());
        }

        if (!(context__.contains_r("sd_h4")))
            throw std::runtime_error("variable sd_h4 missing");
        vals_r__ = context__.vals_r("sd_h4");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h4", "double", context__.to_vec());
        // generate_declaration sd_h4
        double sd_h4(0);
        sd_h4 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h4);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h4: ") + e.what());
        }

        if (!(context__.contains_r("sd_h5")))
            throw std::runtime_error("variable sd_h5 missing");
        vals_r__ = context__.vals_r("sd_h5");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h5", "double", context__.to_vec());
        // generate_declaration sd_h5
        double sd_h5(0);
        sd_h5 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h5);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h5: ") + e.what());
        }

        if (!(context__.contains_r("sd_h6")))
            throw std::runtime_error("variable sd_h6 missing");
        vals_r__ = context__.vals_r("sd_h6");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h6", "double", context__.to_vec());
        // generate_declaration sd_h6
        double sd_h6(0);
        sd_h6 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h6);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h6: ") + e.what());
        }

        if (!(context__.contains_r("sd_h7")))
            throw std::runtime_error("variable sd_h7 missing");
        vals_r__ = context__.vals_r("sd_h7");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h7", "double", context__.to_vec());
        // generate_declaration sd_h7
        double sd_h7(0);
        sd_h7 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h7);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h7: ") + e.what());
        }

        if (!(context__.contains_r("sd_h8")))
            throw std::runtime_error("variable sd_h8 missing");
        vals_r__ = context__.vals_r("sd_h8");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h8", "double", context__.to_vec());
        // generate_declaration sd_h8
        double sd_h8(0);
        sd_h8 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h8);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h8: ") + e.what());
        }

        if (!(context__.contains_r("sd_h9")))
            throw std::runtime_error("variable sd_h9 missing");
        vals_r__ = context__.vals_r("sd_h9");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h9", "double", context__.to_vec());
        // generate_declaration sd_h9
        double sd_h9(0);
        sd_h9 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h9);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h9: ") + e.what());
        }

        if (!(context__.contains_r("sd_h10")))
            throw std::runtime_error("variable sd_h10 missing");
        vals_r__ = context__.vals_r("sd_h10");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h10", "double", context__.to_vec());
        // generate_declaration sd_h10
        double sd_h10(0);
        sd_h10 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h10);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h10: ") + e.what());
        }

        if (!(context__.contains_r("sd_h11")))
            throw std::runtime_error("variable sd_h11 missing");
        vals_r__ = context__.vals_r("sd_h11");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h11", "double", context__.to_vec());
        // generate_declaration sd_h11
        double sd_h11(0);
        sd_h11 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h11);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h11: ") + e.what());
        }

        if (!(context__.contains_r("sd_h12")))
            throw std::runtime_error("variable sd_h12 missing");
        vals_r__ = context__.vals_r("sd_h12");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h12", "double", context__.to_vec());
        // generate_declaration sd_h12
        double sd_h12(0);
        sd_h12 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h12);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h12: ") + e.what());
        }

        if (!(context__.contains_r("sd_h13")))
            throw std::runtime_error("variable sd_h13 missing");
        vals_r__ = context__.vals_r("sd_h13");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h13", "double", context__.to_vec());
        // generate_declaration sd_h13
        double sd_h13(0);
        sd_h13 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h13);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h13: ") + e.what());
        }

        if (!(context__.contains_r("sd_h14")))
            throw std::runtime_error("variable sd_h14 missing");
        vals_r__ = context__.vals_r("sd_h14");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h14", "double", context__.to_vec());
        // generate_declaration sd_h14
        double sd_h14(0);
        sd_h14 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h14);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h14: ") + e.what());
        }

        if (!(context__.contains_r("sd_h15")))
            throw std::runtime_error("variable sd_h15 missing");
        vals_r__ = context__.vals_r("sd_h15");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h15", "double", context__.to_vec());
        // generate_declaration sd_h15
        double sd_h15(0);
        sd_h15 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h15);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h15: ") + e.what());
        }

        if (!(context__.contains_r("sd_h16")))
            throw std::runtime_error("variable sd_h16 missing");
        vals_r__ = context__.vals_r("sd_h16");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h16", "double", context__.to_vec());
        // generate_declaration sd_h16
        double sd_h16(0);
        sd_h16 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h16);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h16: ") + e.what());
        }

        if (!(context__.contains_r("sd_h17")))
            throw std::runtime_error("variable sd_h17 missing");
        vals_r__ = context__.vals_r("sd_h17");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h17", "double", context__.to_vec());
        // generate_declaration sd_h17
        double sd_h17(0);
        sd_h17 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h17);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h17: ") + e.what());
        }

        if (!(context__.contains_r("sd_h18")))
            throw std::runtime_error("variable sd_h18 missing");
        vals_r__ = context__.vals_r("sd_h18");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h18", "double", context__.to_vec());
        // generate_declaration sd_h18
        double sd_h18(0);
        sd_h18 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h18);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h18: ") + e.what());
        }

        if (!(context__.contains_r("psi1")))
            throw std::runtime_error("variable psi1 missing");
        vals_r__ = context__.vals_r("psi1");
        pos__ = 0U;
        validate_non_negative_index("psi1", "n_block", n_block);
        context__.validate_dims("initialization", "psi1", "vector_d", context__.to_vec(n_block));
        // generate_declaration psi1
        vector_d psi1(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            psi1(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(psi1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi1: ") + e.what());
        }

        if (!(context__.contains_r("psi2")))
            throw std::runtime_error("variable psi2 missing");
        vals_r__ = context__.vals_r("psi2");
        pos__ = 0U;
        validate_non_negative_index("psi2", "n_block", n_block);
        context__.validate_dims("initialization", "psi2", "vector_d", context__.to_vec(n_block));
        // generate_declaration psi2
        vector_d psi2(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            psi2(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(psi2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi2: ") + e.what());
        }

        if (!(context__.contains_r("psi3")))
            throw std::runtime_error("variable psi3 missing");
        vals_r__ = context__.vals_r("psi3");
        pos__ = 0U;
        validate_non_negative_index("psi3", "n_block", n_block);
        context__.validate_dims("initialization", "psi3", "vector_d", context__.to_vec(n_block));
        // generate_declaration psi3
        vector_d psi3(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            psi3(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(psi3);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi3: ") + e.what());
        }

        if (!(context__.contains_r("psi4")))
            throw std::runtime_error("variable psi4 missing");
        vals_r__ = context__.vals_r("psi4");
        pos__ = 0U;
        validate_non_negative_index("psi4", "n_block", n_block);
        context__.validate_dims("initialization", "psi4", "vector_d", context__.to_vec(n_block));
        // generate_declaration psi4
        vector_d psi4(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            psi4(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(psi4);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi4: ") + e.what());
        }

        if (!(context__.contains_r("psi5")))
            throw std::runtime_error("variable psi5 missing");
        vals_r__ = context__.vals_r("psi5");
        pos__ = 0U;
        validate_non_negative_index("psi5", "n_block", n_block);
        context__.validate_dims("initialization", "psi5", "vector_d", context__.to_vec(n_block));
        // generate_declaration psi5
        vector_d psi5(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            psi5(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(psi5);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi5: ") + e.what());
        }

        if (!(context__.contains_r("psi6")))
            throw std::runtime_error("variable psi6 missing");
        vals_r__ = context__.vals_r("psi6");
        pos__ = 0U;
        validate_non_negative_index("psi6", "n_block", n_block);
        context__.validate_dims("initialization", "psi6", "vector_d", context__.to_vec(n_block));
        // generate_declaration psi6
        vector_d psi6(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            psi6(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(psi6);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi6: ") + e.what());
        }

        if (!(context__.contains_r("psi7")))
            throw std::runtime_error("variable psi7 missing");
        vals_r__ = context__.vals_r("psi7");
        pos__ = 0U;
        validate_non_negative_index("psi7", "n_block", n_block);
        context__.validate_dims("initialization", "psi7", "vector_d", context__.to_vec(n_block));
        // generate_declaration psi7
        vector_d psi7(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            psi7(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(psi7);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi7: ") + e.what());
        }

        if (!(context__.contains_r("psi8")))
            throw std::runtime_error("variable psi8 missing");
        vals_r__ = context__.vals_r("psi8");
        pos__ = 0U;
        validate_non_negative_index("psi8", "n_block", n_block);
        context__.validate_dims("initialization", "psi8", "vector_d", context__.to_vec(n_block));
        // generate_declaration psi8
        vector_d psi8(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            psi8(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(psi8);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi8: ") + e.what());
        }

        if (!(context__.contains_r("psi9")))
            throw std::runtime_error("variable psi9 missing");
        vals_r__ = context__.vals_r("psi9");
        pos__ = 0U;
        validate_non_negative_index("psi9", "n_block", n_block);
        context__.validate_dims("initialization", "psi9", "vector_d", context__.to_vec(n_block));
        // generate_declaration psi9
        vector_d psi9(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            psi9(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(psi9);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi9: ") + e.what());
        }

        if (!(context__.contains_r("psi10")))
            throw std::runtime_error("variable psi10 missing");
        vals_r__ = context__.vals_r("psi10");
        pos__ = 0U;
        validate_non_negative_index("psi10", "n_block", n_block);
        context__.validate_dims("initialization", "psi10", "vector_d", context__.to_vec(n_block));
        // generate_declaration psi10
        vector_d psi10(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            psi10(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(psi10);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi10: ") + e.what());
        }

        if (!(context__.contains_r("psi11")))
            throw std::runtime_error("variable psi11 missing");
        vals_r__ = context__.vals_r("psi11");
        pos__ = 0U;
        validate_non_negative_index("psi11", "n_block", n_block);
        context__.validate_dims("initialization", "psi11", "vector_d", context__.to_vec(n_block));
        // generate_declaration psi11
        vector_d psi11(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            psi11(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(psi11);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi11: ") + e.what());
        }

        if (!(context__.contains_r("psi12")))
            throw std::runtime_error("variable psi12 missing");
        vals_r__ = context__.vals_r("psi12");
        pos__ = 0U;
        validate_non_negative_index("psi12", "n_block", n_block);
        context__.validate_dims("initialization", "psi12", "vector_d", context__.to_vec(n_block));
        // generate_declaration psi12
        vector_d psi12(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            psi12(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(psi12);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi12: ") + e.what());
        }

        if (!(context__.contains_r("psi13")))
            throw std::runtime_error("variable psi13 missing");
        vals_r__ = context__.vals_r("psi13");
        pos__ = 0U;
        validate_non_negative_index("psi13", "n_block", n_block);
        context__.validate_dims("initialization", "psi13", "vector_d", context__.to_vec(n_block));
        // generate_declaration psi13
        vector_d psi13(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            psi13(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(psi13);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi13: ") + e.what());
        }

        if (!(context__.contains_r("psi14")))
            throw std::runtime_error("variable psi14 missing");
        vals_r__ = context__.vals_r("psi14");
        pos__ = 0U;
        validate_non_negative_index("psi14", "n_block", n_block);
        context__.validate_dims("initialization", "psi14", "vector_d", context__.to_vec(n_block));
        // generate_declaration psi14
        vector_d psi14(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            psi14(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(psi14);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi14: ") + e.what());
        }

        if (!(context__.contains_r("psi15")))
            throw std::runtime_error("variable psi15 missing");
        vals_r__ = context__.vals_r("psi15");
        pos__ = 0U;
        validate_non_negative_index("psi15", "n_block", n_block);
        context__.validate_dims("initialization", "psi15", "vector_d", context__.to_vec(n_block));
        // generate_declaration psi15
        vector_d psi15(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            psi15(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(psi15);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi15: ") + e.what());
        }

        if (!(context__.contains_r("psi16")))
            throw std::runtime_error("variable psi16 missing");
        vals_r__ = context__.vals_r("psi16");
        pos__ = 0U;
        validate_non_negative_index("psi16", "n_block", n_block);
        context__.validate_dims("initialization", "psi16", "vector_d", context__.to_vec(n_block));
        // generate_declaration psi16
        vector_d psi16(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            psi16(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(psi16);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi16: ") + e.what());
        }

        if (!(context__.contains_r("psi17")))
            throw std::runtime_error("variable psi17 missing");
        vals_r__ = context__.vals_r("psi17");
        pos__ = 0U;
        validate_non_negative_index("psi17", "n_block", n_block);
        context__.validate_dims("initialization", "psi17", "vector_d", context__.to_vec(n_block));
        // generate_declaration psi17
        vector_d psi17(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            psi17(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(psi17);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi17: ") + e.what());
        }

        if (!(context__.contains_r("psi18")))
            throw std::runtime_error("variable psi18 missing");
        vals_r__ = context__.vals_r("psi18");
        pos__ = 0U;
        validate_non_negative_index("psi18", "n_block", n_block);
        context__.validate_dims("initialization", "psi18", "vector_d", context__.to_vec(n_block));
        // generate_declaration psi18
        vector_d psi18(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            psi18(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(psi18);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable psi18: ") + e.what());
        }

        if (!(context__.contains_r("h1")))
            throw std::runtime_error("variable h1 missing");
        vals_r__ = context__.vals_r("h1");
        pos__ = 0U;
        validate_non_negative_index("h1", "n_block", n_block);
        context__.validate_dims("initialization", "h1", "vector_d", context__.to_vec(n_block));
        // generate_declaration h1
        vector_d h1(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h1(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h1: ") + e.what());
        }

        if (!(context__.contains_r("h2")))
            throw std::runtime_error("variable h2 missing");
        vals_r__ = context__.vals_r("h2");
        pos__ = 0U;
        validate_non_negative_index("h2", "n_block", n_block);
        context__.validate_dims("initialization", "h2", "vector_d", context__.to_vec(n_block));
        // generate_declaration h2
        vector_d h2(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h2(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h2: ") + e.what());
        }

        if (!(context__.contains_r("h3")))
            throw std::runtime_error("variable h3 missing");
        vals_r__ = context__.vals_r("h3");
        pos__ = 0U;
        validate_non_negative_index("h3", "n_block", n_block);
        context__.validate_dims("initialization", "h3", "vector_d", context__.to_vec(n_block));
        // generate_declaration h3
        vector_d h3(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h3(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h3);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h3: ") + e.what());
        }

        if (!(context__.contains_r("h4")))
            throw std::runtime_error("variable h4 missing");
        vals_r__ = context__.vals_r("h4");
        pos__ = 0U;
        validate_non_negative_index("h4", "n_block", n_block);
        context__.validate_dims("initialization", "h4", "vector_d", context__.to_vec(n_block));
        // generate_declaration h4
        vector_d h4(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h4(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h4);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h4: ") + e.what());
        }

        if (!(context__.contains_r("h5")))
            throw std::runtime_error("variable h5 missing");
        vals_r__ = context__.vals_r("h5");
        pos__ = 0U;
        validate_non_negative_index("h5", "n_block", n_block);
        context__.validate_dims("initialization", "h5", "vector_d", context__.to_vec(n_block));
        // generate_declaration h5
        vector_d h5(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h5(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h5);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h5: ") + e.what());
        }

        if (!(context__.contains_r("h6")))
            throw std::runtime_error("variable h6 missing");
        vals_r__ = context__.vals_r("h6");
        pos__ = 0U;
        validate_non_negative_index("h6", "n_block", n_block);
        context__.validate_dims("initialization", "h6", "vector_d", context__.to_vec(n_block));
        // generate_declaration h6
        vector_d h6(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h6(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h6);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h6: ") + e.what());
        }

        if (!(context__.contains_r("h7")))
            throw std::runtime_error("variable h7 missing");
        vals_r__ = context__.vals_r("h7");
        pos__ = 0U;
        validate_non_negative_index("h7", "n_block", n_block);
        context__.validate_dims("initialization", "h7", "vector_d", context__.to_vec(n_block));
        // generate_declaration h7
        vector_d h7(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h7(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h7);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h7: ") + e.what());
        }

        if (!(context__.contains_r("h8")))
            throw std::runtime_error("variable h8 missing");
        vals_r__ = context__.vals_r("h8");
        pos__ = 0U;
        validate_non_negative_index("h8", "n_block", n_block);
        context__.validate_dims("initialization", "h8", "vector_d", context__.to_vec(n_block));
        // generate_declaration h8
        vector_d h8(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h8(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h8);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h8: ") + e.what());
        }

        if (!(context__.contains_r("h9")))
            throw std::runtime_error("variable h9 missing");
        vals_r__ = context__.vals_r("h9");
        pos__ = 0U;
        validate_non_negative_index("h9", "n_block", n_block);
        context__.validate_dims("initialization", "h9", "vector_d", context__.to_vec(n_block));
        // generate_declaration h9
        vector_d h9(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h9(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h9);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h9: ") + e.what());
        }

        if (!(context__.contains_r("h10")))
            throw std::runtime_error("variable h10 missing");
        vals_r__ = context__.vals_r("h10");
        pos__ = 0U;
        validate_non_negative_index("h10", "n_block", n_block);
        context__.validate_dims("initialization", "h10", "vector_d", context__.to_vec(n_block));
        // generate_declaration h10
        vector_d h10(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h10(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h10);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h10: ") + e.what());
        }

        if (!(context__.contains_r("h11")))
            throw std::runtime_error("variable h11 missing");
        vals_r__ = context__.vals_r("h11");
        pos__ = 0U;
        validate_non_negative_index("h11", "n_block", n_block);
        context__.validate_dims("initialization", "h11", "vector_d", context__.to_vec(n_block));
        // generate_declaration h11
        vector_d h11(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h11(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h11);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h11: ") + e.what());
        }

        if (!(context__.contains_r("h12")))
            throw std::runtime_error("variable h12 missing");
        vals_r__ = context__.vals_r("h12");
        pos__ = 0U;
        validate_non_negative_index("h12", "n_block", n_block);
        context__.validate_dims("initialization", "h12", "vector_d", context__.to_vec(n_block));
        // generate_declaration h12
        vector_d h12(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h12(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h12);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h12: ") + e.what());
        }

        if (!(context__.contains_r("h13")))
            throw std::runtime_error("variable h13 missing");
        vals_r__ = context__.vals_r("h13");
        pos__ = 0U;
        validate_non_negative_index("h13", "n_block", n_block);
        context__.validate_dims("initialization", "h13", "vector_d", context__.to_vec(n_block));
        // generate_declaration h13
        vector_d h13(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h13(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h13);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h13: ") + e.what());
        }

        if (!(context__.contains_r("h14")))
            throw std::runtime_error("variable h14 missing");
        vals_r__ = context__.vals_r("h14");
        pos__ = 0U;
        validate_non_negative_index("h14", "n_block", n_block);
        context__.validate_dims("initialization", "h14", "vector_d", context__.to_vec(n_block));
        // generate_declaration h14
        vector_d h14(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h14(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h14);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h14: ") + e.what());
        }

        if (!(context__.contains_r("h15")))
            throw std::runtime_error("variable h15 missing");
        vals_r__ = context__.vals_r("h15");
        pos__ = 0U;
        validate_non_negative_index("h15", "n_block", n_block);
        context__.validate_dims("initialization", "h15", "vector_d", context__.to_vec(n_block));
        // generate_declaration h15
        vector_d h15(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h15(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h15);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h15: ") + e.what());
        }

        if (!(context__.contains_r("h16")))
            throw std::runtime_error("variable h16 missing");
        vals_r__ = context__.vals_r("h16");
        pos__ = 0U;
        validate_non_negative_index("h16", "n_block", n_block);
        context__.validate_dims("initialization", "h16", "vector_d", context__.to_vec(n_block));
        // generate_declaration h16
        vector_d h16(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h16(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h16);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h16: ") + e.what());
        }

        if (!(context__.contains_r("h17")))
            throw std::runtime_error("variable h17 missing");
        vals_r__ = context__.vals_r("h17");
        pos__ = 0U;
        validate_non_negative_index("h17", "n_block", n_block);
        context__.validate_dims("initialization", "h17", "vector_d", context__.to_vec(n_block));
        // generate_declaration h17
        vector_d h17(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h17(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h17);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h17: ") + e.what());
        }

        if (!(context__.contains_r("h18")))
            throw std::runtime_error("variable h18 missing");
        vals_r__ = context__.vals_r("h18");
        pos__ = 0U;
        validate_non_negative_index("h18", "n_block", n_block);
        context__.validate_dims("initialization", "h18", "vector_d", context__.to_vec(n_block));
        // generate_declaration h18
        vector_d h18(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h18(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h18);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h18: ") + e.what());
        }

        if (!(context__.contains_r("h1_holdout")))
            throw std::runtime_error("variable h1_holdout missing");
        vals_r__ = context__.vals_r("h1_holdout");
        pos__ = 0U;
        validate_non_negative_index("h1_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h1_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h1_holdout
        vector_d h1_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h1_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h1_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h1_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h2_holdout")))
            throw std::runtime_error("variable h2_holdout missing");
        vals_r__ = context__.vals_r("h2_holdout");
        pos__ = 0U;
        validate_non_negative_index("h2_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h2_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h2_holdout
        vector_d h2_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h2_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h2_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h2_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h3_holdout")))
            throw std::runtime_error("variable h3_holdout missing");
        vals_r__ = context__.vals_r("h3_holdout");
        pos__ = 0U;
        validate_non_negative_index("h3_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h3_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h3_holdout
        vector_d h3_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h3_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h3_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h3_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h4_holdout")))
            throw std::runtime_error("variable h4_holdout missing");
        vals_r__ = context__.vals_r("h4_holdout");
        pos__ = 0U;
        validate_non_negative_index("h4_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h4_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h4_holdout
        vector_d h4_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h4_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h4_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h4_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h5_holdout")))
            throw std::runtime_error("variable h5_holdout missing");
        vals_r__ = context__.vals_r("h5_holdout");
        pos__ = 0U;
        validate_non_negative_index("h5_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h5_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h5_holdout
        vector_d h5_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h5_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h5_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h5_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h6_holdout")))
            throw std::runtime_error("variable h6_holdout missing");
        vals_r__ = context__.vals_r("h6_holdout");
        pos__ = 0U;
        validate_non_negative_index("h6_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h6_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h6_holdout
        vector_d h6_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h6_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h6_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h6_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h7_holdout")))
            throw std::runtime_error("variable h7_holdout missing");
        vals_r__ = context__.vals_r("h7_holdout");
        pos__ = 0U;
        validate_non_negative_index("h7_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h7_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h7_holdout
        vector_d h7_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h7_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h7_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h7_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h8_holdout")))
            throw std::runtime_error("variable h8_holdout missing");
        vals_r__ = context__.vals_r("h8_holdout");
        pos__ = 0U;
        validate_non_negative_index("h8_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h8_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h8_holdout
        vector_d h8_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h8_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h8_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h8_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h9_holdout")))
            throw std::runtime_error("variable h9_holdout missing");
        vals_r__ = context__.vals_r("h9_holdout");
        pos__ = 0U;
        validate_non_negative_index("h9_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h9_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h9_holdout
        vector_d h9_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h9_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h9_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h9_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h10_holdout")))
            throw std::runtime_error("variable h10_holdout missing");
        vals_r__ = context__.vals_r("h10_holdout");
        pos__ = 0U;
        validate_non_negative_index("h10_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h10_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h10_holdout
        vector_d h10_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h10_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h10_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h10_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h11_holdout")))
            throw std::runtime_error("variable h11_holdout missing");
        vals_r__ = context__.vals_r("h11_holdout");
        pos__ = 0U;
        validate_non_negative_index("h11_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h11_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h11_holdout
        vector_d h11_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h11_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h11_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h11_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h12_holdout")))
            throw std::runtime_error("variable h12_holdout missing");
        vals_r__ = context__.vals_r("h12_holdout");
        pos__ = 0U;
        validate_non_negative_index("h12_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h12_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h12_holdout
        vector_d h12_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h12_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h12_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h12_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h13_holdout")))
            throw std::runtime_error("variable h13_holdout missing");
        vals_r__ = context__.vals_r("h13_holdout");
        pos__ = 0U;
        validate_non_negative_index("h13_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h13_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h13_holdout
        vector_d h13_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h13_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h13_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h13_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h14_holdout")))
            throw std::runtime_error("variable h14_holdout missing");
        vals_r__ = context__.vals_r("h14_holdout");
        pos__ = 0U;
        validate_non_negative_index("h14_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h14_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h14_holdout
        vector_d h14_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h14_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h14_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h14_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h15_holdout")))
            throw std::runtime_error("variable h15_holdout missing");
        vals_r__ = context__.vals_r("h15_holdout");
        pos__ = 0U;
        validate_non_negative_index("h15_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h15_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h15_holdout
        vector_d h15_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h15_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h15_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h15_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h16_holdout")))
            throw std::runtime_error("variable h16_holdout missing");
        vals_r__ = context__.vals_r("h16_holdout");
        pos__ = 0U;
        validate_non_negative_index("h16_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h16_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h16_holdout
        vector_d h16_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h16_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h16_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h16_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h17_holdout")))
            throw std::runtime_error("variable h17_holdout missing");
        vals_r__ = context__.vals_r("h17_holdout");
        pos__ = 0U;
        validate_non_negative_index("h17_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h17_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h17_holdout
        vector_d h17_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h17_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h17_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h17_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h18_holdout")))
            throw std::runtime_error("variable h18_holdout missing");
        vals_r__ = context__.vals_r("h18_holdout");
        pos__ = 0U;
        validate_non_negative_index("h18_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h18_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h18_holdout
        vector_d h18_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h18_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h18_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h18_holdout: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        T__ sigma_obs;
        (void) sigma_obs;  // dummy to suppress unused var warning
        if (jacobian__)
            sigma_obs = in__.scalar_lb_constrain(0,lp__);
        else
            sigma_obs = in__.scalar_lb_constrain(0);

        T__ block_sd1;
        (void) block_sd1;  // dummy to suppress unused var warning
        if (jacobian__)
            block_sd1 = in__.scalar_lb_constrain(0,lp__);
        else
            block_sd1 = in__.scalar_lb_constrain(0);

        T__ block_sd2;
        (void) block_sd2;  // dummy to suppress unused var warning
        if (jacobian__)
            block_sd2 = in__.scalar_lb_constrain(0,lp__);
        else
            block_sd2 = in__.scalar_lb_constrain(0);

        T__ block_sd3;
        (void) block_sd3;  // dummy to suppress unused var warning
        if (jacobian__)
            block_sd3 = in__.scalar_lb_constrain(0,lp__);
        else
            block_sd3 = in__.scalar_lb_constrain(0);

        T__ block_sd4;
        (void) block_sd4;  // dummy to suppress unused var warning
        if (jacobian__)
            block_sd4 = in__.scalar_lb_constrain(0,lp__);
        else
            block_sd4 = in__.scalar_lb_constrain(0);

        T__ block_sd5;
        (void) block_sd5;  // dummy to suppress unused var warning
        if (jacobian__)
            block_sd5 = in__.scalar_lb_constrain(0,lp__);
        else
            block_sd5 = in__.scalar_lb_constrain(0);

        T__ block_sd6;
        (void) block_sd6;  // dummy to suppress unused var warning
        if (jacobian__)
            block_sd6 = in__.scalar_lb_constrain(0,lp__);
        else
            block_sd6 = in__.scalar_lb_constrain(0);

        T__ block_sd7;
        (void) block_sd7;  // dummy to suppress unused var warning
        if (jacobian__)
            block_sd7 = in__.scalar_lb_constrain(0,lp__);
        else
            block_sd7 = in__.scalar_lb_constrain(0);

        T__ block_sd8;
        (void) block_sd8;  // dummy to suppress unused var warning
        if (jacobian__)
            block_sd8 = in__.scalar_lb_constrain(0,lp__);
        else
            block_sd8 = in__.scalar_lb_constrain(0);

        T__ block_sd9;
        (void) block_sd9;  // dummy to suppress unused var warning
        if (jacobian__)
            block_sd9 = in__.scalar_lb_constrain(0,lp__);
        else
            block_sd9 = in__.scalar_lb_constrain(0);

        T__ block_sd10;
        (void) block_sd10;  // dummy to suppress unused var warning
        if (jacobian__)
            block_sd10 = in__.scalar_lb_constrain(0,lp__);
        else
            block_sd10 = in__.scalar_lb_constrain(0);

        T__ block_sd11;
        (void) block_sd11;  // dummy to suppress unused var warning
        if (jacobian__)
            block_sd11 = in__.scalar_lb_constrain(0,lp__);
        else
            block_sd11 = in__.scalar_lb_constrain(0);

        T__ block_sd12;
        (void) block_sd12;  // dummy to suppress unused var warning
        if (jacobian__)
            block_sd12 = in__.scalar_lb_constrain(0,lp__);
        else
            block_sd12 = in__.scalar_lb_constrain(0);

        T__ block_sd13;
        (void) block_sd13;  // dummy to suppress unused var warning
        if (jacobian__)
            block_sd13 = in__.scalar_lb_constrain(0,lp__);
        else
            block_sd13 = in__.scalar_lb_constrain(0);

        T__ block_sd14;
        (void) block_sd14;  // dummy to suppress unused var warning
        if (jacobian__)
            block_sd14 = in__.scalar_lb_constrain(0,lp__);
        else
            block_sd14 = in__.scalar_lb_constrain(0);

        T__ block_sd15;
        (void) block_sd15;  // dummy to suppress unused var warning
        if (jacobian__)
            block_sd15 = in__.scalar_lb_constrain(0,lp__);
        else
            block_sd15 = in__.scalar_lb_constrain(0);

        T__ block_sd16;
        (void) block_sd16;  // dummy to suppress unused var warning
        if (jacobian__)
            block_sd16 = in__.scalar_lb_constrain(0,lp__);
        else
            block_sd16 = in__.scalar_lb_constrain(0);

        T__ block_sd17;
        (void) block_sd17;  // dummy to suppress unused var warning
        if (jacobian__)
            block_sd17 = in__.scalar_lb_constrain(0,lp__);
        else
            block_sd17 = in__.scalar_lb_constrain(0);

        T__ block_sd18;
        (void) block_sd18;  // dummy to suppress unused var warning
        if (jacobian__)
            block_sd18 = in__.scalar_lb_constrain(0,lp__);
        else
            block_sd18 = in__.scalar_lb_constrain(0);

        T__ psi_mean1;
        (void) psi_mean1;  // dummy to suppress unused var warning
        if (jacobian__)
            psi_mean1 = in__.scalar_constrain(lp__);
        else
            psi_mean1 = in__.scalar_constrain();

        T__ psi_mean2;
        (void) psi_mean2;  // dummy to suppress unused var warning
        if (jacobian__)
            psi_mean2 = in__.scalar_constrain(lp__);
        else
            psi_mean2 = in__.scalar_constrain();

        T__ psi_mean3;
        (void) psi_mean3;  // dummy to suppress unused var warning
        if (jacobian__)
            psi_mean3 = in__.scalar_constrain(lp__);
        else
            psi_mean3 = in__.scalar_constrain();

        T__ psi_mean4;
        (void) psi_mean4;  // dummy to suppress unused var warning
        if (jacobian__)
            psi_mean4 = in__.scalar_constrain(lp__);
        else
            psi_mean4 = in__.scalar_constrain();

        T__ psi_mean5;
        (void) psi_mean5;  // dummy to suppress unused var warning
        if (jacobian__)
            psi_mean5 = in__.scalar_constrain(lp__);
        else
            psi_mean5 = in__.scalar_constrain();

        T__ psi_mean6;
        (void) psi_mean6;  // dummy to suppress unused var warning
        if (jacobian__)
            psi_mean6 = in__.scalar_constrain(lp__);
        else
            psi_mean6 = in__.scalar_constrain();

        T__ psi_mean7;
        (void) psi_mean7;  // dummy to suppress unused var warning
        if (jacobian__)
            psi_mean7 = in__.scalar_constrain(lp__);
        else
            psi_mean7 = in__.scalar_constrain();

        T__ psi_mean8;
        (void) psi_mean8;  // dummy to suppress unused var warning
        if (jacobian__)
            psi_mean8 = in__.scalar_constrain(lp__);
        else
            psi_mean8 = in__.scalar_constrain();

        T__ psi_mean9;
        (void) psi_mean9;  // dummy to suppress unused var warning
        if (jacobian__)
            psi_mean9 = in__.scalar_constrain(lp__);
        else
            psi_mean9 = in__.scalar_constrain();

        T__ psi_mean10;
        (void) psi_mean10;  // dummy to suppress unused var warning
        if (jacobian__)
            psi_mean10 = in__.scalar_constrain(lp__);
        else
            psi_mean10 = in__.scalar_constrain();

        T__ psi_mean11;
        (void) psi_mean11;  // dummy to suppress unused var warning
        if (jacobian__)
            psi_mean11 = in__.scalar_constrain(lp__);
        else
            psi_mean11 = in__.scalar_constrain();

        T__ psi_mean12;
        (void) psi_mean12;  // dummy to suppress unused var warning
        if (jacobian__)
            psi_mean12 = in__.scalar_constrain(lp__);
        else
            psi_mean12 = in__.scalar_constrain();

        T__ psi_mean13;
        (void) psi_mean13;  // dummy to suppress unused var warning
        if (jacobian__)
            psi_mean13 = in__.scalar_constrain(lp__);
        else
            psi_mean13 = in__.scalar_constrain();

        T__ psi_mean14;
        (void) psi_mean14;  // dummy to suppress unused var warning
        if (jacobian__)
            psi_mean14 = in__.scalar_constrain(lp__);
        else
            psi_mean14 = in__.scalar_constrain();

        T__ psi_mean15;
        (void) psi_mean15;  // dummy to suppress unused var warning
        if (jacobian__)
            psi_mean15 = in__.scalar_constrain(lp__);
        else
            psi_mean15 = in__.scalar_constrain();

        T__ psi_mean16;
        (void) psi_mean16;  // dummy to suppress unused var warning
        if (jacobian__)
            psi_mean16 = in__.scalar_constrain(lp__);
        else
            psi_mean16 = in__.scalar_constrain();

        T__ psi_mean17;
        (void) psi_mean17;  // dummy to suppress unused var warning
        if (jacobian__)
            psi_mean17 = in__.scalar_constrain(lp__);
        else
            psi_mean17 = in__.scalar_constrain();

        T__ psi_mean18;
        (void) psi_mean18;  // dummy to suppress unused var warning
        if (jacobian__)
            psi_mean18 = in__.scalar_constrain(lp__);
        else
            psi_mean18 = in__.scalar_constrain();

        T__ sd_h1;
        (void) sd_h1;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h1 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h1 = in__.scalar_lb_constrain(0);

        T__ sd_h2;
        (void) sd_h2;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h2 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h2 = in__.scalar_lb_constrain(0);

        T__ sd_h3;
        (void) sd_h3;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h3 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h3 = in__.scalar_lb_constrain(0);

        T__ sd_h4;
        (void) sd_h4;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h4 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h4 = in__.scalar_lb_constrain(0);

        T__ sd_h5;
        (void) sd_h5;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h5 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h5 = in__.scalar_lb_constrain(0);

        T__ sd_h6;
        (void) sd_h6;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h6 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h6 = in__.scalar_lb_constrain(0);

        T__ sd_h7;
        (void) sd_h7;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h7 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h7 = in__.scalar_lb_constrain(0);

        T__ sd_h8;
        (void) sd_h8;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h8 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h8 = in__.scalar_lb_constrain(0);

        T__ sd_h9;
        (void) sd_h9;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h9 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h9 = in__.scalar_lb_constrain(0);

        T__ sd_h10;
        (void) sd_h10;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h10 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h10 = in__.scalar_lb_constrain(0);

        T__ sd_h11;
        (void) sd_h11;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h11 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h11 = in__.scalar_lb_constrain(0);

        T__ sd_h12;
        (void) sd_h12;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h12 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h12 = in__.scalar_lb_constrain(0);

        T__ sd_h13;
        (void) sd_h13;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h13 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h13 = in__.scalar_lb_constrain(0);

        T__ sd_h14;
        (void) sd_h14;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h14 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h14 = in__.scalar_lb_constrain(0);

        T__ sd_h15;
        (void) sd_h15;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h15 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h15 = in__.scalar_lb_constrain(0);

        T__ sd_h16;
        (void) sd_h16;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h16 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h16 = in__.scalar_lb_constrain(0);

        T__ sd_h17;
        (void) sd_h17;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h17 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h17 = in__.scalar_lb_constrain(0);

        T__ sd_h18;
        (void) sd_h18;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h18 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h18 = in__.scalar_lb_constrain(0);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi1;
        (void) psi1;  // dummy to suppress unused var warning
        if (jacobian__)
            psi1 = in__.vector_constrain(n_block,lp__);
        else
            psi1 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi2;
        (void) psi2;  // dummy to suppress unused var warning
        if (jacobian__)
            psi2 = in__.vector_constrain(n_block,lp__);
        else
            psi2 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi3;
        (void) psi3;  // dummy to suppress unused var warning
        if (jacobian__)
            psi3 = in__.vector_constrain(n_block,lp__);
        else
            psi3 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi4;
        (void) psi4;  // dummy to suppress unused var warning
        if (jacobian__)
            psi4 = in__.vector_constrain(n_block,lp__);
        else
            psi4 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi5;
        (void) psi5;  // dummy to suppress unused var warning
        if (jacobian__)
            psi5 = in__.vector_constrain(n_block,lp__);
        else
            psi5 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi6;
        (void) psi6;  // dummy to suppress unused var warning
        if (jacobian__)
            psi6 = in__.vector_constrain(n_block,lp__);
        else
            psi6 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi7;
        (void) psi7;  // dummy to suppress unused var warning
        if (jacobian__)
            psi7 = in__.vector_constrain(n_block,lp__);
        else
            psi7 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi8;
        (void) psi8;  // dummy to suppress unused var warning
        if (jacobian__)
            psi8 = in__.vector_constrain(n_block,lp__);
        else
            psi8 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi9;
        (void) psi9;  // dummy to suppress unused var warning
        if (jacobian__)
            psi9 = in__.vector_constrain(n_block,lp__);
        else
            psi9 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi10;
        (void) psi10;  // dummy to suppress unused var warning
        if (jacobian__)
            psi10 = in__.vector_constrain(n_block,lp__);
        else
            psi10 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi11;
        (void) psi11;  // dummy to suppress unused var warning
        if (jacobian__)
            psi11 = in__.vector_constrain(n_block,lp__);
        else
            psi11 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi12;
        (void) psi12;  // dummy to suppress unused var warning
        if (jacobian__)
            psi12 = in__.vector_constrain(n_block,lp__);
        else
            psi12 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi13;
        (void) psi13;  // dummy to suppress unused var warning
        if (jacobian__)
            psi13 = in__.vector_constrain(n_block,lp__);
        else
            psi13 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi14;
        (void) psi14;  // dummy to suppress unused var warning
        if (jacobian__)
            psi14 = in__.vector_constrain(n_block,lp__);
        else
            psi14 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi15;
        (void) psi15;  // dummy to suppress unused var warning
        if (jacobian__)
            psi15 = in__.vector_constrain(n_block,lp__);
        else
            psi15 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi16;
        (void) psi16;  // dummy to suppress unused var warning
        if (jacobian__)
            psi16 = in__.vector_constrain(n_block,lp__);
        else
            psi16 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi17;
        (void) psi17;  // dummy to suppress unused var warning
        if (jacobian__)
            psi17 = in__.vector_constrain(n_block,lp__);
        else
            psi17 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi18;
        (void) psi18;  // dummy to suppress unused var warning
        if (jacobian__)
            psi18 = in__.vector_constrain(n_block,lp__);
        else
            psi18 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h1;
        (void) h1;  // dummy to suppress unused var warning
        if (jacobian__)
            h1 = in__.vector_constrain(n_block,lp__);
        else
            h1 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h2;
        (void) h2;  // dummy to suppress unused var warning
        if (jacobian__)
            h2 = in__.vector_constrain(n_block,lp__);
        else
            h2 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h3;
        (void) h3;  // dummy to suppress unused var warning
        if (jacobian__)
            h3 = in__.vector_constrain(n_block,lp__);
        else
            h3 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h4;
        (void) h4;  // dummy to suppress unused var warning
        if (jacobian__)
            h4 = in__.vector_constrain(n_block,lp__);
        else
            h4 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h5;
        (void) h5;  // dummy to suppress unused var warning
        if (jacobian__)
            h5 = in__.vector_constrain(n_block,lp__);
        else
            h5 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h6;
        (void) h6;  // dummy to suppress unused var warning
        if (jacobian__)
            h6 = in__.vector_constrain(n_block,lp__);
        else
            h6 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h7;
        (void) h7;  // dummy to suppress unused var warning
        if (jacobian__)
            h7 = in__.vector_constrain(n_block,lp__);
        else
            h7 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h8;
        (void) h8;  // dummy to suppress unused var warning
        if (jacobian__)
            h8 = in__.vector_constrain(n_block,lp__);
        else
            h8 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h9;
        (void) h9;  // dummy to suppress unused var warning
        if (jacobian__)
            h9 = in__.vector_constrain(n_block,lp__);
        else
            h9 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h10;
        (void) h10;  // dummy to suppress unused var warning
        if (jacobian__)
            h10 = in__.vector_constrain(n_block,lp__);
        else
            h10 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h11;
        (void) h11;  // dummy to suppress unused var warning
        if (jacobian__)
            h11 = in__.vector_constrain(n_block,lp__);
        else
            h11 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h12;
        (void) h12;  // dummy to suppress unused var warning
        if (jacobian__)
            h12 = in__.vector_constrain(n_block,lp__);
        else
            h12 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h13;
        (void) h13;  // dummy to suppress unused var warning
        if (jacobian__)
            h13 = in__.vector_constrain(n_block,lp__);
        else
            h13 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h14;
        (void) h14;  // dummy to suppress unused var warning
        if (jacobian__)
            h14 = in__.vector_constrain(n_block,lp__);
        else
            h14 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h15;
        (void) h15;  // dummy to suppress unused var warning
        if (jacobian__)
            h15 = in__.vector_constrain(n_block,lp__);
        else
            h15 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h16;
        (void) h16;  // dummy to suppress unused var warning
        if (jacobian__)
            h16 = in__.vector_constrain(n_block,lp__);
        else
            h16 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h17;
        (void) h17;  // dummy to suppress unused var warning
        if (jacobian__)
            h17 = in__.vector_constrain(n_block,lp__);
        else
            h17 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h18;
        (void) h18;  // dummy to suppress unused var warning
        if (jacobian__)
            h18 = in__.vector_constrain(n_block,lp__);
        else
            h18 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h1_holdout;
        (void) h1_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h1_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h1_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h2_holdout;
        (void) h2_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h2_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h2_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h3_holdout;
        (void) h3_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h3_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h3_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h4_holdout;
        (void) h4_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h4_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h4_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h5_holdout;
        (void) h5_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h5_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h5_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h6_holdout;
        (void) h6_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h6_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h6_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h7_holdout;
        (void) h7_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h7_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h7_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h8_holdout;
        (void) h8_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h8_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h8_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h9_holdout;
        (void) h9_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h9_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h9_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h10_holdout;
        (void) h10_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h10_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h10_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h11_holdout;
        (void) h11_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h11_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h11_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h12_holdout;
        (void) h12_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h12_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h12_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h13_holdout;
        (void) h13_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h13_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h13_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h14_holdout;
        (void) h14_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h14_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h14_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h15_holdout;
        (void) h15_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h15_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h15_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h16_holdout;
        (void) h16_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h16_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h16_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h17_holdout;
        (void) h17_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h17_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h17_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h18_holdout;
        (void) h18_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h18_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h18_holdout = in__.vector_constrain(n_block_pred);


        // transformed parameters
        validate_non_negative_index("mu", "n", n);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  mu(static_cast<Eigen::VectorXd::Index>(n));
        (void) mu;  // dummy to suppress unused var warning

        stan::math::initialize(mu, DUMMY_VAR__);
        stan::math::fill(mu,DUMMY_VAR__);


        try {
            for (int i = 1; i <= n; ++i) {
                stan::math::assign(get_base1_lhs(mu,i,"mu",1), ((((((((((((((((((get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),1,"b_spline",2) * get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),2,"b_spline",2) * get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),3,"b_spline",2) * get_base1(h3,get_base1(block_data,i,"block_data",1),"h3",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),4,"b_spline",2) * get_base1(h4,get_base1(block_data,i,"block_data",1),"h4",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),5,"b_spline",2) * get_base1(h5,get_base1(block_data,i,"block_data",1),"h5",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),6,"b_spline",2) * get_base1(h6,get_base1(block_data,i,"block_data",1),"h6",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),7,"b_spline",2) * get_base1(h7,get_base1(block_data,i,"block_data",1),"h7",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),8,"b_spline",2) * get_base1(h8,get_base1(block_data,i,"block_data",1),"h8",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),9,"b_spline",2) * get_base1(h9,get_base1(block_data,i,"block_data",1),"h9",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),10,"b_spline",2) * get_base1(h10,get_base1(block_data,i,"block_data",1),"h10",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),11,"b_spline",2) * get_base1(h11,get_base1(block_data,i,"block_data",1),"h11",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),12,"b_spline",2) * get_base1(h12,get_base1(block_data,i,"block_data",1),"h12",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),13,"b_spline",2) * get_base1(h13,get_base1(block_data,i,"block_data",1),"h13",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),14,"b_spline",2) * get_base1(h14,get_base1(block_data,i,"block_data",1),"h14",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),15,"b_spline",2) * get_base1(h15,get_base1(block_data,i,"block_data",1),"h15",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),16,"b_spline",2) * get_base1(h16,get_base1(block_data,i,"block_data",1),"h16",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),17,"b_spline",2) * get_base1(h17,get_base1(block_data,i,"block_data",1),"h17",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),18,"b_spline",2) * get_base1(h18,get_base1(block_data,i,"block_data",1),"h18",1))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < n; ++i0__) {
            if (stan::math::is_uninitialized(mu(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: mu" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning

        // model body
        try {

            lp_accum__.add(normal_log<propto__>(log(size_data), mu, sigma_obs));
            lp_accum__.add(normal_log<propto__>(sigma_obs, 0, 2));
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h1,j,"h1",1), get_base1(psi1,j,"psi1",1), sd_h1));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h2,j,"h2",1), get_base1(psi2,j,"psi2",1), sd_h2));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h3,j,"h3",1), get_base1(psi3,j,"psi3",1), sd_h3));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h4,j,"h4",1), get_base1(psi4,j,"psi4",1), sd_h4));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h5,j,"h5",1), get_base1(psi5,j,"psi5",1), sd_h5));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h6,j,"h6",1), get_base1(psi6,j,"psi6",1), sd_h6));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h7,j,"h7",1), get_base1(psi7,j,"psi7",1), sd_h7));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h8,j,"h8",1), get_base1(psi8,j,"psi8",1), sd_h8));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h9,j,"h9",1), get_base1(psi9,j,"psi9",1), sd_h9));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h10,j,"h10",1), get_base1(psi10,j,"psi10",1), sd_h10));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h11,j,"h11",1), get_base1(psi11,j,"psi11",1), sd_h11));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h12,j,"h12",1), get_base1(psi12,j,"psi12",1), sd_h12));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h13,j,"h13",1), get_base1(psi13,j,"psi13",1), sd_h13));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h14,j,"h14",1), get_base1(psi14,j,"psi14",1), sd_h14));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h15,j,"h15",1), get_base1(psi15,j,"psi15",1), sd_h15));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h16,j,"h16",1), get_base1(psi16,j,"psi16",1), sd_h16));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h17,j,"h17",1), get_base1(psi17,j,"psi17",1), sd_h17));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h18,j,"h18",1), get_base1(psi18,j,"psi18",1), sd_h18));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h1_holdout,j,"h1_holdout",1), psi_mean1, sd_h1));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h2_holdout,j,"h2_holdout",1), psi_mean2, sd_h2));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h3_holdout,j,"h3_holdout",1), psi_mean3, sd_h3));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h4_holdout,j,"h4_holdout",1), psi_mean4, sd_h4));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h5_holdout,j,"h5_holdout",1), psi_mean5, sd_h5));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h6_holdout,j,"h6_holdout",1), psi_mean6, sd_h6));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h7_holdout,j,"h7_holdout",1), psi_mean7, sd_h7));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h8_holdout,j,"h8_holdout",1), psi_mean8, sd_h8));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h9_holdout,j,"h9_holdout",1), psi_mean9, sd_h9));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h10_holdout,j,"h10_holdout",1), psi_mean10, sd_h10));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h11_holdout,j,"h11_holdout",1), psi_mean11, sd_h11));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h12_holdout,j,"h12_holdout",1), psi_mean12, sd_h12));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h13_holdout,j,"h13_holdout",1), psi_mean13, sd_h13));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h14_holdout,j,"h14_holdout",1), psi_mean14, sd_h14));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h15_holdout,j,"h15_holdout",1), psi_mean15, sd_h15));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h16_holdout,j,"h16_holdout",1), psi_mean16, sd_h16));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h17_holdout,j,"h17_holdout",1), psi_mean17, sd_h17));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h18_holdout,j,"h18_holdout",1), psi_mean18, sd_h18));
            }
            lp_accum__.add(normal_log<propto__>(block_sd1, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(block_sd2, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(block_sd3, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(block_sd4, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(block_sd5, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(block_sd6, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(block_sd7, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(block_sd8, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(block_sd9, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(block_sd10, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(block_sd11, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(block_sd12, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(block_sd13, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(block_sd14, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(block_sd15, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(block_sd16, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(block_sd17, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(block_sd18, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(psi_mean1, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(psi_mean2, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(psi_mean3, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(psi_mean4, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(psi_mean5, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(psi_mean6, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(psi_mean7, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(psi_mean8, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(psi_mean9, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(psi_mean10, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(psi_mean11, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(psi_mean12, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(psi_mean13, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(psi_mean14, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(psi_mean15, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(psi_mean16, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(psi_mean17, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(psi_mean18, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(psi1, psi_mean1, block_sd1));
            lp_accum__.add(normal_log<propto__>(psi2, psi_mean2, block_sd2));
            lp_accum__.add(normal_log<propto__>(psi3, psi_mean3, block_sd3));
            lp_accum__.add(normal_log<propto__>(psi4, psi_mean4, block_sd4));
            lp_accum__.add(normal_log<propto__>(psi5, psi_mean5, block_sd5));
            lp_accum__.add(normal_log<propto__>(psi6, psi_mean6, block_sd6));
            lp_accum__.add(normal_log<propto__>(psi7, psi_mean7, block_sd7));
            lp_accum__.add(normal_log<propto__>(psi8, psi_mean8, block_sd8));
            lp_accum__.add(normal_log<propto__>(psi9, psi_mean9, block_sd9));
            lp_accum__.add(normal_log<propto__>(psi10, psi_mean10, block_sd10));
            lp_accum__.add(normal_log<propto__>(psi11, psi_mean11, block_sd11));
            lp_accum__.add(normal_log<propto__>(psi12, psi_mean12, block_sd12));
            lp_accum__.add(normal_log<propto__>(psi13, psi_mean13, block_sd13));
            lp_accum__.add(normal_log<propto__>(psi14, psi_mean14, block_sd14));
            lp_accum__.add(normal_log<propto__>(psi15, psi_mean15, block_sd15));
            lp_accum__.add(normal_log<propto__>(psi16, psi_mean16, block_sd16));
            lp_accum__.add(normal_log<propto__>(psi17, psi_mean17, block_sd17));
            lp_accum__.add(normal_log<propto__>(psi18, psi_mean18, block_sd18));
            lp_accum__.add(normal_log<propto__>(sd_h1, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h2, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h3, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h4, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h5, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h6, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h7, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h8, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h9, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h10, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h11, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h12, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h13, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h14, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h15, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h16, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h17, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h18, 0.0, 2.0));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("sigma_obs");
        names__.push_back("block_sd1");
        names__.push_back("block_sd2");
        names__.push_back("block_sd3");
        names__.push_back("block_sd4");
        names__.push_back("block_sd5");
        names__.push_back("block_sd6");
        names__.push_back("block_sd7");
        names__.push_back("block_sd8");
        names__.push_back("block_sd9");
        names__.push_back("block_sd10");
        names__.push_back("block_sd11");
        names__.push_back("block_sd12");
        names__.push_back("block_sd13");
        names__.push_back("block_sd14");
        names__.push_back("block_sd15");
        names__.push_back("block_sd16");
        names__.push_back("block_sd17");
        names__.push_back("block_sd18");
        names__.push_back("psi_mean1");
        names__.push_back("psi_mean2");
        names__.push_back("psi_mean3");
        names__.push_back("psi_mean4");
        names__.push_back("psi_mean5");
        names__.push_back("psi_mean6");
        names__.push_back("psi_mean7");
        names__.push_back("psi_mean8");
        names__.push_back("psi_mean9");
        names__.push_back("psi_mean10");
        names__.push_back("psi_mean11");
        names__.push_back("psi_mean12");
        names__.push_back("psi_mean13");
        names__.push_back("psi_mean14");
        names__.push_back("psi_mean15");
        names__.push_back("psi_mean16");
        names__.push_back("psi_mean17");
        names__.push_back("psi_mean18");
        names__.push_back("sd_h1");
        names__.push_back("sd_h2");
        names__.push_back("sd_h3");
        names__.push_back("sd_h4");
        names__.push_back("sd_h5");
        names__.push_back("sd_h6");
        names__.push_back("sd_h7");
        names__.push_back("sd_h8");
        names__.push_back("sd_h9");
        names__.push_back("sd_h10");
        names__.push_back("sd_h11");
        names__.push_back("sd_h12");
        names__.push_back("sd_h13");
        names__.push_back("sd_h14");
        names__.push_back("sd_h15");
        names__.push_back("sd_h16");
        names__.push_back("sd_h17");
        names__.push_back("sd_h18");
        names__.push_back("psi1");
        names__.push_back("psi2");
        names__.push_back("psi3");
        names__.push_back("psi4");
        names__.push_back("psi5");
        names__.push_back("psi6");
        names__.push_back("psi7");
        names__.push_back("psi8");
        names__.push_back("psi9");
        names__.push_back("psi10");
        names__.push_back("psi11");
        names__.push_back("psi12");
        names__.push_back("psi13");
        names__.push_back("psi14");
        names__.push_back("psi15");
        names__.push_back("psi16");
        names__.push_back("psi17");
        names__.push_back("psi18");
        names__.push_back("h1");
        names__.push_back("h2");
        names__.push_back("h3");
        names__.push_back("h4");
        names__.push_back("h5");
        names__.push_back("h6");
        names__.push_back("h7");
        names__.push_back("h8");
        names__.push_back("h9");
        names__.push_back("h10");
        names__.push_back("h11");
        names__.push_back("h12");
        names__.push_back("h13");
        names__.push_back("h14");
        names__.push_back("h15");
        names__.push_back("h16");
        names__.push_back("h17");
        names__.push_back("h18");
        names__.push_back("h1_holdout");
        names__.push_back("h2_holdout");
        names__.push_back("h3_holdout");
        names__.push_back("h4_holdout");
        names__.push_back("h5_holdout");
        names__.push_back("h6_holdout");
        names__.push_back("h7_holdout");
        names__.push_back("h8_holdout");
        names__.push_back("h9_holdout");
        names__.push_back("h10_holdout");
        names__.push_back("h11_holdout");
        names__.push_back("h12_holdout");
        names__.push_back("h13_holdout");
        names__.push_back("h14_holdout");
        names__.push_back("h15_holdout");
        names__.push_back("h16_holdout");
        names__.push_back("h17_holdout");
        names__.push_back("h18_holdout");
        names__.push_back("mu");
        names__.push_back("mu_plot_growth");
        names__.push_back("mu_plot_agr");
        names__.push_back("mu_pred");
        names__.push_back("size_plot");
        names__.push_back("size_plot_agr");
        names__.push_back("size_pred");
        names__.push_back("log_lik");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_spline_nopred_blockmod_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double sigma_obs = in__.scalar_lb_constrain(0);
        double block_sd1 = in__.scalar_lb_constrain(0);
        double block_sd2 = in__.scalar_lb_constrain(0);
        double block_sd3 = in__.scalar_lb_constrain(0);
        double block_sd4 = in__.scalar_lb_constrain(0);
        double block_sd5 = in__.scalar_lb_constrain(0);
        double block_sd6 = in__.scalar_lb_constrain(0);
        double block_sd7 = in__.scalar_lb_constrain(0);
        double block_sd8 = in__.scalar_lb_constrain(0);
        double block_sd9 = in__.scalar_lb_constrain(0);
        double block_sd10 = in__.scalar_lb_constrain(0);
        double block_sd11 = in__.scalar_lb_constrain(0);
        double block_sd12 = in__.scalar_lb_constrain(0);
        double block_sd13 = in__.scalar_lb_constrain(0);
        double block_sd14 = in__.scalar_lb_constrain(0);
        double block_sd15 = in__.scalar_lb_constrain(0);
        double block_sd16 = in__.scalar_lb_constrain(0);
        double block_sd17 = in__.scalar_lb_constrain(0);
        double block_sd18 = in__.scalar_lb_constrain(0);
        double psi_mean1 = in__.scalar_constrain();
        double psi_mean2 = in__.scalar_constrain();
        double psi_mean3 = in__.scalar_constrain();
        double psi_mean4 = in__.scalar_constrain();
        double psi_mean5 = in__.scalar_constrain();
        double psi_mean6 = in__.scalar_constrain();
        double psi_mean7 = in__.scalar_constrain();
        double psi_mean8 = in__.scalar_constrain();
        double psi_mean9 = in__.scalar_constrain();
        double psi_mean10 = in__.scalar_constrain();
        double psi_mean11 = in__.scalar_constrain();
        double psi_mean12 = in__.scalar_constrain();
        double psi_mean13 = in__.scalar_constrain();
        double psi_mean14 = in__.scalar_constrain();
        double psi_mean15 = in__.scalar_constrain();
        double psi_mean16 = in__.scalar_constrain();
        double psi_mean17 = in__.scalar_constrain();
        double psi_mean18 = in__.scalar_constrain();
        double sd_h1 = in__.scalar_lb_constrain(0);
        double sd_h2 = in__.scalar_lb_constrain(0);
        double sd_h3 = in__.scalar_lb_constrain(0);
        double sd_h4 = in__.scalar_lb_constrain(0);
        double sd_h5 = in__.scalar_lb_constrain(0);
        double sd_h6 = in__.scalar_lb_constrain(0);
        double sd_h7 = in__.scalar_lb_constrain(0);
        double sd_h8 = in__.scalar_lb_constrain(0);
        double sd_h9 = in__.scalar_lb_constrain(0);
        double sd_h10 = in__.scalar_lb_constrain(0);
        double sd_h11 = in__.scalar_lb_constrain(0);
        double sd_h12 = in__.scalar_lb_constrain(0);
        double sd_h13 = in__.scalar_lb_constrain(0);
        double sd_h14 = in__.scalar_lb_constrain(0);
        double sd_h15 = in__.scalar_lb_constrain(0);
        double sd_h16 = in__.scalar_lb_constrain(0);
        double sd_h17 = in__.scalar_lb_constrain(0);
        double sd_h18 = in__.scalar_lb_constrain(0);
        vector_d psi1 = in__.vector_constrain(n_block);
        vector_d psi2 = in__.vector_constrain(n_block);
        vector_d psi3 = in__.vector_constrain(n_block);
        vector_d psi4 = in__.vector_constrain(n_block);
        vector_d psi5 = in__.vector_constrain(n_block);
        vector_d psi6 = in__.vector_constrain(n_block);
        vector_d psi7 = in__.vector_constrain(n_block);
        vector_d psi8 = in__.vector_constrain(n_block);
        vector_d psi9 = in__.vector_constrain(n_block);
        vector_d psi10 = in__.vector_constrain(n_block);
        vector_d psi11 = in__.vector_constrain(n_block);
        vector_d psi12 = in__.vector_constrain(n_block);
        vector_d psi13 = in__.vector_constrain(n_block);
        vector_d psi14 = in__.vector_constrain(n_block);
        vector_d psi15 = in__.vector_constrain(n_block);
        vector_d psi16 = in__.vector_constrain(n_block);
        vector_d psi17 = in__.vector_constrain(n_block);
        vector_d psi18 = in__.vector_constrain(n_block);
        vector_d h1 = in__.vector_constrain(n_block);
        vector_d h2 = in__.vector_constrain(n_block);
        vector_d h3 = in__.vector_constrain(n_block);
        vector_d h4 = in__.vector_constrain(n_block);
        vector_d h5 = in__.vector_constrain(n_block);
        vector_d h6 = in__.vector_constrain(n_block);
        vector_d h7 = in__.vector_constrain(n_block);
        vector_d h8 = in__.vector_constrain(n_block);
        vector_d h9 = in__.vector_constrain(n_block);
        vector_d h10 = in__.vector_constrain(n_block);
        vector_d h11 = in__.vector_constrain(n_block);
        vector_d h12 = in__.vector_constrain(n_block);
        vector_d h13 = in__.vector_constrain(n_block);
        vector_d h14 = in__.vector_constrain(n_block);
        vector_d h15 = in__.vector_constrain(n_block);
        vector_d h16 = in__.vector_constrain(n_block);
        vector_d h17 = in__.vector_constrain(n_block);
        vector_d h18 = in__.vector_constrain(n_block);
        vector_d h1_holdout = in__.vector_constrain(n_block_pred);
        vector_d h2_holdout = in__.vector_constrain(n_block_pred);
        vector_d h3_holdout = in__.vector_constrain(n_block_pred);
        vector_d h4_holdout = in__.vector_constrain(n_block_pred);
        vector_d h5_holdout = in__.vector_constrain(n_block_pred);
        vector_d h6_holdout = in__.vector_constrain(n_block_pred);
        vector_d h7_holdout = in__.vector_constrain(n_block_pred);
        vector_d h8_holdout = in__.vector_constrain(n_block_pred);
        vector_d h9_holdout = in__.vector_constrain(n_block_pred);
        vector_d h10_holdout = in__.vector_constrain(n_block_pred);
        vector_d h11_holdout = in__.vector_constrain(n_block_pred);
        vector_d h12_holdout = in__.vector_constrain(n_block_pred);
        vector_d h13_holdout = in__.vector_constrain(n_block_pred);
        vector_d h14_holdout = in__.vector_constrain(n_block_pred);
        vector_d h15_holdout = in__.vector_constrain(n_block_pred);
        vector_d h16_holdout = in__.vector_constrain(n_block_pred);
        vector_d h17_holdout = in__.vector_constrain(n_block_pred);
        vector_d h18_holdout = in__.vector_constrain(n_block_pred);
        vars__.push_back(sigma_obs);
        vars__.push_back(block_sd1);
        vars__.push_back(block_sd2);
        vars__.push_back(block_sd3);
        vars__.push_back(block_sd4);
        vars__.push_back(block_sd5);
        vars__.push_back(block_sd6);
        vars__.push_back(block_sd7);
        vars__.push_back(block_sd8);
        vars__.push_back(block_sd9);
        vars__.push_back(block_sd10);
        vars__.push_back(block_sd11);
        vars__.push_back(block_sd12);
        vars__.push_back(block_sd13);
        vars__.push_back(block_sd14);
        vars__.push_back(block_sd15);
        vars__.push_back(block_sd16);
        vars__.push_back(block_sd17);
        vars__.push_back(block_sd18);
        vars__.push_back(psi_mean1);
        vars__.push_back(psi_mean2);
        vars__.push_back(psi_mean3);
        vars__.push_back(psi_mean4);
        vars__.push_back(psi_mean5);
        vars__.push_back(psi_mean6);
        vars__.push_back(psi_mean7);
        vars__.push_back(psi_mean8);
        vars__.push_back(psi_mean9);
        vars__.push_back(psi_mean10);
        vars__.push_back(psi_mean11);
        vars__.push_back(psi_mean12);
        vars__.push_back(psi_mean13);
        vars__.push_back(psi_mean14);
        vars__.push_back(psi_mean15);
        vars__.push_back(psi_mean16);
        vars__.push_back(psi_mean17);
        vars__.push_back(psi_mean18);
        vars__.push_back(sd_h1);
        vars__.push_back(sd_h2);
        vars__.push_back(sd_h3);
        vars__.push_back(sd_h4);
        vars__.push_back(sd_h5);
        vars__.push_back(sd_h6);
        vars__.push_back(sd_h7);
        vars__.push_back(sd_h8);
        vars__.push_back(sd_h9);
        vars__.push_back(sd_h10);
        vars__.push_back(sd_h11);
        vars__.push_back(sd_h12);
        vars__.push_back(sd_h13);
        vars__.push_back(sd_h14);
        vars__.push_back(sd_h15);
        vars__.push_back(sd_h16);
        vars__.push_back(sd_h17);
        vars__.push_back(sd_h18);
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi1[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi2[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi3[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi4[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi5[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi6[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi7[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi8[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi9[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi10[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi11[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi12[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi13[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi14[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi15[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi16[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi17[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi18[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h1[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h2[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h3[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h4[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h5[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h6[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h7[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h8[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h9[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h10[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h11[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h12[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h13[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h14[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h15[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h16[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h17[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h18[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h1_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h2_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h3_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h4_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h5_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h6_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h7_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h8_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h9_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h10_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h11_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h12_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h13_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h14_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h15_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h16_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h17_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h18_holdout[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        validate_non_negative_index("mu", "n", n);
        vector_d mu(static_cast<Eigen::VectorXd::Index>(n));
        (void) mu;  // dummy to suppress unused var warning

        stan::math::initialize(mu, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu,DUMMY_VAR__);


        try {
            for (int i = 1; i <= n; ++i) {
                stan::math::assign(get_base1_lhs(mu,i,"mu",1), ((((((((((((((((((get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),1,"b_spline",2) * get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),2,"b_spline",2) * get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),3,"b_spline",2) * get_base1(h3,get_base1(block_data,i,"block_data",1),"h3",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),4,"b_spline",2) * get_base1(h4,get_base1(block_data,i,"block_data",1),"h4",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),5,"b_spline",2) * get_base1(h5,get_base1(block_data,i,"block_data",1),"h5",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),6,"b_spline",2) * get_base1(h6,get_base1(block_data,i,"block_data",1),"h6",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),7,"b_spline",2) * get_base1(h7,get_base1(block_data,i,"block_data",1),"h7",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),8,"b_spline",2) * get_base1(h8,get_base1(block_data,i,"block_data",1),"h8",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),9,"b_spline",2) * get_base1(h9,get_base1(block_data,i,"block_data",1),"h9",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),10,"b_spline",2) * get_base1(h10,get_base1(block_data,i,"block_data",1),"h10",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),11,"b_spline",2) * get_base1(h11,get_base1(block_data,i,"block_data",1),"h11",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),12,"b_spline",2) * get_base1(h12,get_base1(block_data,i,"block_data",1),"h12",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),13,"b_spline",2) * get_base1(h13,get_base1(block_data,i,"block_data",1),"h13",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),14,"b_spline",2) * get_base1(h14,get_base1(block_data,i,"block_data",1),"h14",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),15,"b_spline",2) * get_base1(h15,get_base1(block_data,i,"block_data",1),"h15",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),16,"b_spline",2) * get_base1(h16,get_base1(block_data,i,"block_data",1),"h16",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),17,"b_spline",2) * get_base1(h17,get_base1(block_data,i,"block_data",1),"h17",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),18,"b_spline",2) * get_base1(h18,get_base1(block_data,i,"block_data",1),"h18",1))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters
        for (int k_0__ = 0; k_0__ < n; ++k_0__) {
            vars__.push_back(mu[k_0__]);
        }

        if (!include_gqs__) return;
        // declare and define generated quantities
        validate_non_negative_index("mu_plot_growth", "n_plot", n_plot);
        validate_non_negative_index("mu_plot_growth", "n_block", n_block);
        matrix_d mu_plot_growth(static_cast<Eigen::VectorXd::Index>(n_plot),static_cast<Eigen::VectorXd::Index>(n_block));
        (void) mu_plot_growth;  // dummy to suppress unused var warning

        stan::math::initialize(mu_plot_growth, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu_plot_growth,DUMMY_VAR__);
        validate_non_negative_index("mu_plot_agr", "n_plot", n_plot);
        validate_non_negative_index("mu_plot_agr", "n_block", n_block);
        matrix_d mu_plot_agr(static_cast<Eigen::VectorXd::Index>(n_plot),static_cast<Eigen::VectorXd::Index>(n_block));
        (void) mu_plot_agr;  // dummy to suppress unused var warning

        stan::math::initialize(mu_plot_agr, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu_plot_agr,DUMMY_VAR__);
        validate_non_negative_index("mu_pred", "n_pred", n_pred);
        vector_d mu_pred(static_cast<Eigen::VectorXd::Index>(n_pred));
        (void) mu_pred;  // dummy to suppress unused var warning

        stan::math::initialize(mu_pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu_pred,DUMMY_VAR__);
        validate_non_negative_index("size_plot", "n_plot", n_plot);
        validate_non_negative_index("size_plot", "n_block", n_block);
        matrix_d size_plot(static_cast<Eigen::VectorXd::Index>(n_plot),static_cast<Eigen::VectorXd::Index>(n_block));
        (void) size_plot;  // dummy to suppress unused var warning

        stan::math::initialize(size_plot, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(size_plot,DUMMY_VAR__);
        validate_non_negative_index("size_plot_agr", "n_plot", n_plot);
        validate_non_negative_index("size_plot_agr", "n_block", n_block);
        matrix_d size_plot_agr(static_cast<Eigen::VectorXd::Index>(n_plot),static_cast<Eigen::VectorXd::Index>(n_block));
        (void) size_plot_agr;  // dummy to suppress unused var warning

        stan::math::initialize(size_plot_agr, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(size_plot_agr,DUMMY_VAR__);
        validate_non_negative_index("size_pred", "n_pred", n_pred);
        vector_d size_pred(static_cast<Eigen::VectorXd::Index>(n_pred));
        (void) size_pred;  // dummy to suppress unused var warning

        stan::math::initialize(size_pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(size_pred,DUMMY_VAR__);
        validate_non_negative_index("log_lik", "n", n);
        vector_d log_lik(static_cast<Eigen::VectorXd::Index>(n));
        (void) log_lik;  // dummy to suppress unused var warning

        stan::math::initialize(log_lik, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(log_lik,DUMMY_VAR__);


        try {
            for (int i = 1; i <= n_plot; ++i) {
                for (int j = 1; j <= n_block; ++j) {
                    stan::math::assign(get_base1_lhs(mu_plot_growth,i,j,"mu_plot_growth",1), ((((((((((((((((((get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),1,"b_spline_plot",3) * get_base1(h1,j,"h1",1)) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),2,"b_spline_plot",3) * get_base1(h2,j,"h2",1))) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),3,"b_spline_plot",3) * get_base1(h3,j,"h3",1))) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),4,"b_spline_plot",3) * get_base1(h4,j,"h4",1))) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),5,"b_spline_plot",3) * get_base1(h5,j,"h5",1))) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),6,"b_spline_plot",3) * get_base1(h6,j,"h6",1))) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),7,"b_spline_plot",3) * get_base1(h7,j,"h7",1))) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),8,"b_spline_plot",3) * get_base1(h8,j,"h8",1))) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),9,"b_spline_plot",3) * get_base1(h9,j,"h9",1))) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),10,"b_spline_plot",3) * get_base1(h10,j,"h10",1))) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),11,"b_spline_plot",3) * get_base1(h11,j,"h11",1))) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),12,"b_spline_plot",3) * get_base1(h12,j,"h12",1))) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),13,"b_spline_plot",3) * get_base1(h13,j,"h13",1))) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),14,"b_spline_plot",3) * get_base1(h14,j,"h14",1))) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),15,"b_spline_plot",3) * get_base1(h15,j,"h15",1))) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),16,"b_spline_plot",3) * get_base1(h16,j,"h16",1))) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),17,"b_spline_plot",3) * get_base1(h17,j,"h17",1))) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),18,"b_spline_plot",3) * get_base1(h18,j,"h18",1))));
                }
            }
            for (int i = 1; i <= n_plot; ++i) {
                for (int j = 1; j <= n_block; ++j) {
                    stan::math::assign(get_base1_lhs(size_plot,i,j,"size_plot",1), exp(get_base1(mu_plot_growth,i,j,"mu_plot_growth",1)));
                }
            }
            for (int i = 1; i <= n_plot; ++i) {
                for (int j = 1; j <= n_block; ++j) {
                    stan::math::assign(get_base1_lhs(mu_plot_agr,i,j,"mu_plot_agr",1), ((((((((((((((((((get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),1,"b_spline_deriv",3) * get_base1(h1,j,"h1",1)) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),2,"b_spline_deriv",3) * get_base1(h2,j,"h2",1))) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),3,"b_spline_deriv",3) * get_base1(h3,j,"h3",1))) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),4,"b_spline_deriv",3) * get_base1(h4,j,"h4",1))) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),5,"b_spline_deriv",3) * get_base1(h5,j,"h5",1))) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),6,"b_spline_deriv",3) * get_base1(h6,j,"h6",1))) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),7,"b_spline_deriv",3) * get_base1(h7,j,"h7",1))) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),8,"b_spline_deriv",3) * get_base1(h8,j,"h8",1))) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),9,"b_spline_deriv",3) * get_base1(h9,j,"h9",1))) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),10,"b_spline_deriv",3) * get_base1(h10,j,"h10",1))) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),11,"b_spline_deriv",3) * get_base1(h11,j,"h11",1))) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),12,"b_spline_deriv",3) * get_base1(h12,j,"h12",1))) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),13,"b_spline_deriv",3) * get_base1(h13,j,"h13",1))) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),14,"b_spline_deriv",3) * get_base1(h14,j,"h14",1))) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),15,"b_spline_deriv",3) * get_base1(h15,j,"h15",1))) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),16,"b_spline_deriv",3) * get_base1(h16,j,"h16",1))) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),17,"b_spline_deriv",3) * get_base1(h17,j,"h17",1))) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),18,"b_spline_deriv",3) * get_base1(h18,j,"h18",1))));
                }
            }
            for (int i = 1; i <= n_plot; ++i) {
                for (int j = 1; j <= n_block; ++j) {
                    stan::math::assign(get_base1_lhs(size_plot_agr,i,j,"size_plot_agr",1), exp(get_base1(mu_plot_agr,i,j,"mu_plot_agr",1)));
                }
            }
            for (int i = 1; i <= n_pred; ++i) {
                stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), ((((((((((((((((((get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),1,"b_spline_pred",2) * get_base1(h1_holdout,get_base1(block_holdout,i,"block_holdout",1),"h1_holdout",1)) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),2,"b_spline_pred",2) * get_base1(h2_holdout,get_base1(block_holdout,i,"block_holdout",1),"h2_holdout",1))) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),3,"b_spline_pred",2) * get_base1(h3_holdout,get_base1(block_holdout,i,"block_holdout",1),"h3_holdout",1))) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),4,"b_spline_pred",2) * get_base1(h4_holdout,get_base1(block_holdout,i,"block_holdout",1),"h4_holdout",1))) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),5,"b_spline_pred",2) * get_base1(h5_holdout,get_base1(block_holdout,i,"block_holdout",1),"h5_holdout",1))) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),6,"b_spline_pred",2) * get_base1(h6_holdout,get_base1(block_holdout,i,"block_holdout",1),"h6_holdout",1))) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),7,"b_spline_pred",2) * get_base1(h7_holdout,get_base1(block_holdout,i,"block_holdout",1),"h7_holdout",1))) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),8,"b_spline_pred",2) * get_base1(h8_holdout,get_base1(block_holdout,i,"block_holdout",1),"h8_holdout",1))) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),9,"b_spline_pred",2) * get_base1(h9_holdout,get_base1(block_holdout,i,"block_holdout",1),"h9_holdout",1))) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),10,"b_spline_pred",2) * get_base1(h10_holdout,get_base1(block_holdout,i,"block_holdout",1),"h10_holdout",1))) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),11,"b_spline_pred",2) * get_base1(h11_holdout,get_base1(block_holdout,i,"block_holdout",1),"h11_holdout",1))) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),12,"b_spline_pred",2) * get_base1(h12_holdout,get_base1(block_holdout,i,"block_holdout",1),"h12_holdout",1))) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),13,"b_spline_pred",2) * get_base1(h13_holdout,get_base1(block_holdout,i,"block_holdout",1),"h13_holdout",1))) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),14,"b_spline_pred",2) * get_base1(h14_holdout,get_base1(block_holdout,i,"block_holdout",1),"h14_holdout",1))) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),15,"b_spline_pred",2) * get_base1(h15_holdout,get_base1(block_holdout,i,"block_holdout",1),"h15_holdout",1))) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),16,"b_spline_pred",2) * get_base1(h16_holdout,get_base1(block_holdout,i,"block_holdout",1),"h16_holdout",1))) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),17,"b_spline_pred",2) * get_base1(h17_holdout,get_base1(block_holdout,i,"block_holdout",1),"h17_holdout",1))) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),18,"b_spline_pred",2) * get_base1(h18_holdout,get_base1(block_holdout,i,"block_holdout",1),"h18_holdout",1))));
            }
            for (int i = 1; i <= n_pred; ++i) {
                stan::math::assign(get_base1_lhs(size_pred,i,"size_pred",1), exp(get_base1(mu_pred,i,"mu_pred",1)));
            }
            for (int i = 1; i <= n; ++i) {
                stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), normal_log(log(get_base1(size_data,i,"size_data",1)),get_base1(mu,i,"mu",1),sigma_obs));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities
        check_greater_or_equal(function__,"size_plot",size_plot,0);
        check_greater_or_equal(function__,"size_plot_agr",size_plot_agr,0);
        check_greater_or_equal(function__,"size_pred",size_pred,0);

        // write generated quantities
        for (int k_1__ = 0; k_1__ < n_block; ++k_1__) {
            for (int k_0__ = 0; k_0__ < n_plot; ++k_0__) {
                vars__.push_back(mu_plot_growth(k_0__, k_1__));
            }
        }
        for (int k_1__ = 0; k_1__ < n_block; ++k_1__) {
            for (int k_0__ = 0; k_0__ < n_plot; ++k_0__) {
                vars__.push_back(mu_plot_agr(k_0__, k_1__));
            }
        }
        for (int k_0__ = 0; k_0__ < n_pred; ++k_0__) {
            vars__.push_back(mu_pred[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < n_block; ++k_1__) {
            for (int k_0__ = 0; k_0__ < n_plot; ++k_0__) {
                vars__.push_back(size_plot(k_0__, k_1__));
            }
        }
        for (int k_1__ = 0; k_1__ < n_block; ++k_1__) {
            for (int k_0__ = 0; k_0__ < n_plot; ++k_0__) {
                vars__.push_back(size_plot_agr(k_0__, k_1__));
            }
        }
        for (int k_0__ = 0; k_0__ < n_pred; ++k_0__) {
            vars__.push_back(size_pred[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_spline_nopred_blockmod";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_obs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd4";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd5";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd6";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd7";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd8";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd9";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd10";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd11";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd12";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd13";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd14";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd15";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd16";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd17";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd18";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean4";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean5";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean6";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean7";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean8";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean9";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean10";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean11";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean12";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean13";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean14";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean15";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean16";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean17";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean18";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h4";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h5";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h6";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h7";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h8";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h9";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h10";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h11";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h12";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h13";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h14";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h15";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h16";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h17";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h18";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi4" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi5" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi6" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi7" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi8" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi9" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi10" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi11" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi12" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi13" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi14" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi15" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi16" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi17" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi18" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h4" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h5" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h6" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h7" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h8" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h9" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h10" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h11" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h12" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h13" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h14" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h15" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h16" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h17" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h18" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h1_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h2_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h3_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h4_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h5_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h6_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h7_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h8_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h9_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h10_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h11_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h12_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h13_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h14_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h15_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h16_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h17_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h18_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= n_block; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_plot_growth" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= n_block; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_plot_agr" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= n_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= n_block; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "size_plot" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= n_block; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "size_plot_agr" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= n_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_obs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd4";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd5";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd6";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd7";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd8";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd9";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd10";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd11";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd12";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd13";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd14";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd15";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd16";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd17";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "block_sd18";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean4";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean5";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean6";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean7";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean8";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean9";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean10";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean11";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean12";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean13";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean14";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean15";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean16";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean17";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "psi_mean18";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h4";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h5";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h6";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h7";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h8";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h9";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h10";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h11";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h12";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h13";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h14";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h15";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h16";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h17";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h18";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi4" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi5" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi6" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi7" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi8" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi9" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi10" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi11" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi12" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi13" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi14" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi15" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi16" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi17" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi18" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h4" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h5" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h6" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h7" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h8" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h9" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h10" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h11" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h12" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h13" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h14" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h15" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h16" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h17" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h18" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h1_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h2_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h3_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h4_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h5_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h6_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h7_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h8_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h9_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h10_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h11_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h12_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h13_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h14_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h15_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h16_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h17_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h18_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= n_block; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_plot_growth" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= n_block; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_plot_agr" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= n_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= n_block; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "size_plot" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= n_block; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "size_plot_agr" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= n_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}




// Code generated by Stan version 2.16.0

#include <stan/model/model_header.hpp>

namespace model_spline_nopred_onemod_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_spline_nopred_onemod");
    reader.add_event(93, 93, "end", "model_spline_nopred_onemod");
    return reader;
}

class model_spline_nopred_onemod : public prob_grad {
private:
    int n;
    int n_pred;
    vector_d size_data;
    vector_d age;
    int n_age;
    int n_age_pred;
    int n_k;
    vector<int> age_index;
    vector<int> age_index_pred;
    vector<row_vector_d> b_spline;
    vector<row_vector_d> b_spline_pred;
    int n_plot;
    vector_d age_plot;
    vector<vector<row_vector_d> > b_spline_plot;
    vector<vector<row_vector_d> > b_spline_deriv;
public:
    model_spline_nopred_onemod(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_spline_nopred_onemod(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_spline_nopred_onemod_namespace::model_spline_nopred_onemod";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "n", "int", context__.to_vec());
        n = int(0);
        vals_i__ = context__.vals_i("n");
        pos__ = 0;
        n = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_pred", "int", context__.to_vec());
        n_pred = int(0);
        vals_i__ = context__.vals_i("n_pred");
        pos__ = 0;
        n_pred = vals_i__[pos__++];
        validate_non_negative_index("size_data", "n", n);
        context__.validate_dims("data initialization", "size_data", "vector_d", context__.to_vec(n));
        validate_non_negative_index("size_data", "n", n);
        size_data = vector_d(static_cast<Eigen::VectorXd::Index>(n));
        vals_r__ = context__.vals_r("size_data");
        pos__ = 0;
        size_t size_data_i_vec_lim__ = n;
        for (size_t i_vec__ = 0; i_vec__ < size_data_i_vec_lim__; ++i_vec__) {
            size_data[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("age", "n", n);
        context__.validate_dims("data initialization", "age", "vector_d", context__.to_vec(n));
        validate_non_negative_index("age", "n", n);
        age = vector_d(static_cast<Eigen::VectorXd::Index>(n));
        vals_r__ = context__.vals_r("age");
        pos__ = 0;
        size_t age_i_vec_lim__ = n;
        for (size_t i_vec__ = 0; i_vec__ < age_i_vec_lim__; ++i_vec__) {
            age[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "n_age", "int", context__.to_vec());
        n_age = int(0);
        vals_i__ = context__.vals_i("n_age");
        pos__ = 0;
        n_age = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_age_pred", "int", context__.to_vec());
        n_age_pred = int(0);
        vals_i__ = context__.vals_i("n_age_pred");
        pos__ = 0;
        n_age_pred = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_k", "int", context__.to_vec());
        n_k = int(0);
        vals_i__ = context__.vals_i("n_k");
        pos__ = 0;
        n_k = vals_i__[pos__++];
        validate_non_negative_index("age_index", "n", n);
        context__.validate_dims("data initialization", "age_index", "int", context__.to_vec(n));
        validate_non_negative_index("age_index", "n", n);
        age_index = std::vector<int>(n,int(0));
        vals_i__ = context__.vals_i("age_index");
        pos__ = 0;
        size_t age_index_limit_0__ = n;
        for (size_t i_0__ = 0; i_0__ < age_index_limit_0__; ++i_0__) {
            age_index[i_0__] = vals_i__[pos__++];
        }
        validate_non_negative_index("age_index_pred", "n_pred", n_pred);
        context__.validate_dims("data initialization", "age_index_pred", "int", context__.to_vec(n_pred));
        validate_non_negative_index("age_index_pred", "n_pred", n_pred);
        age_index_pred = std::vector<int>(n_pred,int(0));
        vals_i__ = context__.vals_i("age_index_pred");
        pos__ = 0;
        size_t age_index_pred_limit_0__ = n_pred;
        for (size_t i_0__ = 0; i_0__ < age_index_pred_limit_0__; ++i_0__) {
            age_index_pred[i_0__] = vals_i__[pos__++];
        }
        validate_non_negative_index("b_spline", "n_age", n_age);
        validate_non_negative_index("b_spline", "n_k", n_k);
        context__.validate_dims("data initialization", "b_spline", "row_vector_d", context__.to_vec(n_age,n_k));
        validate_non_negative_index("b_spline", "n_age", n_age);
        validate_non_negative_index("b_spline", "n_k", n_k);
        b_spline = std::vector<row_vector_d>(n_age,row_vector_d(static_cast<Eigen::VectorXd::Index>(n_k)));
        vals_r__ = context__.vals_r("b_spline");
        pos__ = 0;
        size_t b_spline_i_vec_lim__ = n_k;
        for (size_t i_vec__ = 0; i_vec__ < b_spline_i_vec_lim__; ++i_vec__) {
            size_t b_spline_limit_0__ = n_age;
            for (size_t i_0__ = 0; i_0__ < b_spline_limit_0__; ++i_0__) {
                b_spline[i_0__][i_vec__] = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("b_spline_pred", "n_age_pred", n_age_pred);
        validate_non_negative_index("b_spline_pred", "n_k", n_k);
        context__.validate_dims("data initialization", "b_spline_pred", "row_vector_d", context__.to_vec(n_age_pred,n_k));
        validate_non_negative_index("b_spline_pred", "n_age_pred", n_age_pred);
        validate_non_negative_index("b_spline_pred", "n_k", n_k);
        b_spline_pred = std::vector<row_vector_d>(n_age_pred,row_vector_d(static_cast<Eigen::VectorXd::Index>(n_k)));
        vals_r__ = context__.vals_r("b_spline_pred");
        pos__ = 0;
        size_t b_spline_pred_i_vec_lim__ = n_k;
        for (size_t i_vec__ = 0; i_vec__ < b_spline_pred_i_vec_lim__; ++i_vec__) {
            size_t b_spline_pred_limit_0__ = n_age_pred;
            for (size_t i_0__ = 0; i_0__ < b_spline_pred_limit_0__; ++i_0__) {
                b_spline_pred[i_0__][i_vec__] = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "n_plot", "int", context__.to_vec());
        n_plot = int(0);
        vals_i__ = context__.vals_i("n_plot");
        pos__ = 0;
        n_plot = vals_i__[pos__++];
        validate_non_negative_index("age_plot", "n_plot", n_plot);
        context__.validate_dims("data initialization", "age_plot", "vector_d", context__.to_vec(n_plot));
        validate_non_negative_index("age_plot", "n_plot", n_plot);
        age_plot = vector_d(static_cast<Eigen::VectorXd::Index>(n_plot));
        vals_r__ = context__.vals_r("age_plot");
        pos__ = 0;
        size_t age_plot_i_vec_lim__ = n_plot;
        for (size_t i_vec__ = 0; i_vec__ < age_plot_i_vec_lim__; ++i_vec__) {
            age_plot[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("b_spline_plot", "n_plot", n_plot);
        validate_non_negative_index("b_spline_plot", "1", 1);
        validate_non_negative_index("b_spline_plot", "n_k", n_k);
        context__.validate_dims("data initialization", "b_spline_plot", "row_vector_d", context__.to_vec(n_plot,1,n_k));
        validate_non_negative_index("b_spline_plot", "n_plot", n_plot);
        validate_non_negative_index("b_spline_plot", "1", 1);
        validate_non_negative_index("b_spline_plot", "n_k", n_k);
        b_spline_plot = std::vector<std::vector<row_vector_d> >(n_plot,std::vector<row_vector_d>(1,row_vector_d(static_cast<Eigen::VectorXd::Index>(n_k))));
        vals_r__ = context__.vals_r("b_spline_plot");
        pos__ = 0;
        size_t b_spline_plot_i_vec_lim__ = n_k;
        for (size_t i_vec__ = 0; i_vec__ < b_spline_plot_i_vec_lim__; ++i_vec__) {
            size_t b_spline_plot_limit_1__ = 1;
            for (size_t i_1__ = 0; i_1__ < b_spline_plot_limit_1__; ++i_1__) {
                size_t b_spline_plot_limit_0__ = n_plot;
                for (size_t i_0__ = 0; i_0__ < b_spline_plot_limit_0__; ++i_0__) {
                    b_spline_plot[i_0__][i_1__][i_vec__] = vals_r__[pos__++];
                }
            }
        }
        validate_non_negative_index("b_spline_deriv", "n_plot", n_plot);
        validate_non_negative_index("b_spline_deriv", "1", 1);
        validate_non_negative_index("b_spline_deriv", "n_k", n_k);
        context__.validate_dims("data initialization", "b_spline_deriv", "row_vector_d", context__.to_vec(n_plot,1,n_k));
        validate_non_negative_index("b_spline_deriv", "n_plot", n_plot);
        validate_non_negative_index("b_spline_deriv", "1", 1);
        validate_non_negative_index("b_spline_deriv", "n_k", n_k);
        b_spline_deriv = std::vector<std::vector<row_vector_d> >(n_plot,std::vector<row_vector_d>(1,row_vector_d(static_cast<Eigen::VectorXd::Index>(n_k))));
        vals_r__ = context__.vals_r("b_spline_deriv");
        pos__ = 0;
        size_t b_spline_deriv_i_vec_lim__ = n_k;
        for (size_t i_vec__ = 0; i_vec__ < b_spline_deriv_i_vec_lim__; ++i_vec__) {
            size_t b_spline_deriv_limit_1__ = 1;
            for (size_t i_1__ = 0; i_1__ < b_spline_deriv_limit_1__; ++i_1__) {
                size_t b_spline_deriv_limit_0__ = n_plot;
                for (size_t i_0__ = 0; i_0__ < b_spline_deriv_limit_0__; ++i_0__) {
                    b_spline_deriv[i_0__][i_1__][i_vec__] = vals_r__[pos__++];
                }
            }
        }

        // validate, data variables
        check_greater_or_equal(function__,"n",n,0);
        check_greater_or_equal(function__,"n_pred",n_pred,0);
        check_greater_or_equal(function__,"size_data",size_data,0);
        check_greater_or_equal(function__,"n_age",n_age,0);
        check_greater_or_equal(function__,"n_age_pred",n_age_pred,0);
        check_greater_or_equal(function__,"n_k",n_k,0);
        for (int k0__ = 0; k0__ < n; ++k0__) {
            check_greater_or_equal(function__,"age_index[k0__]",age_index[k0__],0);
        }
        for (int k0__ = 0; k0__ < n_pred; ++k0__) {
            check_greater_or_equal(function__,"age_index_pred[k0__]",age_index_pred[k0__],0);
        }
        check_greater_or_equal(function__,"n_plot",n_plot,0);
        // initialize data variables

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // validate, set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
    }

    ~model_spline_nopred_onemod() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("sigma_obs")))
            throw std::runtime_error("variable sigma_obs missing");
        vals_r__ = context__.vals_r("sigma_obs");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma_obs", "double", context__.to_vec());
        // generate_declaration sigma_obs
        double sigma_obs(0);
        sigma_obs = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma_obs);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_obs: ") + e.what());
        }

        if (!(context__.contains_r("h1")))
            throw std::runtime_error("variable h1 missing");
        vals_r__ = context__.vals_r("h1");
        pos__ = 0U;
        context__.validate_dims("initialization", "h1", "double", context__.to_vec());
        // generate_declaration h1
        double h1(0);
        h1 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h1: ") + e.what());
        }

        if (!(context__.contains_r("h2")))
            throw std::runtime_error("variable h2 missing");
        vals_r__ = context__.vals_r("h2");
        pos__ = 0U;
        context__.validate_dims("initialization", "h2", "double", context__.to_vec());
        // generate_declaration h2
        double h2(0);
        h2 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h2: ") + e.what());
        }

        if (!(context__.contains_r("h3")))
            throw std::runtime_error("variable h3 missing");
        vals_r__ = context__.vals_r("h3");
        pos__ = 0U;
        context__.validate_dims("initialization", "h3", "double", context__.to_vec());
        // generate_declaration h3
        double h3(0);
        h3 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h3);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h3: ") + e.what());
        }

        if (!(context__.contains_r("h4")))
            throw std::runtime_error("variable h4 missing");
        vals_r__ = context__.vals_r("h4");
        pos__ = 0U;
        context__.validate_dims("initialization", "h4", "double", context__.to_vec());
        // generate_declaration h4
        double h4(0);
        h4 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h4);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h4: ") + e.what());
        }

        if (!(context__.contains_r("h5")))
            throw std::runtime_error("variable h5 missing");
        vals_r__ = context__.vals_r("h5");
        pos__ = 0U;
        context__.validate_dims("initialization", "h5", "double", context__.to_vec());
        // generate_declaration h5
        double h5(0);
        h5 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h5);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h5: ") + e.what());
        }

        if (!(context__.contains_r("h6")))
            throw std::runtime_error("variable h6 missing");
        vals_r__ = context__.vals_r("h6");
        pos__ = 0U;
        context__.validate_dims("initialization", "h6", "double", context__.to_vec());
        // generate_declaration h6
        double h6(0);
        h6 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h6);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h6: ") + e.what());
        }

        if (!(context__.contains_r("h7")))
            throw std::runtime_error("variable h7 missing");
        vals_r__ = context__.vals_r("h7");
        pos__ = 0U;
        context__.validate_dims("initialization", "h7", "double", context__.to_vec());
        // generate_declaration h7
        double h7(0);
        h7 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h7);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h7: ") + e.what());
        }

        if (!(context__.contains_r("h8")))
            throw std::runtime_error("variable h8 missing");
        vals_r__ = context__.vals_r("h8");
        pos__ = 0U;
        context__.validate_dims("initialization", "h8", "double", context__.to_vec());
        // generate_declaration h8
        double h8(0);
        h8 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h8);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h8: ") + e.what());
        }

        if (!(context__.contains_r("h9")))
            throw std::runtime_error("variable h9 missing");
        vals_r__ = context__.vals_r("h9");
        pos__ = 0U;
        context__.validate_dims("initialization", "h9", "double", context__.to_vec());
        // generate_declaration h9
        double h9(0);
        h9 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h9);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h9: ") + e.what());
        }

        if (!(context__.contains_r("h10")))
            throw std::runtime_error("variable h10 missing");
        vals_r__ = context__.vals_r("h10");
        pos__ = 0U;
        context__.validate_dims("initialization", "h10", "double", context__.to_vec());
        // generate_declaration h10
        double h10(0);
        h10 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h10);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h10: ") + e.what());
        }

        if (!(context__.contains_r("h11")))
            throw std::runtime_error("variable h11 missing");
        vals_r__ = context__.vals_r("h11");
        pos__ = 0U;
        context__.validate_dims("initialization", "h11", "double", context__.to_vec());
        // generate_declaration h11
        double h11(0);
        h11 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h11);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h11: ") + e.what());
        }

        if (!(context__.contains_r("h12")))
            throw std::runtime_error("variable h12 missing");
        vals_r__ = context__.vals_r("h12");
        pos__ = 0U;
        context__.validate_dims("initialization", "h12", "double", context__.to_vec());
        // generate_declaration h12
        double h12(0);
        h12 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h12);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h12: ") + e.what());
        }

        if (!(context__.contains_r("h13")))
            throw std::runtime_error("variable h13 missing");
        vals_r__ = context__.vals_r("h13");
        pos__ = 0U;
        context__.validate_dims("initialization", "h13", "double", context__.to_vec());
        // generate_declaration h13
        double h13(0);
        h13 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h13);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h13: ") + e.what());
        }

        if (!(context__.contains_r("h14")))
            throw std::runtime_error("variable h14 missing");
        vals_r__ = context__.vals_r("h14");
        pos__ = 0U;
        context__.validate_dims("initialization", "h14", "double", context__.to_vec());
        // generate_declaration h14
        double h14(0);
        h14 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h14);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h14: ") + e.what());
        }

        if (!(context__.contains_r("h15")))
            throw std::runtime_error("variable h15 missing");
        vals_r__ = context__.vals_r("h15");
        pos__ = 0U;
        context__.validate_dims("initialization", "h15", "double", context__.to_vec());
        // generate_declaration h15
        double h15(0);
        h15 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h15);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h15: ") + e.what());
        }

        if (!(context__.contains_r("h16")))
            throw std::runtime_error("variable h16 missing");
        vals_r__ = context__.vals_r("h16");
        pos__ = 0U;
        context__.validate_dims("initialization", "h16", "double", context__.to_vec());
        // generate_declaration h16
        double h16(0);
        h16 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h16);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h16: ") + e.what());
        }

        if (!(context__.contains_r("h17")))
            throw std::runtime_error("variable h17 missing");
        vals_r__ = context__.vals_r("h17");
        pos__ = 0U;
        context__.validate_dims("initialization", "h17", "double", context__.to_vec());
        // generate_declaration h17
        double h17(0);
        h17 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h17);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h17: ") + e.what());
        }

        if (!(context__.contains_r("h18")))
            throw std::runtime_error("variable h18 missing");
        vals_r__ = context__.vals_r("h18");
        pos__ = 0U;
        context__.validate_dims("initialization", "h18", "double", context__.to_vec());
        // generate_declaration h18
        double h18(0);
        h18 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(h18);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h18: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        T__ sigma_obs;
        (void) sigma_obs;  // dummy to suppress unused var warning
        if (jacobian__)
            sigma_obs = in__.scalar_lb_constrain(0,lp__);
        else
            sigma_obs = in__.scalar_lb_constrain(0);

        T__ h1;
        (void) h1;  // dummy to suppress unused var warning
        if (jacobian__)
            h1 = in__.scalar_constrain(lp__);
        else
            h1 = in__.scalar_constrain();

        T__ h2;
        (void) h2;  // dummy to suppress unused var warning
        if (jacobian__)
            h2 = in__.scalar_constrain(lp__);
        else
            h2 = in__.scalar_constrain();

        T__ h3;
        (void) h3;  // dummy to suppress unused var warning
        if (jacobian__)
            h3 = in__.scalar_constrain(lp__);
        else
            h3 = in__.scalar_constrain();

        T__ h4;
        (void) h4;  // dummy to suppress unused var warning
        if (jacobian__)
            h4 = in__.scalar_constrain(lp__);
        else
            h4 = in__.scalar_constrain();

        T__ h5;
        (void) h5;  // dummy to suppress unused var warning
        if (jacobian__)
            h5 = in__.scalar_constrain(lp__);
        else
            h5 = in__.scalar_constrain();

        T__ h6;
        (void) h6;  // dummy to suppress unused var warning
        if (jacobian__)
            h6 = in__.scalar_constrain(lp__);
        else
            h6 = in__.scalar_constrain();

        T__ h7;
        (void) h7;  // dummy to suppress unused var warning
        if (jacobian__)
            h7 = in__.scalar_constrain(lp__);
        else
            h7 = in__.scalar_constrain();

        T__ h8;
        (void) h8;  // dummy to suppress unused var warning
        if (jacobian__)
            h8 = in__.scalar_constrain(lp__);
        else
            h8 = in__.scalar_constrain();

        T__ h9;
        (void) h9;  // dummy to suppress unused var warning
        if (jacobian__)
            h9 = in__.scalar_constrain(lp__);
        else
            h9 = in__.scalar_constrain();

        T__ h10;
        (void) h10;  // dummy to suppress unused var warning
        if (jacobian__)
            h10 = in__.scalar_constrain(lp__);
        else
            h10 = in__.scalar_constrain();

        T__ h11;
        (void) h11;  // dummy to suppress unused var warning
        if (jacobian__)
            h11 = in__.scalar_constrain(lp__);
        else
            h11 = in__.scalar_constrain();

        T__ h12;
        (void) h12;  // dummy to suppress unused var warning
        if (jacobian__)
            h12 = in__.scalar_constrain(lp__);
        else
            h12 = in__.scalar_constrain();

        T__ h13;
        (void) h13;  // dummy to suppress unused var warning
        if (jacobian__)
            h13 = in__.scalar_constrain(lp__);
        else
            h13 = in__.scalar_constrain();

        T__ h14;
        (void) h14;  // dummy to suppress unused var warning
        if (jacobian__)
            h14 = in__.scalar_constrain(lp__);
        else
            h14 = in__.scalar_constrain();

        T__ h15;
        (void) h15;  // dummy to suppress unused var warning
        if (jacobian__)
            h15 = in__.scalar_constrain(lp__);
        else
            h15 = in__.scalar_constrain();

        T__ h16;
        (void) h16;  // dummy to suppress unused var warning
        if (jacobian__)
            h16 = in__.scalar_constrain(lp__);
        else
            h16 = in__.scalar_constrain();

        T__ h17;
        (void) h17;  // dummy to suppress unused var warning
        if (jacobian__)
            h17 = in__.scalar_constrain(lp__);
        else
            h17 = in__.scalar_constrain();

        T__ h18;
        (void) h18;  // dummy to suppress unused var warning
        if (jacobian__)
            h18 = in__.scalar_constrain(lp__);
        else
            h18 = in__.scalar_constrain();


        // transformed parameters
        validate_non_negative_index("mu", "n", n);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  mu(static_cast<Eigen::VectorXd::Index>(n));
        (void) mu;  // dummy to suppress unused var warning

        stan::math::initialize(mu, DUMMY_VAR__);
        stan::math::fill(mu,DUMMY_VAR__);


        try {
            for (int i = 1; i <= n; ++i) {
                stan::math::assign(get_base1_lhs(mu,i,"mu",1), ((((((((((((((((((get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),1,"b_spline",2) * h1) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),2,"b_spline",2) * h2)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),3,"b_spline",2) * h3)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),4,"b_spline",2) * h4)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),5,"b_spline",2) * h5)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),6,"b_spline",2) * h6)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),7,"b_spline",2) * h7)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),8,"b_spline",2) * h8)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),9,"b_spline",2) * h9)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),10,"b_spline",2) * h10)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),11,"b_spline",2) * h11)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),12,"b_spline",2) * h12)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),13,"b_spline",2) * h13)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),14,"b_spline",2) * h14)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),15,"b_spline",2) * h15)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),16,"b_spline",2) * h16)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),17,"b_spline",2) * h17)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),18,"b_spline",2) * h18)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < n; ++i0__) {
            if (stan::math::is_uninitialized(mu(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: mu" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning

        // model body
        try {

            lp_accum__.add(normal_log<propto__>(log(size_data), mu, sigma_obs));
            lp_accum__.add(normal_log<propto__>(sigma_obs, 0, 2));
            lp_accum__.add(normal_log<propto__>(h1, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(h2, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(h3, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(h4, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(h5, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(h6, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(h7, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(h8, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(h9, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(h10, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(h11, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(h12, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(h13, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(h14, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(h15, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(h16, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(h17, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(h18, 0.0, 2.0));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("sigma_obs");
        names__.push_back("h1");
        names__.push_back("h2");
        names__.push_back("h3");
        names__.push_back("h4");
        names__.push_back("h5");
        names__.push_back("h6");
        names__.push_back("h7");
        names__.push_back("h8");
        names__.push_back("h9");
        names__.push_back("h10");
        names__.push_back("h11");
        names__.push_back("h12");
        names__.push_back("h13");
        names__.push_back("h14");
        names__.push_back("h15");
        names__.push_back("h16");
        names__.push_back("h17");
        names__.push_back("h18");
        names__.push_back("mu");
        names__.push_back("mu_plot_growth");
        names__.push_back("mu_plot_agr");
        names__.push_back("mu_pred");
        names__.push_back("size_plot");
        names__.push_back("size_plot_agr");
        names__.push_back("size_pred");
        names__.push_back("log_lik");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_spline_nopred_onemod_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double sigma_obs = in__.scalar_lb_constrain(0);
        double h1 = in__.scalar_constrain();
        double h2 = in__.scalar_constrain();
        double h3 = in__.scalar_constrain();
        double h4 = in__.scalar_constrain();
        double h5 = in__.scalar_constrain();
        double h6 = in__.scalar_constrain();
        double h7 = in__.scalar_constrain();
        double h8 = in__.scalar_constrain();
        double h9 = in__.scalar_constrain();
        double h10 = in__.scalar_constrain();
        double h11 = in__.scalar_constrain();
        double h12 = in__.scalar_constrain();
        double h13 = in__.scalar_constrain();
        double h14 = in__.scalar_constrain();
        double h15 = in__.scalar_constrain();
        double h16 = in__.scalar_constrain();
        double h17 = in__.scalar_constrain();
        double h18 = in__.scalar_constrain();
        vars__.push_back(sigma_obs);
        vars__.push_back(h1);
        vars__.push_back(h2);
        vars__.push_back(h3);
        vars__.push_back(h4);
        vars__.push_back(h5);
        vars__.push_back(h6);
        vars__.push_back(h7);
        vars__.push_back(h8);
        vars__.push_back(h9);
        vars__.push_back(h10);
        vars__.push_back(h11);
        vars__.push_back(h12);
        vars__.push_back(h13);
        vars__.push_back(h14);
        vars__.push_back(h15);
        vars__.push_back(h16);
        vars__.push_back(h17);
        vars__.push_back(h18);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        validate_non_negative_index("mu", "n", n);
        vector_d mu(static_cast<Eigen::VectorXd::Index>(n));
        (void) mu;  // dummy to suppress unused var warning

        stan::math::initialize(mu, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu,DUMMY_VAR__);


        try {
            for (int i = 1; i <= n; ++i) {
                stan::math::assign(get_base1_lhs(mu,i,"mu",1), ((((((((((((((((((get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),1,"b_spline",2) * h1) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),2,"b_spline",2) * h2)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),3,"b_spline",2) * h3)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),4,"b_spline",2) * h4)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),5,"b_spline",2) * h5)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),6,"b_spline",2) * h6)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),7,"b_spline",2) * h7)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),8,"b_spline",2) * h8)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),9,"b_spline",2) * h9)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),10,"b_spline",2) * h10)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),11,"b_spline",2) * h11)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),12,"b_spline",2) * h12)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),13,"b_spline",2) * h13)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),14,"b_spline",2) * h14)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),15,"b_spline",2) * h15)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),16,"b_spline",2) * h16)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),17,"b_spline",2) * h17)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),18,"b_spline",2) * h18)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters
        for (int k_0__ = 0; k_0__ < n; ++k_0__) {
            vars__.push_back(mu[k_0__]);
        }

        if (!include_gqs__) return;
        // declare and define generated quantities
        validate_non_negative_index("mu_plot_growth", "n_plot", n_plot);
        vector_d mu_plot_growth(static_cast<Eigen::VectorXd::Index>(n_plot));
        (void) mu_plot_growth;  // dummy to suppress unused var warning

        stan::math::initialize(mu_plot_growth, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu_plot_growth,DUMMY_VAR__);
        validate_non_negative_index("mu_plot_agr", "n_plot", n_plot);
        vector_d mu_plot_agr(static_cast<Eigen::VectorXd::Index>(n_plot));
        (void) mu_plot_agr;  // dummy to suppress unused var warning

        stan::math::initialize(mu_plot_agr, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu_plot_agr,DUMMY_VAR__);
        validate_non_negative_index("mu_pred", "n_pred", n_pred);
        vector_d mu_pred(static_cast<Eigen::VectorXd::Index>(n_pred));
        (void) mu_pred;  // dummy to suppress unused var warning

        stan::math::initialize(mu_pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu_pred,DUMMY_VAR__);
        validate_non_negative_index("size_plot", "n_plot", n_plot);
        vector_d size_plot(static_cast<Eigen::VectorXd::Index>(n_plot));
        (void) size_plot;  // dummy to suppress unused var warning

        stan::math::initialize(size_plot, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(size_plot,DUMMY_VAR__);
        validate_non_negative_index("size_plot_agr", "n_plot", n_plot);
        vector_d size_plot_agr(static_cast<Eigen::VectorXd::Index>(n_plot));
        (void) size_plot_agr;  // dummy to suppress unused var warning

        stan::math::initialize(size_plot_agr, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(size_plot_agr,DUMMY_VAR__);
        validate_non_negative_index("size_pred", "n_pred", n_pred);
        vector_d size_pred(static_cast<Eigen::VectorXd::Index>(n_pred));
        (void) size_pred;  // dummy to suppress unused var warning

        stan::math::initialize(size_pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(size_pred,DUMMY_VAR__);
        validate_non_negative_index("log_lik", "n", n);
        vector_d log_lik(static_cast<Eigen::VectorXd::Index>(n));
        (void) log_lik;  // dummy to suppress unused var warning

        stan::math::initialize(log_lik, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(log_lik,DUMMY_VAR__);


        try {
            for (int i = 1; i <= n_plot; ++i) {
                stan::math::assign(get_base1_lhs(mu_plot_growth,i,"mu_plot_growth",1), ((((((((((((((((((get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),1,"b_spline_plot",2),1,"b_spline_plot",3) * h1) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),1,"b_spline_plot",2),2,"b_spline_plot",3) * h2)) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),1,"b_spline_plot",2),3,"b_spline_plot",3) * h3)) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),1,"b_spline_plot",2),4,"b_spline_plot",3) * h4)) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),1,"b_spline_plot",2),5,"b_spline_plot",3) * h5)) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),1,"b_spline_plot",2),6,"b_spline_plot",3) * h6)) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),1,"b_spline_plot",2),7,"b_spline_plot",3) * h7)) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),1,"b_spline_plot",2),8,"b_spline_plot",3) * h8)) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),1,"b_spline_plot",2),9,"b_spline_plot",3) * h9)) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),1,"b_spline_plot",2),10,"b_spline_plot",3) * h10)) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),1,"b_spline_plot",2),11,"b_spline_plot",3) * h11)) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),1,"b_spline_plot",2),12,"b_spline_plot",3) * h12)) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),1,"b_spline_plot",2),13,"b_spline_plot",3) * h13)) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),1,"b_spline_plot",2),14,"b_spline_plot",3) * h14)) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),1,"b_spline_plot",2),15,"b_spline_plot",3) * h15)) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),1,"b_spline_plot",2),16,"b_spline_plot",3) * h16)) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),1,"b_spline_plot",2),17,"b_spline_plot",3) * h17)) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),1,"b_spline_plot",2),18,"b_spline_plot",3) * h18)));
            }
            for (int i = 1; i <= n_plot; ++i) {
                stan::math::assign(get_base1_lhs(size_plot,i,"size_plot",1), exp(get_base1(mu_plot_growth,i,"mu_plot_growth",1)));
            }
            for (int i = 1; i <= n_plot; ++i) {
                stan::math::assign(get_base1_lhs(mu_plot_agr,i,"mu_plot_agr",1), ((((((((((((((((((get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),1,"b_spline_deriv",2),1,"b_spline_deriv",3) * h1) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),1,"b_spline_deriv",2),2,"b_spline_deriv",3) * h2)) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),1,"b_spline_deriv",2),3,"b_spline_deriv",3) * h3)) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),1,"b_spline_deriv",2),4,"b_spline_deriv",3) * h4)) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),1,"b_spline_deriv",2),5,"b_spline_deriv",3) * h5)) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),1,"b_spline_deriv",2),6,"b_spline_deriv",3) * h6)) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),1,"b_spline_deriv",2),7,"b_spline_deriv",3) * h7)) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),1,"b_spline_deriv",2),8,"b_spline_deriv",3) * h8)) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),1,"b_spline_deriv",2),9,"b_spline_deriv",3) * h9)) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),1,"b_spline_deriv",2),10,"b_spline_deriv",3) * h10)) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),1,"b_spline_deriv",2),11,"b_spline_deriv",3) * h11)) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),1,"b_spline_deriv",2),12,"b_spline_deriv",3) * h12)) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),1,"b_spline_deriv",2),13,"b_spline_deriv",3) * h13)) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),1,"b_spline_deriv",2),14,"b_spline_deriv",3) * h14)) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),1,"b_spline_deriv",2),15,"b_spline_deriv",3) * h15)) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),1,"b_spline_deriv",2),16,"b_spline_deriv",3) * h16)) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),1,"b_spline_deriv",2),17,"b_spline_deriv",3) * h17)) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),1,"b_spline_deriv",2),18,"b_spline_deriv",3) * h18)));
            }
            for (int i = 1; i <= n_plot; ++i) {
                stan::math::assign(get_base1_lhs(size_plot_agr,i,"size_plot_agr",1), exp(get_base1(mu_plot_agr,i,"mu_plot_agr",1)));
            }
            for (int i = 1; i <= n_pred; ++i) {
                stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), ((((((((((((((((((get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),1,"b_spline_pred",2) * h1) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),2,"b_spline_pred",2) * h2)) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),3,"b_spline_pred",2) * h3)) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),4,"b_spline_pred",2) * h4)) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),5,"b_spline_pred",2) * h5)) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),6,"b_spline_pred",2) * h6)) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),7,"b_spline_pred",2) * h7)) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),8,"b_spline_pred",2) * h8)) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),9,"b_spline_pred",2) * h9)) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),10,"b_spline_pred",2) * h10)) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),11,"b_spline_pred",2) * h11)) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),12,"b_spline_pred",2) * h12)) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),13,"b_spline_pred",2) * h13)) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),14,"b_spline_pred",2) * h14)) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),15,"b_spline_pred",2) * h15)) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),16,"b_spline_pred",2) * h16)) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),17,"b_spline_pred",2) * h17)) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),18,"b_spline_pred",2) * h18)));
            }
            for (int i = 1; i <= n_pred; ++i) {
                stan::math::assign(get_base1_lhs(size_pred,i,"size_pred",1), exp(get_base1(mu_pred,i,"mu_pred",1)));
            }
            for (int i = 1; i <= n; ++i) {
                stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), normal_log(log(get_base1(size_data,i,"size_data",1)),get_base1(mu,i,"mu",1),sigma_obs));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities
        check_greater_or_equal(function__,"size_plot",size_plot,0);
        check_greater_or_equal(function__,"size_plot_agr",size_plot_agr,0);
        check_greater_or_equal(function__,"size_pred",size_pred,0);

        // write generated quantities
        for (int k_0__ = 0; k_0__ < n_plot; ++k_0__) {
            vars__.push_back(mu_plot_growth[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_plot; ++k_0__) {
            vars__.push_back(mu_plot_agr[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_pred; ++k_0__) {
            vars__.push_back(mu_pred[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_plot; ++k_0__) {
            vars__.push_back(size_plot[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_plot; ++k_0__) {
            vars__.push_back(size_plot_agr[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_pred; ++k_0__) {
            vars__.push_back(size_pred[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_spline_nopred_onemod";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_obs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h4";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h5";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h6";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h7";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h8";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h9";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h10";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h11";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h12";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h13";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h14";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h15";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h16";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h17";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h18";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_plot_growth" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_plot_agr" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_plot" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_plot_agr" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_obs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h4";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h5";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h6";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h7";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h8";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h9";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h10";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h11";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h12";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h13";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h14";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h15";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h16";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h17";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "h18";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_plot_growth" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_plot_agr" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_plot" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_plot_agr" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}




// Code generated by Stan version 2.16.0

#include <stan/model/model_header.hpp>

namespace model_spline_pred_blockmod_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_spline_pred_blockmod");
    reader.add_event(388, 388, "end", "model_spline_pred_blockmod");
    return reader;
}

class model_spline_pred_blockmod : public prob_grad {
private:
    int n;
    int n_pred;
    int n_block;
    int n_block_pred;
    int n_x1;
    int n_x2;
    int n_x3;
    int n_x4;
    int n_x5;
    int n_x6;
    int n_x7;
    int n_x8;
    int n_x9;
    int n_x10;
    int n_x11;
    int n_x12;
    int n_x13;
    int n_x14;
    int n_x15;
    int n_x16;
    int n_x17;
    int n_x18;
    vector_d size_data;
    int n_age;
    int n_age_pred;
    int n_k;
    vector<int> age_index;
    vector<int> age_index_pred;
    vector<int> block_data;
    vector<int> block_holdout;
    matrix_d x1;
    matrix_d x2;
    matrix_d x3;
    matrix_d x4;
    matrix_d x5;
    matrix_d x6;
    matrix_d x7;
    matrix_d x8;
    matrix_d x9;
    matrix_d x10;
    matrix_d x11;
    matrix_d x12;
    matrix_d x13;
    matrix_d x14;
    matrix_d x15;
    matrix_d x16;
    matrix_d x17;
    matrix_d x18;
    matrix_d x1_pred;
    matrix_d x2_pred;
    matrix_d x3_pred;
    matrix_d x4_pred;
    matrix_d x5_pred;
    matrix_d x6_pred;
    matrix_d x7_pred;
    matrix_d x8_pred;
    matrix_d x9_pred;
    matrix_d x10_pred;
    matrix_d x11_pred;
    matrix_d x12_pred;
    matrix_d x13_pred;
    matrix_d x14_pred;
    matrix_d x15_pred;
    matrix_d x16_pred;
    matrix_d x17_pred;
    matrix_d x18_pred;
    vector<row_vector_d> b_spline;
    vector<row_vector_d> b_spline_pred;
    int n_plot;
    vector_d age_plot;
    vector<vector<row_vector_d> > b_spline_plot;
    vector<vector<row_vector_d> > b_spline_deriv;
public:
    model_spline_pred_blockmod(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_spline_pred_blockmod(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_spline_pred_blockmod_namespace::model_spline_pred_blockmod";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "n", "int", context__.to_vec());
        n = int(0);
        vals_i__ = context__.vals_i("n");
        pos__ = 0;
        n = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_pred", "int", context__.to_vec());
        n_pred = int(0);
        vals_i__ = context__.vals_i("n_pred");
        pos__ = 0;
        n_pred = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_block", "int", context__.to_vec());
        n_block = int(0);
        vals_i__ = context__.vals_i("n_block");
        pos__ = 0;
        n_block = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_block_pred", "int", context__.to_vec());
        n_block_pred = int(0);
        vals_i__ = context__.vals_i("n_block_pred");
        pos__ = 0;
        n_block_pred = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_x1", "int", context__.to_vec());
        n_x1 = int(0);
        vals_i__ = context__.vals_i("n_x1");
        pos__ = 0;
        n_x1 = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_x2", "int", context__.to_vec());
        n_x2 = int(0);
        vals_i__ = context__.vals_i("n_x2");
        pos__ = 0;
        n_x2 = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_x3", "int", context__.to_vec());
        n_x3 = int(0);
        vals_i__ = context__.vals_i("n_x3");
        pos__ = 0;
        n_x3 = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_x4", "int", context__.to_vec());
        n_x4 = int(0);
        vals_i__ = context__.vals_i("n_x4");
        pos__ = 0;
        n_x4 = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_x5", "int", context__.to_vec());
        n_x5 = int(0);
        vals_i__ = context__.vals_i("n_x5");
        pos__ = 0;
        n_x5 = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_x6", "int", context__.to_vec());
        n_x6 = int(0);
        vals_i__ = context__.vals_i("n_x6");
        pos__ = 0;
        n_x6 = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_x7", "int", context__.to_vec());
        n_x7 = int(0);
        vals_i__ = context__.vals_i("n_x7");
        pos__ = 0;
        n_x7 = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_x8", "int", context__.to_vec());
        n_x8 = int(0);
        vals_i__ = context__.vals_i("n_x8");
        pos__ = 0;
        n_x8 = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_x9", "int", context__.to_vec());
        n_x9 = int(0);
        vals_i__ = context__.vals_i("n_x9");
        pos__ = 0;
        n_x9 = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_x10", "int", context__.to_vec());
        n_x10 = int(0);
        vals_i__ = context__.vals_i("n_x10");
        pos__ = 0;
        n_x10 = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_x11", "int", context__.to_vec());
        n_x11 = int(0);
        vals_i__ = context__.vals_i("n_x11");
        pos__ = 0;
        n_x11 = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_x12", "int", context__.to_vec());
        n_x12 = int(0);
        vals_i__ = context__.vals_i("n_x12");
        pos__ = 0;
        n_x12 = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_x13", "int", context__.to_vec());
        n_x13 = int(0);
        vals_i__ = context__.vals_i("n_x13");
        pos__ = 0;
        n_x13 = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_x14", "int", context__.to_vec());
        n_x14 = int(0);
        vals_i__ = context__.vals_i("n_x14");
        pos__ = 0;
        n_x14 = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_x15", "int", context__.to_vec());
        n_x15 = int(0);
        vals_i__ = context__.vals_i("n_x15");
        pos__ = 0;
        n_x15 = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_x16", "int", context__.to_vec());
        n_x16 = int(0);
        vals_i__ = context__.vals_i("n_x16");
        pos__ = 0;
        n_x16 = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_x17", "int", context__.to_vec());
        n_x17 = int(0);
        vals_i__ = context__.vals_i("n_x17");
        pos__ = 0;
        n_x17 = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_x18", "int", context__.to_vec());
        n_x18 = int(0);
        vals_i__ = context__.vals_i("n_x18");
        pos__ = 0;
        n_x18 = vals_i__[pos__++];
        validate_non_negative_index("size_data", "n", n);
        context__.validate_dims("data initialization", "size_data", "vector_d", context__.to_vec(n));
        validate_non_negative_index("size_data", "n", n);
        size_data = vector_d(static_cast<Eigen::VectorXd::Index>(n));
        vals_r__ = context__.vals_r("size_data");
        pos__ = 0;
        size_t size_data_i_vec_lim__ = n;
        for (size_t i_vec__ = 0; i_vec__ < size_data_i_vec_lim__; ++i_vec__) {
            size_data[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "n_age", "int", context__.to_vec());
        n_age = int(0);
        vals_i__ = context__.vals_i("n_age");
        pos__ = 0;
        n_age = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_age_pred", "int", context__.to_vec());
        n_age_pred = int(0);
        vals_i__ = context__.vals_i("n_age_pred");
        pos__ = 0;
        n_age_pred = vals_i__[pos__++];
        context__.validate_dims("data initialization", "n_k", "int", context__.to_vec());
        n_k = int(0);
        vals_i__ = context__.vals_i("n_k");
        pos__ = 0;
        n_k = vals_i__[pos__++];
        validate_non_negative_index("age_index", "n", n);
        context__.validate_dims("data initialization", "age_index", "int", context__.to_vec(n));
        validate_non_negative_index("age_index", "n", n);
        age_index = std::vector<int>(n,int(0));
        vals_i__ = context__.vals_i("age_index");
        pos__ = 0;
        size_t age_index_limit_0__ = n;
        for (size_t i_0__ = 0; i_0__ < age_index_limit_0__; ++i_0__) {
            age_index[i_0__] = vals_i__[pos__++];
        }
        validate_non_negative_index("age_index_pred", "n_pred", n_pred);
        context__.validate_dims("data initialization", "age_index_pred", "int", context__.to_vec(n_pred));
        validate_non_negative_index("age_index_pred", "n_pred", n_pred);
        age_index_pred = std::vector<int>(n_pred,int(0));
        vals_i__ = context__.vals_i("age_index_pred");
        pos__ = 0;
        size_t age_index_pred_limit_0__ = n_pred;
        for (size_t i_0__ = 0; i_0__ < age_index_pred_limit_0__; ++i_0__) {
            age_index_pred[i_0__] = vals_i__[pos__++];
        }
        validate_non_negative_index("block_data", "n", n);
        context__.validate_dims("data initialization", "block_data", "int", context__.to_vec(n));
        validate_non_negative_index("block_data", "n", n);
        block_data = std::vector<int>(n,int(0));
        vals_i__ = context__.vals_i("block_data");
        pos__ = 0;
        size_t block_data_limit_0__ = n;
        for (size_t i_0__ = 0; i_0__ < block_data_limit_0__; ++i_0__) {
            block_data[i_0__] = vals_i__[pos__++];
        }
        validate_non_negative_index("block_holdout", "n_pred", n_pred);
        context__.validate_dims("data initialization", "block_holdout", "int", context__.to_vec(n_pred));
        validate_non_negative_index("block_holdout", "n_pred", n_pred);
        block_holdout = std::vector<int>(n_pred,int(0));
        vals_i__ = context__.vals_i("block_holdout");
        pos__ = 0;
        size_t block_holdout_limit_0__ = n_pred;
        for (size_t i_0__ = 0; i_0__ < block_holdout_limit_0__; ++i_0__) {
            block_holdout[i_0__] = vals_i__[pos__++];
        }
        validate_non_negative_index("x1", "n_block", n_block);
        validate_non_negative_index("x1", "n_x1", n_x1);
        context__.validate_dims("data initialization", "x1", "matrix_d", context__.to_vec(n_block,n_x1));
        validate_non_negative_index("x1", "n_block", n_block);
        validate_non_negative_index("x1", "n_x1", n_x1);
        x1 = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block),static_cast<Eigen::VectorXd::Index>(n_x1));
        vals_r__ = context__.vals_r("x1");
        pos__ = 0;
        size_t x1_m_mat_lim__ = n_block;
        size_t x1_n_mat_lim__ = n_x1;
        for (size_t n_mat__ = 0; n_mat__ < x1_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x1_m_mat_lim__; ++m_mat__) {
                x1(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x2", "n_block", n_block);
        validate_non_negative_index("x2", "n_x2", n_x2);
        context__.validate_dims("data initialization", "x2", "matrix_d", context__.to_vec(n_block,n_x2));
        validate_non_negative_index("x2", "n_block", n_block);
        validate_non_negative_index("x2", "n_x2", n_x2);
        x2 = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block),static_cast<Eigen::VectorXd::Index>(n_x2));
        vals_r__ = context__.vals_r("x2");
        pos__ = 0;
        size_t x2_m_mat_lim__ = n_block;
        size_t x2_n_mat_lim__ = n_x2;
        for (size_t n_mat__ = 0; n_mat__ < x2_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x2_m_mat_lim__; ++m_mat__) {
                x2(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x3", "n_block", n_block);
        validate_non_negative_index("x3", "n_x3", n_x3);
        context__.validate_dims("data initialization", "x3", "matrix_d", context__.to_vec(n_block,n_x3));
        validate_non_negative_index("x3", "n_block", n_block);
        validate_non_negative_index("x3", "n_x3", n_x3);
        x3 = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block),static_cast<Eigen::VectorXd::Index>(n_x3));
        vals_r__ = context__.vals_r("x3");
        pos__ = 0;
        size_t x3_m_mat_lim__ = n_block;
        size_t x3_n_mat_lim__ = n_x3;
        for (size_t n_mat__ = 0; n_mat__ < x3_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x3_m_mat_lim__; ++m_mat__) {
                x3(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x4", "n_block", n_block);
        validate_non_negative_index("x4", "n_x4", n_x4);
        context__.validate_dims("data initialization", "x4", "matrix_d", context__.to_vec(n_block,n_x4));
        validate_non_negative_index("x4", "n_block", n_block);
        validate_non_negative_index("x4", "n_x4", n_x4);
        x4 = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block),static_cast<Eigen::VectorXd::Index>(n_x4));
        vals_r__ = context__.vals_r("x4");
        pos__ = 0;
        size_t x4_m_mat_lim__ = n_block;
        size_t x4_n_mat_lim__ = n_x4;
        for (size_t n_mat__ = 0; n_mat__ < x4_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x4_m_mat_lim__; ++m_mat__) {
                x4(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x5", "n_block", n_block);
        validate_non_negative_index("x5", "n_x5", n_x5);
        context__.validate_dims("data initialization", "x5", "matrix_d", context__.to_vec(n_block,n_x5));
        validate_non_negative_index("x5", "n_block", n_block);
        validate_non_negative_index("x5", "n_x5", n_x5);
        x5 = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block),static_cast<Eigen::VectorXd::Index>(n_x5));
        vals_r__ = context__.vals_r("x5");
        pos__ = 0;
        size_t x5_m_mat_lim__ = n_block;
        size_t x5_n_mat_lim__ = n_x5;
        for (size_t n_mat__ = 0; n_mat__ < x5_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x5_m_mat_lim__; ++m_mat__) {
                x5(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x6", "n_block", n_block);
        validate_non_negative_index("x6", "n_x6", n_x6);
        context__.validate_dims("data initialization", "x6", "matrix_d", context__.to_vec(n_block,n_x6));
        validate_non_negative_index("x6", "n_block", n_block);
        validate_non_negative_index("x6", "n_x6", n_x6);
        x6 = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block),static_cast<Eigen::VectorXd::Index>(n_x6));
        vals_r__ = context__.vals_r("x6");
        pos__ = 0;
        size_t x6_m_mat_lim__ = n_block;
        size_t x6_n_mat_lim__ = n_x6;
        for (size_t n_mat__ = 0; n_mat__ < x6_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x6_m_mat_lim__; ++m_mat__) {
                x6(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x7", "n_block", n_block);
        validate_non_negative_index("x7", "n_x7", n_x7);
        context__.validate_dims("data initialization", "x7", "matrix_d", context__.to_vec(n_block,n_x7));
        validate_non_negative_index("x7", "n_block", n_block);
        validate_non_negative_index("x7", "n_x7", n_x7);
        x7 = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block),static_cast<Eigen::VectorXd::Index>(n_x7));
        vals_r__ = context__.vals_r("x7");
        pos__ = 0;
        size_t x7_m_mat_lim__ = n_block;
        size_t x7_n_mat_lim__ = n_x7;
        for (size_t n_mat__ = 0; n_mat__ < x7_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x7_m_mat_lim__; ++m_mat__) {
                x7(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x8", "n_block", n_block);
        validate_non_negative_index("x8", "n_x8", n_x8);
        context__.validate_dims("data initialization", "x8", "matrix_d", context__.to_vec(n_block,n_x8));
        validate_non_negative_index("x8", "n_block", n_block);
        validate_non_negative_index("x8", "n_x8", n_x8);
        x8 = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block),static_cast<Eigen::VectorXd::Index>(n_x8));
        vals_r__ = context__.vals_r("x8");
        pos__ = 0;
        size_t x8_m_mat_lim__ = n_block;
        size_t x8_n_mat_lim__ = n_x8;
        for (size_t n_mat__ = 0; n_mat__ < x8_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x8_m_mat_lim__; ++m_mat__) {
                x8(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x9", "n_block", n_block);
        validate_non_negative_index("x9", "n_x9", n_x9);
        context__.validate_dims("data initialization", "x9", "matrix_d", context__.to_vec(n_block,n_x9));
        validate_non_negative_index("x9", "n_block", n_block);
        validate_non_negative_index("x9", "n_x9", n_x9);
        x9 = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block),static_cast<Eigen::VectorXd::Index>(n_x9));
        vals_r__ = context__.vals_r("x9");
        pos__ = 0;
        size_t x9_m_mat_lim__ = n_block;
        size_t x9_n_mat_lim__ = n_x9;
        for (size_t n_mat__ = 0; n_mat__ < x9_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x9_m_mat_lim__; ++m_mat__) {
                x9(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x10", "n_block", n_block);
        validate_non_negative_index("x10", "n_x10", n_x10);
        context__.validate_dims("data initialization", "x10", "matrix_d", context__.to_vec(n_block,n_x10));
        validate_non_negative_index("x10", "n_block", n_block);
        validate_non_negative_index("x10", "n_x10", n_x10);
        x10 = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block),static_cast<Eigen::VectorXd::Index>(n_x10));
        vals_r__ = context__.vals_r("x10");
        pos__ = 0;
        size_t x10_m_mat_lim__ = n_block;
        size_t x10_n_mat_lim__ = n_x10;
        for (size_t n_mat__ = 0; n_mat__ < x10_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x10_m_mat_lim__; ++m_mat__) {
                x10(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x11", "n_block", n_block);
        validate_non_negative_index("x11", "n_x11", n_x11);
        context__.validate_dims("data initialization", "x11", "matrix_d", context__.to_vec(n_block,n_x11));
        validate_non_negative_index("x11", "n_block", n_block);
        validate_non_negative_index("x11", "n_x11", n_x11);
        x11 = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block),static_cast<Eigen::VectorXd::Index>(n_x11));
        vals_r__ = context__.vals_r("x11");
        pos__ = 0;
        size_t x11_m_mat_lim__ = n_block;
        size_t x11_n_mat_lim__ = n_x11;
        for (size_t n_mat__ = 0; n_mat__ < x11_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x11_m_mat_lim__; ++m_mat__) {
                x11(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x12", "n_block", n_block);
        validate_non_negative_index("x12", "n_x12", n_x12);
        context__.validate_dims("data initialization", "x12", "matrix_d", context__.to_vec(n_block,n_x12));
        validate_non_negative_index("x12", "n_block", n_block);
        validate_non_negative_index("x12", "n_x12", n_x12);
        x12 = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block),static_cast<Eigen::VectorXd::Index>(n_x12));
        vals_r__ = context__.vals_r("x12");
        pos__ = 0;
        size_t x12_m_mat_lim__ = n_block;
        size_t x12_n_mat_lim__ = n_x12;
        for (size_t n_mat__ = 0; n_mat__ < x12_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x12_m_mat_lim__; ++m_mat__) {
                x12(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x13", "n_block", n_block);
        validate_non_negative_index("x13", "n_x13", n_x13);
        context__.validate_dims("data initialization", "x13", "matrix_d", context__.to_vec(n_block,n_x13));
        validate_non_negative_index("x13", "n_block", n_block);
        validate_non_negative_index("x13", "n_x13", n_x13);
        x13 = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block),static_cast<Eigen::VectorXd::Index>(n_x13));
        vals_r__ = context__.vals_r("x13");
        pos__ = 0;
        size_t x13_m_mat_lim__ = n_block;
        size_t x13_n_mat_lim__ = n_x13;
        for (size_t n_mat__ = 0; n_mat__ < x13_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x13_m_mat_lim__; ++m_mat__) {
                x13(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x14", "n_block", n_block);
        validate_non_negative_index("x14", "n_x14", n_x14);
        context__.validate_dims("data initialization", "x14", "matrix_d", context__.to_vec(n_block,n_x14));
        validate_non_negative_index("x14", "n_block", n_block);
        validate_non_negative_index("x14", "n_x14", n_x14);
        x14 = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block),static_cast<Eigen::VectorXd::Index>(n_x14));
        vals_r__ = context__.vals_r("x14");
        pos__ = 0;
        size_t x14_m_mat_lim__ = n_block;
        size_t x14_n_mat_lim__ = n_x14;
        for (size_t n_mat__ = 0; n_mat__ < x14_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x14_m_mat_lim__; ++m_mat__) {
                x14(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x15", "n_block", n_block);
        validate_non_negative_index("x15", "n_x15", n_x15);
        context__.validate_dims("data initialization", "x15", "matrix_d", context__.to_vec(n_block,n_x15));
        validate_non_negative_index("x15", "n_block", n_block);
        validate_non_negative_index("x15", "n_x15", n_x15);
        x15 = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block),static_cast<Eigen::VectorXd::Index>(n_x15));
        vals_r__ = context__.vals_r("x15");
        pos__ = 0;
        size_t x15_m_mat_lim__ = n_block;
        size_t x15_n_mat_lim__ = n_x15;
        for (size_t n_mat__ = 0; n_mat__ < x15_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x15_m_mat_lim__; ++m_mat__) {
                x15(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x16", "n_block", n_block);
        validate_non_negative_index("x16", "n_x16", n_x16);
        context__.validate_dims("data initialization", "x16", "matrix_d", context__.to_vec(n_block,n_x16));
        validate_non_negative_index("x16", "n_block", n_block);
        validate_non_negative_index("x16", "n_x16", n_x16);
        x16 = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block),static_cast<Eigen::VectorXd::Index>(n_x16));
        vals_r__ = context__.vals_r("x16");
        pos__ = 0;
        size_t x16_m_mat_lim__ = n_block;
        size_t x16_n_mat_lim__ = n_x16;
        for (size_t n_mat__ = 0; n_mat__ < x16_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x16_m_mat_lim__; ++m_mat__) {
                x16(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x17", "n_block", n_block);
        validate_non_negative_index("x17", "n_x17", n_x17);
        context__.validate_dims("data initialization", "x17", "matrix_d", context__.to_vec(n_block,n_x17));
        validate_non_negative_index("x17", "n_block", n_block);
        validate_non_negative_index("x17", "n_x17", n_x17);
        x17 = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block),static_cast<Eigen::VectorXd::Index>(n_x17));
        vals_r__ = context__.vals_r("x17");
        pos__ = 0;
        size_t x17_m_mat_lim__ = n_block;
        size_t x17_n_mat_lim__ = n_x17;
        for (size_t n_mat__ = 0; n_mat__ < x17_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x17_m_mat_lim__; ++m_mat__) {
                x17(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x18", "n_block", n_block);
        validate_non_negative_index("x18", "n_x18", n_x18);
        context__.validate_dims("data initialization", "x18", "matrix_d", context__.to_vec(n_block,n_x18));
        validate_non_negative_index("x18", "n_block", n_block);
        validate_non_negative_index("x18", "n_x18", n_x18);
        x18 = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block),static_cast<Eigen::VectorXd::Index>(n_x18));
        vals_r__ = context__.vals_r("x18");
        pos__ = 0;
        size_t x18_m_mat_lim__ = n_block;
        size_t x18_n_mat_lim__ = n_x18;
        for (size_t n_mat__ = 0; n_mat__ < x18_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x18_m_mat_lim__; ++m_mat__) {
                x18(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x1_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x1_pred", "n_x1", n_x1);
        context__.validate_dims("data initialization", "x1_pred", "matrix_d", context__.to_vec(n_block_pred,n_x1));
        validate_non_negative_index("x1_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x1_pred", "n_x1", n_x1);
        x1_pred = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block_pred),static_cast<Eigen::VectorXd::Index>(n_x1));
        vals_r__ = context__.vals_r("x1_pred");
        pos__ = 0;
        size_t x1_pred_m_mat_lim__ = n_block_pred;
        size_t x1_pred_n_mat_lim__ = n_x1;
        for (size_t n_mat__ = 0; n_mat__ < x1_pred_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x1_pred_m_mat_lim__; ++m_mat__) {
                x1_pred(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x2_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x2_pred", "n_x2", n_x2);
        context__.validate_dims("data initialization", "x2_pred", "matrix_d", context__.to_vec(n_block_pred,n_x2));
        validate_non_negative_index("x2_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x2_pred", "n_x2", n_x2);
        x2_pred = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block_pred),static_cast<Eigen::VectorXd::Index>(n_x2));
        vals_r__ = context__.vals_r("x2_pred");
        pos__ = 0;
        size_t x2_pred_m_mat_lim__ = n_block_pred;
        size_t x2_pred_n_mat_lim__ = n_x2;
        for (size_t n_mat__ = 0; n_mat__ < x2_pred_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x2_pred_m_mat_lim__; ++m_mat__) {
                x2_pred(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x3_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x3_pred", "n_x3", n_x3);
        context__.validate_dims("data initialization", "x3_pred", "matrix_d", context__.to_vec(n_block_pred,n_x3));
        validate_non_negative_index("x3_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x3_pred", "n_x3", n_x3);
        x3_pred = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block_pred),static_cast<Eigen::VectorXd::Index>(n_x3));
        vals_r__ = context__.vals_r("x3_pred");
        pos__ = 0;
        size_t x3_pred_m_mat_lim__ = n_block_pred;
        size_t x3_pred_n_mat_lim__ = n_x3;
        for (size_t n_mat__ = 0; n_mat__ < x3_pred_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x3_pred_m_mat_lim__; ++m_mat__) {
                x3_pred(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x4_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x4_pred", "n_x4", n_x4);
        context__.validate_dims("data initialization", "x4_pred", "matrix_d", context__.to_vec(n_block_pred,n_x4));
        validate_non_negative_index("x4_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x4_pred", "n_x4", n_x4);
        x4_pred = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block_pred),static_cast<Eigen::VectorXd::Index>(n_x4));
        vals_r__ = context__.vals_r("x4_pred");
        pos__ = 0;
        size_t x4_pred_m_mat_lim__ = n_block_pred;
        size_t x4_pred_n_mat_lim__ = n_x4;
        for (size_t n_mat__ = 0; n_mat__ < x4_pred_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x4_pred_m_mat_lim__; ++m_mat__) {
                x4_pred(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x5_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x5_pred", "n_x5", n_x5);
        context__.validate_dims("data initialization", "x5_pred", "matrix_d", context__.to_vec(n_block_pred,n_x5));
        validate_non_negative_index("x5_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x5_pred", "n_x5", n_x5);
        x5_pred = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block_pred),static_cast<Eigen::VectorXd::Index>(n_x5));
        vals_r__ = context__.vals_r("x5_pred");
        pos__ = 0;
        size_t x5_pred_m_mat_lim__ = n_block_pred;
        size_t x5_pred_n_mat_lim__ = n_x5;
        for (size_t n_mat__ = 0; n_mat__ < x5_pred_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x5_pred_m_mat_lim__; ++m_mat__) {
                x5_pred(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x6_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x6_pred", "n_x6", n_x6);
        context__.validate_dims("data initialization", "x6_pred", "matrix_d", context__.to_vec(n_block_pred,n_x6));
        validate_non_negative_index("x6_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x6_pred", "n_x6", n_x6);
        x6_pred = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block_pred),static_cast<Eigen::VectorXd::Index>(n_x6));
        vals_r__ = context__.vals_r("x6_pred");
        pos__ = 0;
        size_t x6_pred_m_mat_lim__ = n_block_pred;
        size_t x6_pred_n_mat_lim__ = n_x6;
        for (size_t n_mat__ = 0; n_mat__ < x6_pred_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x6_pred_m_mat_lim__; ++m_mat__) {
                x6_pred(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x7_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x7_pred", "n_x7", n_x7);
        context__.validate_dims("data initialization", "x7_pred", "matrix_d", context__.to_vec(n_block_pred,n_x7));
        validate_non_negative_index("x7_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x7_pred", "n_x7", n_x7);
        x7_pred = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block_pred),static_cast<Eigen::VectorXd::Index>(n_x7));
        vals_r__ = context__.vals_r("x7_pred");
        pos__ = 0;
        size_t x7_pred_m_mat_lim__ = n_block_pred;
        size_t x7_pred_n_mat_lim__ = n_x7;
        for (size_t n_mat__ = 0; n_mat__ < x7_pred_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x7_pred_m_mat_lim__; ++m_mat__) {
                x7_pred(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x8_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x8_pred", "n_x8", n_x8);
        context__.validate_dims("data initialization", "x8_pred", "matrix_d", context__.to_vec(n_block_pred,n_x8));
        validate_non_negative_index("x8_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x8_pred", "n_x8", n_x8);
        x8_pred = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block_pred),static_cast<Eigen::VectorXd::Index>(n_x8));
        vals_r__ = context__.vals_r("x8_pred");
        pos__ = 0;
        size_t x8_pred_m_mat_lim__ = n_block_pred;
        size_t x8_pred_n_mat_lim__ = n_x8;
        for (size_t n_mat__ = 0; n_mat__ < x8_pred_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x8_pred_m_mat_lim__; ++m_mat__) {
                x8_pred(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x9_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x9_pred", "n_x9", n_x9);
        context__.validate_dims("data initialization", "x9_pred", "matrix_d", context__.to_vec(n_block_pred,n_x9));
        validate_non_negative_index("x9_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x9_pred", "n_x9", n_x9);
        x9_pred = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block_pred),static_cast<Eigen::VectorXd::Index>(n_x9));
        vals_r__ = context__.vals_r("x9_pred");
        pos__ = 0;
        size_t x9_pred_m_mat_lim__ = n_block_pred;
        size_t x9_pred_n_mat_lim__ = n_x9;
        for (size_t n_mat__ = 0; n_mat__ < x9_pred_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x9_pred_m_mat_lim__; ++m_mat__) {
                x9_pred(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x10_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x10_pred", "n_x10", n_x10);
        context__.validate_dims("data initialization", "x10_pred", "matrix_d", context__.to_vec(n_block_pred,n_x10));
        validate_non_negative_index("x10_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x10_pred", "n_x10", n_x10);
        x10_pred = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block_pred),static_cast<Eigen::VectorXd::Index>(n_x10));
        vals_r__ = context__.vals_r("x10_pred");
        pos__ = 0;
        size_t x10_pred_m_mat_lim__ = n_block_pred;
        size_t x10_pred_n_mat_lim__ = n_x10;
        for (size_t n_mat__ = 0; n_mat__ < x10_pred_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x10_pred_m_mat_lim__; ++m_mat__) {
                x10_pred(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x11_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x11_pred", "n_x11", n_x11);
        context__.validate_dims("data initialization", "x11_pred", "matrix_d", context__.to_vec(n_block_pred,n_x11));
        validate_non_negative_index("x11_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x11_pred", "n_x11", n_x11);
        x11_pred = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block_pred),static_cast<Eigen::VectorXd::Index>(n_x11));
        vals_r__ = context__.vals_r("x11_pred");
        pos__ = 0;
        size_t x11_pred_m_mat_lim__ = n_block_pred;
        size_t x11_pred_n_mat_lim__ = n_x11;
        for (size_t n_mat__ = 0; n_mat__ < x11_pred_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x11_pred_m_mat_lim__; ++m_mat__) {
                x11_pred(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x12_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x12_pred", "n_x12", n_x12);
        context__.validate_dims("data initialization", "x12_pred", "matrix_d", context__.to_vec(n_block_pred,n_x12));
        validate_non_negative_index("x12_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x12_pred", "n_x12", n_x12);
        x12_pred = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block_pred),static_cast<Eigen::VectorXd::Index>(n_x12));
        vals_r__ = context__.vals_r("x12_pred");
        pos__ = 0;
        size_t x12_pred_m_mat_lim__ = n_block_pred;
        size_t x12_pred_n_mat_lim__ = n_x12;
        for (size_t n_mat__ = 0; n_mat__ < x12_pred_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x12_pred_m_mat_lim__; ++m_mat__) {
                x12_pred(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x13_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x13_pred", "n_x13", n_x13);
        context__.validate_dims("data initialization", "x13_pred", "matrix_d", context__.to_vec(n_block_pred,n_x13));
        validate_non_negative_index("x13_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x13_pred", "n_x13", n_x13);
        x13_pred = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block_pred),static_cast<Eigen::VectorXd::Index>(n_x13));
        vals_r__ = context__.vals_r("x13_pred");
        pos__ = 0;
        size_t x13_pred_m_mat_lim__ = n_block_pred;
        size_t x13_pred_n_mat_lim__ = n_x13;
        for (size_t n_mat__ = 0; n_mat__ < x13_pred_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x13_pred_m_mat_lim__; ++m_mat__) {
                x13_pred(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x14_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x14_pred", "n_x14", n_x14);
        context__.validate_dims("data initialization", "x14_pred", "matrix_d", context__.to_vec(n_block_pred,n_x14));
        validate_non_negative_index("x14_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x14_pred", "n_x14", n_x14);
        x14_pred = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block_pred),static_cast<Eigen::VectorXd::Index>(n_x14));
        vals_r__ = context__.vals_r("x14_pred");
        pos__ = 0;
        size_t x14_pred_m_mat_lim__ = n_block_pred;
        size_t x14_pred_n_mat_lim__ = n_x14;
        for (size_t n_mat__ = 0; n_mat__ < x14_pred_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x14_pred_m_mat_lim__; ++m_mat__) {
                x14_pred(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x15_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x15_pred", "n_x15", n_x15);
        context__.validate_dims("data initialization", "x15_pred", "matrix_d", context__.to_vec(n_block_pred,n_x15));
        validate_non_negative_index("x15_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x15_pred", "n_x15", n_x15);
        x15_pred = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block_pred),static_cast<Eigen::VectorXd::Index>(n_x15));
        vals_r__ = context__.vals_r("x15_pred");
        pos__ = 0;
        size_t x15_pred_m_mat_lim__ = n_block_pred;
        size_t x15_pred_n_mat_lim__ = n_x15;
        for (size_t n_mat__ = 0; n_mat__ < x15_pred_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x15_pred_m_mat_lim__; ++m_mat__) {
                x15_pred(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x16_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x16_pred", "n_x16", n_x16);
        context__.validate_dims("data initialization", "x16_pred", "matrix_d", context__.to_vec(n_block_pred,n_x16));
        validate_non_negative_index("x16_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x16_pred", "n_x16", n_x16);
        x16_pred = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block_pred),static_cast<Eigen::VectorXd::Index>(n_x16));
        vals_r__ = context__.vals_r("x16_pred");
        pos__ = 0;
        size_t x16_pred_m_mat_lim__ = n_block_pred;
        size_t x16_pred_n_mat_lim__ = n_x16;
        for (size_t n_mat__ = 0; n_mat__ < x16_pred_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x16_pred_m_mat_lim__; ++m_mat__) {
                x16_pred(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x17_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x17_pred", "n_x17", n_x17);
        context__.validate_dims("data initialization", "x17_pred", "matrix_d", context__.to_vec(n_block_pred,n_x17));
        validate_non_negative_index("x17_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x17_pred", "n_x17", n_x17);
        x17_pred = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block_pred),static_cast<Eigen::VectorXd::Index>(n_x17));
        vals_r__ = context__.vals_r("x17_pred");
        pos__ = 0;
        size_t x17_pred_m_mat_lim__ = n_block_pred;
        size_t x17_pred_n_mat_lim__ = n_x17;
        for (size_t n_mat__ = 0; n_mat__ < x17_pred_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x17_pred_m_mat_lim__; ++m_mat__) {
                x17_pred(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("x18_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x18_pred", "n_x18", n_x18);
        context__.validate_dims("data initialization", "x18_pred", "matrix_d", context__.to_vec(n_block_pred,n_x18));
        validate_non_negative_index("x18_pred", "n_block_pred", n_block_pred);
        validate_non_negative_index("x18_pred", "n_x18", n_x18);
        x18_pred = matrix_d(static_cast<Eigen::VectorXd::Index>(n_block_pred),static_cast<Eigen::VectorXd::Index>(n_x18));
        vals_r__ = context__.vals_r("x18_pred");
        pos__ = 0;
        size_t x18_pred_m_mat_lim__ = n_block_pred;
        size_t x18_pred_n_mat_lim__ = n_x18;
        for (size_t n_mat__ = 0; n_mat__ < x18_pred_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x18_pred_m_mat_lim__; ++m_mat__) {
                x18_pred(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("b_spline", "n_age", n_age);
        validate_non_negative_index("b_spline", "n_k", n_k);
        context__.validate_dims("data initialization", "b_spline", "row_vector_d", context__.to_vec(n_age,n_k));
        validate_non_negative_index("b_spline", "n_age", n_age);
        validate_non_negative_index("b_spline", "n_k", n_k);
        b_spline = std::vector<row_vector_d>(n_age,row_vector_d(static_cast<Eigen::VectorXd::Index>(n_k)));
        vals_r__ = context__.vals_r("b_spline");
        pos__ = 0;
        size_t b_spline_i_vec_lim__ = n_k;
        for (size_t i_vec__ = 0; i_vec__ < b_spline_i_vec_lim__; ++i_vec__) {
            size_t b_spline_limit_0__ = n_age;
            for (size_t i_0__ = 0; i_0__ < b_spline_limit_0__; ++i_0__) {
                b_spline[i_0__][i_vec__] = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("b_spline_pred", "n_age_pred", n_age_pred);
        validate_non_negative_index("b_spline_pred", "n_k", n_k);
        context__.validate_dims("data initialization", "b_spline_pred", "row_vector_d", context__.to_vec(n_age_pred,n_k));
        validate_non_negative_index("b_spline_pred", "n_age_pred", n_age_pred);
        validate_non_negative_index("b_spline_pred", "n_k", n_k);
        b_spline_pred = std::vector<row_vector_d>(n_age_pred,row_vector_d(static_cast<Eigen::VectorXd::Index>(n_k)));
        vals_r__ = context__.vals_r("b_spline_pred");
        pos__ = 0;
        size_t b_spline_pred_i_vec_lim__ = n_k;
        for (size_t i_vec__ = 0; i_vec__ < b_spline_pred_i_vec_lim__; ++i_vec__) {
            size_t b_spline_pred_limit_0__ = n_age_pred;
            for (size_t i_0__ = 0; i_0__ < b_spline_pred_limit_0__; ++i_0__) {
                b_spline_pred[i_0__][i_vec__] = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "n_plot", "int", context__.to_vec());
        n_plot = int(0);
        vals_i__ = context__.vals_i("n_plot");
        pos__ = 0;
        n_plot = vals_i__[pos__++];
        validate_non_negative_index("age_plot", "n_plot", n_plot);
        context__.validate_dims("data initialization", "age_plot", "vector_d", context__.to_vec(n_plot));
        validate_non_negative_index("age_plot", "n_plot", n_plot);
        age_plot = vector_d(static_cast<Eigen::VectorXd::Index>(n_plot));
        vals_r__ = context__.vals_r("age_plot");
        pos__ = 0;
        size_t age_plot_i_vec_lim__ = n_plot;
        for (size_t i_vec__ = 0; i_vec__ < age_plot_i_vec_lim__; ++i_vec__) {
            age_plot[i_vec__] = vals_r__[pos__++];
        }
        validate_non_negative_index("b_spline_plot", "n_plot", n_plot);
        validate_non_negative_index("b_spline_plot", "n_block", n_block);
        validate_non_negative_index("b_spline_plot", "n_k", n_k);
        context__.validate_dims("data initialization", "b_spline_plot", "row_vector_d", context__.to_vec(n_plot,n_block,n_k));
        validate_non_negative_index("b_spline_plot", "n_plot", n_plot);
        validate_non_negative_index("b_spline_plot", "n_block", n_block);
        validate_non_negative_index("b_spline_plot", "n_k", n_k);
        b_spline_plot = std::vector<std::vector<row_vector_d> >(n_plot,std::vector<row_vector_d>(n_block,row_vector_d(static_cast<Eigen::VectorXd::Index>(n_k))));
        vals_r__ = context__.vals_r("b_spline_plot");
        pos__ = 0;
        size_t b_spline_plot_i_vec_lim__ = n_k;
        for (size_t i_vec__ = 0; i_vec__ < b_spline_plot_i_vec_lim__; ++i_vec__) {
            size_t b_spline_plot_limit_1__ = n_block;
            for (size_t i_1__ = 0; i_1__ < b_spline_plot_limit_1__; ++i_1__) {
                size_t b_spline_plot_limit_0__ = n_plot;
                for (size_t i_0__ = 0; i_0__ < b_spline_plot_limit_0__; ++i_0__) {
                    b_spline_plot[i_0__][i_1__][i_vec__] = vals_r__[pos__++];
                }
            }
        }
        validate_non_negative_index("b_spline_deriv", "n_plot", n_plot);
        validate_non_negative_index("b_spline_deriv", "n_block", n_block);
        validate_non_negative_index("b_spline_deriv", "n_k", n_k);
        context__.validate_dims("data initialization", "b_spline_deriv", "row_vector_d", context__.to_vec(n_plot,n_block,n_k));
        validate_non_negative_index("b_spline_deriv", "n_plot", n_plot);
        validate_non_negative_index("b_spline_deriv", "n_block", n_block);
        validate_non_negative_index("b_spline_deriv", "n_k", n_k);
        b_spline_deriv = std::vector<std::vector<row_vector_d> >(n_plot,std::vector<row_vector_d>(n_block,row_vector_d(static_cast<Eigen::VectorXd::Index>(n_k))));
        vals_r__ = context__.vals_r("b_spline_deriv");
        pos__ = 0;
        size_t b_spline_deriv_i_vec_lim__ = n_k;
        for (size_t i_vec__ = 0; i_vec__ < b_spline_deriv_i_vec_lim__; ++i_vec__) {
            size_t b_spline_deriv_limit_1__ = n_block;
            for (size_t i_1__ = 0; i_1__ < b_spline_deriv_limit_1__; ++i_1__) {
                size_t b_spline_deriv_limit_0__ = n_plot;
                for (size_t i_0__ = 0; i_0__ < b_spline_deriv_limit_0__; ++i_0__) {
                    b_spline_deriv[i_0__][i_1__][i_vec__] = vals_r__[pos__++];
                }
            }
        }

        // validate, data variables
        check_greater_or_equal(function__,"n",n,0);
        check_greater_or_equal(function__,"n_pred",n_pred,0);
        check_greater_or_equal(function__,"n_block",n_block,0);
        check_greater_or_equal(function__,"n_block_pred",n_block_pred,0);
        check_greater_or_equal(function__,"n_x1",n_x1,0);
        check_greater_or_equal(function__,"n_x2",n_x2,0);
        check_greater_or_equal(function__,"n_x3",n_x3,0);
        check_greater_or_equal(function__,"n_x4",n_x4,0);
        check_greater_or_equal(function__,"n_x5",n_x5,0);
        check_greater_or_equal(function__,"n_x6",n_x6,0);
        check_greater_or_equal(function__,"n_x7",n_x7,0);
        check_greater_or_equal(function__,"n_x8",n_x8,0);
        check_greater_or_equal(function__,"n_x9",n_x9,0);
        check_greater_or_equal(function__,"n_x10",n_x10,0);
        check_greater_or_equal(function__,"n_x11",n_x11,0);
        check_greater_or_equal(function__,"n_x12",n_x12,0);
        check_greater_or_equal(function__,"n_x13",n_x13,0);
        check_greater_or_equal(function__,"n_x14",n_x14,0);
        check_greater_or_equal(function__,"n_x15",n_x15,0);
        check_greater_or_equal(function__,"n_x16",n_x16,0);
        check_greater_or_equal(function__,"n_x17",n_x17,0);
        check_greater_or_equal(function__,"n_x18",n_x18,0);
        check_greater_or_equal(function__,"size_data",size_data,0);
        check_greater_or_equal(function__,"n_age",n_age,0);
        check_greater_or_equal(function__,"n_age_pred",n_age_pred,0);
        check_greater_or_equal(function__,"n_k",n_k,0);
        for (int k0__ = 0; k0__ < n; ++k0__) {
            check_greater_or_equal(function__,"age_index[k0__]",age_index[k0__],0);
        }
        for (int k0__ = 0; k0__ < n_pred; ++k0__) {
            check_greater_or_equal(function__,"age_index_pred[k0__]",age_index_pred[k0__],0);
        }
        for (int k0__ = 0; k0__ < n; ++k0__) {
            check_greater_or_equal(function__,"block_data[k0__]",block_data[k0__],0);
            check_less_or_equal(function__,"block_data[k0__]",block_data[k0__],n_block);
        }
        for (int k0__ = 0; k0__ < n_pred; ++k0__) {
            check_greater_or_equal(function__,"block_holdout[k0__]",block_holdout[k0__],0);
            check_less_or_equal(function__,"block_holdout[k0__]",block_holdout[k0__],n_block_pred);
        }
        check_greater_or_equal(function__,"n_plot",n_plot,0);
        // initialize data variables

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // validate, set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        validate_non_negative_index("h1", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h2", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h3", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h4", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h5", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h6", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h7", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h8", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h9", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h10", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h11", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h12", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h13", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h14", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h15", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h16", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h17", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h18", "n_block", n_block);
        num_params_r__ += n_block;
        validate_non_negative_index("h1_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h2_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h3_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h4_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h5_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h6_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h7_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h8_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h9_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h10_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h11_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h12_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h13_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h14_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h15_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h16_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h17_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("h18_holdout", "n_block_pred", n_block_pred);
        num_params_r__ += n_block_pred;
        validate_non_negative_index("b1", "n_x1", n_x1);
        num_params_r__ += n_x1;
        validate_non_negative_index("b2", "n_x2", n_x2);
        num_params_r__ += n_x2;
        validate_non_negative_index("b3", "n_x3", n_x3);
        num_params_r__ += n_x3;
        validate_non_negative_index("b4", "n_x4", n_x4);
        num_params_r__ += n_x4;
        validate_non_negative_index("b5", "n_x5", n_x5);
        num_params_r__ += n_x5;
        validate_non_negative_index("b6", "n_x6", n_x6);
        num_params_r__ += n_x6;
        validate_non_negative_index("b7", "n_x7", n_x7);
        num_params_r__ += n_x7;
        validate_non_negative_index("b8", "n_x8", n_x8);
        num_params_r__ += n_x8;
        validate_non_negative_index("b9", "n_x9", n_x9);
        num_params_r__ += n_x9;
        validate_non_negative_index("b10", "n_x10", n_x10);
        num_params_r__ += n_x10;
        validate_non_negative_index("b11", "n_x11", n_x11);
        num_params_r__ += n_x11;
        validate_non_negative_index("b12", "n_x12", n_x12);
        num_params_r__ += n_x12;
        validate_non_negative_index("b13", "n_x13", n_x13);
        num_params_r__ += n_x13;
        validate_non_negative_index("b14", "n_x14", n_x14);
        num_params_r__ += n_x14;
        validate_non_negative_index("b15", "n_x15", n_x15);
        num_params_r__ += n_x15;
        validate_non_negative_index("b16", "n_x16", n_x16);
        num_params_r__ += n_x16;
        validate_non_negative_index("b17", "n_x17", n_x17);
        num_params_r__ += n_x17;
        validate_non_negative_index("b18", "n_x18", n_x18);
        num_params_r__ += n_x18;
    }

    ~model_spline_pred_blockmod() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("sigma_obs")))
            throw std::runtime_error("variable sigma_obs missing");
        vals_r__ = context__.vals_r("sigma_obs");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma_obs", "double", context__.to_vec());
        // generate_declaration sigma_obs
        double sigma_obs(0);
        sigma_obs = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma_obs);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_obs: ") + e.what());
        }

        if (!(context__.contains_r("sd_h1")))
            throw std::runtime_error("variable sd_h1 missing");
        vals_r__ = context__.vals_r("sd_h1");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h1", "double", context__.to_vec());
        // generate_declaration sd_h1
        double sd_h1(0);
        sd_h1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h1: ") + e.what());
        }

        if (!(context__.contains_r("sd_h2")))
            throw std::runtime_error("variable sd_h2 missing");
        vals_r__ = context__.vals_r("sd_h2");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h2", "double", context__.to_vec());
        // generate_declaration sd_h2
        double sd_h2(0);
        sd_h2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h2: ") + e.what());
        }

        if (!(context__.contains_r("sd_h3")))
            throw std::runtime_error("variable sd_h3 missing");
        vals_r__ = context__.vals_r("sd_h3");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h3", "double", context__.to_vec());
        // generate_declaration sd_h3
        double sd_h3(0);
        sd_h3 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h3);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h3: ") + e.what());
        }

        if (!(context__.contains_r("sd_h4")))
            throw std::runtime_error("variable sd_h4 missing");
        vals_r__ = context__.vals_r("sd_h4");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h4", "double", context__.to_vec());
        // generate_declaration sd_h4
        double sd_h4(0);
        sd_h4 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h4);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h4: ") + e.what());
        }

        if (!(context__.contains_r("sd_h5")))
            throw std::runtime_error("variable sd_h5 missing");
        vals_r__ = context__.vals_r("sd_h5");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h5", "double", context__.to_vec());
        // generate_declaration sd_h5
        double sd_h5(0);
        sd_h5 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h5);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h5: ") + e.what());
        }

        if (!(context__.contains_r("sd_h6")))
            throw std::runtime_error("variable sd_h6 missing");
        vals_r__ = context__.vals_r("sd_h6");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h6", "double", context__.to_vec());
        // generate_declaration sd_h6
        double sd_h6(0);
        sd_h6 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h6);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h6: ") + e.what());
        }

        if (!(context__.contains_r("sd_h7")))
            throw std::runtime_error("variable sd_h7 missing");
        vals_r__ = context__.vals_r("sd_h7");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h7", "double", context__.to_vec());
        // generate_declaration sd_h7
        double sd_h7(0);
        sd_h7 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h7);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h7: ") + e.what());
        }

        if (!(context__.contains_r("sd_h8")))
            throw std::runtime_error("variable sd_h8 missing");
        vals_r__ = context__.vals_r("sd_h8");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h8", "double", context__.to_vec());
        // generate_declaration sd_h8
        double sd_h8(0);
        sd_h8 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h8);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h8: ") + e.what());
        }

        if (!(context__.contains_r("sd_h9")))
            throw std::runtime_error("variable sd_h9 missing");
        vals_r__ = context__.vals_r("sd_h9");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h9", "double", context__.to_vec());
        // generate_declaration sd_h9
        double sd_h9(0);
        sd_h9 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h9);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h9: ") + e.what());
        }

        if (!(context__.contains_r("sd_h10")))
            throw std::runtime_error("variable sd_h10 missing");
        vals_r__ = context__.vals_r("sd_h10");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h10", "double", context__.to_vec());
        // generate_declaration sd_h10
        double sd_h10(0);
        sd_h10 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h10);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h10: ") + e.what());
        }

        if (!(context__.contains_r("sd_h11")))
            throw std::runtime_error("variable sd_h11 missing");
        vals_r__ = context__.vals_r("sd_h11");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h11", "double", context__.to_vec());
        // generate_declaration sd_h11
        double sd_h11(0);
        sd_h11 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h11);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h11: ") + e.what());
        }

        if (!(context__.contains_r("sd_h12")))
            throw std::runtime_error("variable sd_h12 missing");
        vals_r__ = context__.vals_r("sd_h12");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h12", "double", context__.to_vec());
        // generate_declaration sd_h12
        double sd_h12(0);
        sd_h12 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h12);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h12: ") + e.what());
        }

        if (!(context__.contains_r("sd_h13")))
            throw std::runtime_error("variable sd_h13 missing");
        vals_r__ = context__.vals_r("sd_h13");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h13", "double", context__.to_vec());
        // generate_declaration sd_h13
        double sd_h13(0);
        sd_h13 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h13);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h13: ") + e.what());
        }

        if (!(context__.contains_r("sd_h14")))
            throw std::runtime_error("variable sd_h14 missing");
        vals_r__ = context__.vals_r("sd_h14");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h14", "double", context__.to_vec());
        // generate_declaration sd_h14
        double sd_h14(0);
        sd_h14 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h14);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h14: ") + e.what());
        }

        if (!(context__.contains_r("sd_h15")))
            throw std::runtime_error("variable sd_h15 missing");
        vals_r__ = context__.vals_r("sd_h15");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h15", "double", context__.to_vec());
        // generate_declaration sd_h15
        double sd_h15(0);
        sd_h15 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h15);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h15: ") + e.what());
        }

        if (!(context__.contains_r("sd_h16")))
            throw std::runtime_error("variable sd_h16 missing");
        vals_r__ = context__.vals_r("sd_h16");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h16", "double", context__.to_vec());
        // generate_declaration sd_h16
        double sd_h16(0);
        sd_h16 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h16);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h16: ") + e.what());
        }

        if (!(context__.contains_r("sd_h17")))
            throw std::runtime_error("variable sd_h17 missing");
        vals_r__ = context__.vals_r("sd_h17");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h17", "double", context__.to_vec());
        // generate_declaration sd_h17
        double sd_h17(0);
        sd_h17 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h17);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h17: ") + e.what());
        }

        if (!(context__.contains_r("sd_h18")))
            throw std::runtime_error("variable sd_h18 missing");
        vals_r__ = context__.vals_r("sd_h18");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_h18", "double", context__.to_vec());
        // generate_declaration sd_h18
        double sd_h18(0);
        sd_h18 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_h18);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_h18: ") + e.what());
        }

        if (!(context__.contains_r("h1")))
            throw std::runtime_error("variable h1 missing");
        vals_r__ = context__.vals_r("h1");
        pos__ = 0U;
        validate_non_negative_index("h1", "n_block", n_block);
        context__.validate_dims("initialization", "h1", "vector_d", context__.to_vec(n_block));
        // generate_declaration h1
        vector_d h1(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h1(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h1: ") + e.what());
        }

        if (!(context__.contains_r("h2")))
            throw std::runtime_error("variable h2 missing");
        vals_r__ = context__.vals_r("h2");
        pos__ = 0U;
        validate_non_negative_index("h2", "n_block", n_block);
        context__.validate_dims("initialization", "h2", "vector_d", context__.to_vec(n_block));
        // generate_declaration h2
        vector_d h2(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h2(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h2: ") + e.what());
        }

        if (!(context__.contains_r("h3")))
            throw std::runtime_error("variable h3 missing");
        vals_r__ = context__.vals_r("h3");
        pos__ = 0U;
        validate_non_negative_index("h3", "n_block", n_block);
        context__.validate_dims("initialization", "h3", "vector_d", context__.to_vec(n_block));
        // generate_declaration h3
        vector_d h3(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h3(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h3);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h3: ") + e.what());
        }

        if (!(context__.contains_r("h4")))
            throw std::runtime_error("variable h4 missing");
        vals_r__ = context__.vals_r("h4");
        pos__ = 0U;
        validate_non_negative_index("h4", "n_block", n_block);
        context__.validate_dims("initialization", "h4", "vector_d", context__.to_vec(n_block));
        // generate_declaration h4
        vector_d h4(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h4(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h4);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h4: ") + e.what());
        }

        if (!(context__.contains_r("h5")))
            throw std::runtime_error("variable h5 missing");
        vals_r__ = context__.vals_r("h5");
        pos__ = 0U;
        validate_non_negative_index("h5", "n_block", n_block);
        context__.validate_dims("initialization", "h5", "vector_d", context__.to_vec(n_block));
        // generate_declaration h5
        vector_d h5(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h5(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h5);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h5: ") + e.what());
        }

        if (!(context__.contains_r("h6")))
            throw std::runtime_error("variable h6 missing");
        vals_r__ = context__.vals_r("h6");
        pos__ = 0U;
        validate_non_negative_index("h6", "n_block", n_block);
        context__.validate_dims("initialization", "h6", "vector_d", context__.to_vec(n_block));
        // generate_declaration h6
        vector_d h6(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h6(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h6);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h6: ") + e.what());
        }

        if (!(context__.contains_r("h7")))
            throw std::runtime_error("variable h7 missing");
        vals_r__ = context__.vals_r("h7");
        pos__ = 0U;
        validate_non_negative_index("h7", "n_block", n_block);
        context__.validate_dims("initialization", "h7", "vector_d", context__.to_vec(n_block));
        // generate_declaration h7
        vector_d h7(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h7(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h7);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h7: ") + e.what());
        }

        if (!(context__.contains_r("h8")))
            throw std::runtime_error("variable h8 missing");
        vals_r__ = context__.vals_r("h8");
        pos__ = 0U;
        validate_non_negative_index("h8", "n_block", n_block);
        context__.validate_dims("initialization", "h8", "vector_d", context__.to_vec(n_block));
        // generate_declaration h8
        vector_d h8(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h8(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h8);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h8: ") + e.what());
        }

        if (!(context__.contains_r("h9")))
            throw std::runtime_error("variable h9 missing");
        vals_r__ = context__.vals_r("h9");
        pos__ = 0U;
        validate_non_negative_index("h9", "n_block", n_block);
        context__.validate_dims("initialization", "h9", "vector_d", context__.to_vec(n_block));
        // generate_declaration h9
        vector_d h9(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h9(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h9);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h9: ") + e.what());
        }

        if (!(context__.contains_r("h10")))
            throw std::runtime_error("variable h10 missing");
        vals_r__ = context__.vals_r("h10");
        pos__ = 0U;
        validate_non_negative_index("h10", "n_block", n_block);
        context__.validate_dims("initialization", "h10", "vector_d", context__.to_vec(n_block));
        // generate_declaration h10
        vector_d h10(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h10(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h10);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h10: ") + e.what());
        }

        if (!(context__.contains_r("h11")))
            throw std::runtime_error("variable h11 missing");
        vals_r__ = context__.vals_r("h11");
        pos__ = 0U;
        validate_non_negative_index("h11", "n_block", n_block);
        context__.validate_dims("initialization", "h11", "vector_d", context__.to_vec(n_block));
        // generate_declaration h11
        vector_d h11(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h11(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h11);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h11: ") + e.what());
        }

        if (!(context__.contains_r("h12")))
            throw std::runtime_error("variable h12 missing");
        vals_r__ = context__.vals_r("h12");
        pos__ = 0U;
        validate_non_negative_index("h12", "n_block", n_block);
        context__.validate_dims("initialization", "h12", "vector_d", context__.to_vec(n_block));
        // generate_declaration h12
        vector_d h12(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h12(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h12);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h12: ") + e.what());
        }

        if (!(context__.contains_r("h13")))
            throw std::runtime_error("variable h13 missing");
        vals_r__ = context__.vals_r("h13");
        pos__ = 0U;
        validate_non_negative_index("h13", "n_block", n_block);
        context__.validate_dims("initialization", "h13", "vector_d", context__.to_vec(n_block));
        // generate_declaration h13
        vector_d h13(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h13(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h13);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h13: ") + e.what());
        }

        if (!(context__.contains_r("h14")))
            throw std::runtime_error("variable h14 missing");
        vals_r__ = context__.vals_r("h14");
        pos__ = 0U;
        validate_non_negative_index("h14", "n_block", n_block);
        context__.validate_dims("initialization", "h14", "vector_d", context__.to_vec(n_block));
        // generate_declaration h14
        vector_d h14(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h14(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h14);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h14: ") + e.what());
        }

        if (!(context__.contains_r("h15")))
            throw std::runtime_error("variable h15 missing");
        vals_r__ = context__.vals_r("h15");
        pos__ = 0U;
        validate_non_negative_index("h15", "n_block", n_block);
        context__.validate_dims("initialization", "h15", "vector_d", context__.to_vec(n_block));
        // generate_declaration h15
        vector_d h15(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h15(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h15);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h15: ") + e.what());
        }

        if (!(context__.contains_r("h16")))
            throw std::runtime_error("variable h16 missing");
        vals_r__ = context__.vals_r("h16");
        pos__ = 0U;
        validate_non_negative_index("h16", "n_block", n_block);
        context__.validate_dims("initialization", "h16", "vector_d", context__.to_vec(n_block));
        // generate_declaration h16
        vector_d h16(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h16(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h16);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h16: ") + e.what());
        }

        if (!(context__.contains_r("h17")))
            throw std::runtime_error("variable h17 missing");
        vals_r__ = context__.vals_r("h17");
        pos__ = 0U;
        validate_non_negative_index("h17", "n_block", n_block);
        context__.validate_dims("initialization", "h17", "vector_d", context__.to_vec(n_block));
        // generate_declaration h17
        vector_d h17(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h17(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h17);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h17: ") + e.what());
        }

        if (!(context__.contains_r("h18")))
            throw std::runtime_error("variable h18 missing");
        vals_r__ = context__.vals_r("h18");
        pos__ = 0U;
        validate_non_negative_index("h18", "n_block", n_block);
        context__.validate_dims("initialization", "h18", "vector_d", context__.to_vec(n_block));
        // generate_declaration h18
        vector_d h18(static_cast<Eigen::VectorXd::Index>(n_block));
        for (int j1__ = 0U; j1__ < n_block; ++j1__)
            h18(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h18);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h18: ") + e.what());
        }

        if (!(context__.contains_r("h1_holdout")))
            throw std::runtime_error("variable h1_holdout missing");
        vals_r__ = context__.vals_r("h1_holdout");
        pos__ = 0U;
        validate_non_negative_index("h1_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h1_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h1_holdout
        vector_d h1_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h1_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h1_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h1_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h2_holdout")))
            throw std::runtime_error("variable h2_holdout missing");
        vals_r__ = context__.vals_r("h2_holdout");
        pos__ = 0U;
        validate_non_negative_index("h2_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h2_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h2_holdout
        vector_d h2_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h2_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h2_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h2_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h3_holdout")))
            throw std::runtime_error("variable h3_holdout missing");
        vals_r__ = context__.vals_r("h3_holdout");
        pos__ = 0U;
        validate_non_negative_index("h3_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h3_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h3_holdout
        vector_d h3_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h3_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h3_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h3_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h4_holdout")))
            throw std::runtime_error("variable h4_holdout missing");
        vals_r__ = context__.vals_r("h4_holdout");
        pos__ = 0U;
        validate_non_negative_index("h4_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h4_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h4_holdout
        vector_d h4_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h4_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h4_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h4_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h5_holdout")))
            throw std::runtime_error("variable h5_holdout missing");
        vals_r__ = context__.vals_r("h5_holdout");
        pos__ = 0U;
        validate_non_negative_index("h5_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h5_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h5_holdout
        vector_d h5_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h5_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h5_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h5_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h6_holdout")))
            throw std::runtime_error("variable h6_holdout missing");
        vals_r__ = context__.vals_r("h6_holdout");
        pos__ = 0U;
        validate_non_negative_index("h6_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h6_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h6_holdout
        vector_d h6_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h6_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h6_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h6_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h7_holdout")))
            throw std::runtime_error("variable h7_holdout missing");
        vals_r__ = context__.vals_r("h7_holdout");
        pos__ = 0U;
        validate_non_negative_index("h7_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h7_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h7_holdout
        vector_d h7_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h7_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h7_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h7_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h8_holdout")))
            throw std::runtime_error("variable h8_holdout missing");
        vals_r__ = context__.vals_r("h8_holdout");
        pos__ = 0U;
        validate_non_negative_index("h8_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h8_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h8_holdout
        vector_d h8_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h8_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h8_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h8_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h9_holdout")))
            throw std::runtime_error("variable h9_holdout missing");
        vals_r__ = context__.vals_r("h9_holdout");
        pos__ = 0U;
        validate_non_negative_index("h9_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h9_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h9_holdout
        vector_d h9_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h9_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h9_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h9_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h10_holdout")))
            throw std::runtime_error("variable h10_holdout missing");
        vals_r__ = context__.vals_r("h10_holdout");
        pos__ = 0U;
        validate_non_negative_index("h10_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h10_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h10_holdout
        vector_d h10_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h10_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h10_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h10_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h11_holdout")))
            throw std::runtime_error("variable h11_holdout missing");
        vals_r__ = context__.vals_r("h11_holdout");
        pos__ = 0U;
        validate_non_negative_index("h11_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h11_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h11_holdout
        vector_d h11_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h11_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h11_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h11_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h12_holdout")))
            throw std::runtime_error("variable h12_holdout missing");
        vals_r__ = context__.vals_r("h12_holdout");
        pos__ = 0U;
        validate_non_negative_index("h12_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h12_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h12_holdout
        vector_d h12_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h12_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h12_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h12_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h13_holdout")))
            throw std::runtime_error("variable h13_holdout missing");
        vals_r__ = context__.vals_r("h13_holdout");
        pos__ = 0U;
        validate_non_negative_index("h13_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h13_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h13_holdout
        vector_d h13_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h13_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h13_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h13_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h14_holdout")))
            throw std::runtime_error("variable h14_holdout missing");
        vals_r__ = context__.vals_r("h14_holdout");
        pos__ = 0U;
        validate_non_negative_index("h14_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h14_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h14_holdout
        vector_d h14_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h14_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h14_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h14_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h15_holdout")))
            throw std::runtime_error("variable h15_holdout missing");
        vals_r__ = context__.vals_r("h15_holdout");
        pos__ = 0U;
        validate_non_negative_index("h15_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h15_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h15_holdout
        vector_d h15_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h15_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h15_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h15_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h16_holdout")))
            throw std::runtime_error("variable h16_holdout missing");
        vals_r__ = context__.vals_r("h16_holdout");
        pos__ = 0U;
        validate_non_negative_index("h16_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h16_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h16_holdout
        vector_d h16_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h16_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h16_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h16_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h17_holdout")))
            throw std::runtime_error("variable h17_holdout missing");
        vals_r__ = context__.vals_r("h17_holdout");
        pos__ = 0U;
        validate_non_negative_index("h17_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h17_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h17_holdout
        vector_d h17_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h17_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h17_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h17_holdout: ") + e.what());
        }

        if (!(context__.contains_r("h18_holdout")))
            throw std::runtime_error("variable h18_holdout missing");
        vals_r__ = context__.vals_r("h18_holdout");
        pos__ = 0U;
        validate_non_negative_index("h18_holdout", "n_block_pred", n_block_pred);
        context__.validate_dims("initialization", "h18_holdout", "vector_d", context__.to_vec(n_block_pred));
        // generate_declaration h18_holdout
        vector_d h18_holdout(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        for (int j1__ = 0U; j1__ < n_block_pred; ++j1__)
            h18_holdout(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(h18_holdout);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable h18_holdout: ") + e.what());
        }

        if (!(context__.contains_r("b1")))
            throw std::runtime_error("variable b1 missing");
        vals_r__ = context__.vals_r("b1");
        pos__ = 0U;
        validate_non_negative_index("b1", "n_x1", n_x1);
        context__.validate_dims("initialization", "b1", "vector_d", context__.to_vec(n_x1));
        // generate_declaration b1
        vector_d b1(static_cast<Eigen::VectorXd::Index>(n_x1));
        for (int j1__ = 0U; j1__ < n_x1; ++j1__)
            b1(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(b1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b1: ") + e.what());
        }

        if (!(context__.contains_r("b2")))
            throw std::runtime_error("variable b2 missing");
        vals_r__ = context__.vals_r("b2");
        pos__ = 0U;
        validate_non_negative_index("b2", "n_x2", n_x2);
        context__.validate_dims("initialization", "b2", "vector_d", context__.to_vec(n_x2));
        // generate_declaration b2
        vector_d b2(static_cast<Eigen::VectorXd::Index>(n_x2));
        for (int j1__ = 0U; j1__ < n_x2; ++j1__)
            b2(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(b2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b2: ") + e.what());
        }

        if (!(context__.contains_r("b3")))
            throw std::runtime_error("variable b3 missing");
        vals_r__ = context__.vals_r("b3");
        pos__ = 0U;
        validate_non_negative_index("b3", "n_x3", n_x3);
        context__.validate_dims("initialization", "b3", "vector_d", context__.to_vec(n_x3));
        // generate_declaration b3
        vector_d b3(static_cast<Eigen::VectorXd::Index>(n_x3));
        for (int j1__ = 0U; j1__ < n_x3; ++j1__)
            b3(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(b3);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b3: ") + e.what());
        }

        if (!(context__.contains_r("b4")))
            throw std::runtime_error("variable b4 missing");
        vals_r__ = context__.vals_r("b4");
        pos__ = 0U;
        validate_non_negative_index("b4", "n_x4", n_x4);
        context__.validate_dims("initialization", "b4", "vector_d", context__.to_vec(n_x4));
        // generate_declaration b4
        vector_d b4(static_cast<Eigen::VectorXd::Index>(n_x4));
        for (int j1__ = 0U; j1__ < n_x4; ++j1__)
            b4(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(b4);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b4: ") + e.what());
        }

        if (!(context__.contains_r("b5")))
            throw std::runtime_error("variable b5 missing");
        vals_r__ = context__.vals_r("b5");
        pos__ = 0U;
        validate_non_negative_index("b5", "n_x5", n_x5);
        context__.validate_dims("initialization", "b5", "vector_d", context__.to_vec(n_x5));
        // generate_declaration b5
        vector_d b5(static_cast<Eigen::VectorXd::Index>(n_x5));
        for (int j1__ = 0U; j1__ < n_x5; ++j1__)
            b5(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(b5);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b5: ") + e.what());
        }

        if (!(context__.contains_r("b6")))
            throw std::runtime_error("variable b6 missing");
        vals_r__ = context__.vals_r("b6");
        pos__ = 0U;
        validate_non_negative_index("b6", "n_x6", n_x6);
        context__.validate_dims("initialization", "b6", "vector_d", context__.to_vec(n_x6));
        // generate_declaration b6
        vector_d b6(static_cast<Eigen::VectorXd::Index>(n_x6));
        for (int j1__ = 0U; j1__ < n_x6; ++j1__)
            b6(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(b6);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b6: ") + e.what());
        }

        if (!(context__.contains_r("b7")))
            throw std::runtime_error("variable b7 missing");
        vals_r__ = context__.vals_r("b7");
        pos__ = 0U;
        validate_non_negative_index("b7", "n_x7", n_x7);
        context__.validate_dims("initialization", "b7", "vector_d", context__.to_vec(n_x7));
        // generate_declaration b7
        vector_d b7(static_cast<Eigen::VectorXd::Index>(n_x7));
        for (int j1__ = 0U; j1__ < n_x7; ++j1__)
            b7(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(b7);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b7: ") + e.what());
        }

        if (!(context__.contains_r("b8")))
            throw std::runtime_error("variable b8 missing");
        vals_r__ = context__.vals_r("b8");
        pos__ = 0U;
        validate_non_negative_index("b8", "n_x8", n_x8);
        context__.validate_dims("initialization", "b8", "vector_d", context__.to_vec(n_x8));
        // generate_declaration b8
        vector_d b8(static_cast<Eigen::VectorXd::Index>(n_x8));
        for (int j1__ = 0U; j1__ < n_x8; ++j1__)
            b8(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(b8);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b8: ") + e.what());
        }

        if (!(context__.contains_r("b9")))
            throw std::runtime_error("variable b9 missing");
        vals_r__ = context__.vals_r("b9");
        pos__ = 0U;
        validate_non_negative_index("b9", "n_x9", n_x9);
        context__.validate_dims("initialization", "b9", "vector_d", context__.to_vec(n_x9));
        // generate_declaration b9
        vector_d b9(static_cast<Eigen::VectorXd::Index>(n_x9));
        for (int j1__ = 0U; j1__ < n_x9; ++j1__)
            b9(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(b9);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b9: ") + e.what());
        }

        if (!(context__.contains_r("b10")))
            throw std::runtime_error("variable b10 missing");
        vals_r__ = context__.vals_r("b10");
        pos__ = 0U;
        validate_non_negative_index("b10", "n_x10", n_x10);
        context__.validate_dims("initialization", "b10", "vector_d", context__.to_vec(n_x10));
        // generate_declaration b10
        vector_d b10(static_cast<Eigen::VectorXd::Index>(n_x10));
        for (int j1__ = 0U; j1__ < n_x10; ++j1__)
            b10(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(b10);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b10: ") + e.what());
        }

        if (!(context__.contains_r("b11")))
            throw std::runtime_error("variable b11 missing");
        vals_r__ = context__.vals_r("b11");
        pos__ = 0U;
        validate_non_negative_index("b11", "n_x11", n_x11);
        context__.validate_dims("initialization", "b11", "vector_d", context__.to_vec(n_x11));
        // generate_declaration b11
        vector_d b11(static_cast<Eigen::VectorXd::Index>(n_x11));
        for (int j1__ = 0U; j1__ < n_x11; ++j1__)
            b11(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(b11);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b11: ") + e.what());
        }

        if (!(context__.contains_r("b12")))
            throw std::runtime_error("variable b12 missing");
        vals_r__ = context__.vals_r("b12");
        pos__ = 0U;
        validate_non_negative_index("b12", "n_x12", n_x12);
        context__.validate_dims("initialization", "b12", "vector_d", context__.to_vec(n_x12));
        // generate_declaration b12
        vector_d b12(static_cast<Eigen::VectorXd::Index>(n_x12));
        for (int j1__ = 0U; j1__ < n_x12; ++j1__)
            b12(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(b12);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b12: ") + e.what());
        }

        if (!(context__.contains_r("b13")))
            throw std::runtime_error("variable b13 missing");
        vals_r__ = context__.vals_r("b13");
        pos__ = 0U;
        validate_non_negative_index("b13", "n_x13", n_x13);
        context__.validate_dims("initialization", "b13", "vector_d", context__.to_vec(n_x13));
        // generate_declaration b13
        vector_d b13(static_cast<Eigen::VectorXd::Index>(n_x13));
        for (int j1__ = 0U; j1__ < n_x13; ++j1__)
            b13(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(b13);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b13: ") + e.what());
        }

        if (!(context__.contains_r("b14")))
            throw std::runtime_error("variable b14 missing");
        vals_r__ = context__.vals_r("b14");
        pos__ = 0U;
        validate_non_negative_index("b14", "n_x14", n_x14);
        context__.validate_dims("initialization", "b14", "vector_d", context__.to_vec(n_x14));
        // generate_declaration b14
        vector_d b14(static_cast<Eigen::VectorXd::Index>(n_x14));
        for (int j1__ = 0U; j1__ < n_x14; ++j1__)
            b14(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(b14);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b14: ") + e.what());
        }

        if (!(context__.contains_r("b15")))
            throw std::runtime_error("variable b15 missing");
        vals_r__ = context__.vals_r("b15");
        pos__ = 0U;
        validate_non_negative_index("b15", "n_x15", n_x15);
        context__.validate_dims("initialization", "b15", "vector_d", context__.to_vec(n_x15));
        // generate_declaration b15
        vector_d b15(static_cast<Eigen::VectorXd::Index>(n_x15));
        for (int j1__ = 0U; j1__ < n_x15; ++j1__)
            b15(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(b15);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b15: ") + e.what());
        }

        if (!(context__.contains_r("b16")))
            throw std::runtime_error("variable b16 missing");
        vals_r__ = context__.vals_r("b16");
        pos__ = 0U;
        validate_non_negative_index("b16", "n_x16", n_x16);
        context__.validate_dims("initialization", "b16", "vector_d", context__.to_vec(n_x16));
        // generate_declaration b16
        vector_d b16(static_cast<Eigen::VectorXd::Index>(n_x16));
        for (int j1__ = 0U; j1__ < n_x16; ++j1__)
            b16(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(b16);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b16: ") + e.what());
        }

        if (!(context__.contains_r("b17")))
            throw std::runtime_error("variable b17 missing");
        vals_r__ = context__.vals_r("b17");
        pos__ = 0U;
        validate_non_negative_index("b17", "n_x17", n_x17);
        context__.validate_dims("initialization", "b17", "vector_d", context__.to_vec(n_x17));
        // generate_declaration b17
        vector_d b17(static_cast<Eigen::VectorXd::Index>(n_x17));
        for (int j1__ = 0U; j1__ < n_x17; ++j1__)
            b17(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(b17);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b17: ") + e.what());
        }

        if (!(context__.contains_r("b18")))
            throw std::runtime_error("variable b18 missing");
        vals_r__ = context__.vals_r("b18");
        pos__ = 0U;
        validate_non_negative_index("b18", "n_x18", n_x18);
        context__.validate_dims("initialization", "b18", "vector_d", context__.to_vec(n_x18));
        // generate_declaration b18
        vector_d b18(static_cast<Eigen::VectorXd::Index>(n_x18));
        for (int j1__ = 0U; j1__ < n_x18; ++j1__)
            b18(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(b18);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b18: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        T__ sigma_obs;
        (void) sigma_obs;  // dummy to suppress unused var warning
        if (jacobian__)
            sigma_obs = in__.scalar_lb_constrain(0,lp__);
        else
            sigma_obs = in__.scalar_lb_constrain(0);

        T__ sd_h1;
        (void) sd_h1;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h1 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h1 = in__.scalar_lb_constrain(0);

        T__ sd_h2;
        (void) sd_h2;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h2 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h2 = in__.scalar_lb_constrain(0);

        T__ sd_h3;
        (void) sd_h3;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h3 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h3 = in__.scalar_lb_constrain(0);

        T__ sd_h4;
        (void) sd_h4;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h4 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h4 = in__.scalar_lb_constrain(0);

        T__ sd_h5;
        (void) sd_h5;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h5 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h5 = in__.scalar_lb_constrain(0);

        T__ sd_h6;
        (void) sd_h6;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h6 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h6 = in__.scalar_lb_constrain(0);

        T__ sd_h7;
        (void) sd_h7;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h7 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h7 = in__.scalar_lb_constrain(0);

        T__ sd_h8;
        (void) sd_h8;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h8 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h8 = in__.scalar_lb_constrain(0);

        T__ sd_h9;
        (void) sd_h9;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h9 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h9 = in__.scalar_lb_constrain(0);

        T__ sd_h10;
        (void) sd_h10;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h10 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h10 = in__.scalar_lb_constrain(0);

        T__ sd_h11;
        (void) sd_h11;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h11 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h11 = in__.scalar_lb_constrain(0);

        T__ sd_h12;
        (void) sd_h12;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h12 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h12 = in__.scalar_lb_constrain(0);

        T__ sd_h13;
        (void) sd_h13;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h13 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h13 = in__.scalar_lb_constrain(0);

        T__ sd_h14;
        (void) sd_h14;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h14 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h14 = in__.scalar_lb_constrain(0);

        T__ sd_h15;
        (void) sd_h15;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h15 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h15 = in__.scalar_lb_constrain(0);

        T__ sd_h16;
        (void) sd_h16;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h16 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h16 = in__.scalar_lb_constrain(0);

        T__ sd_h17;
        (void) sd_h17;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h17 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h17 = in__.scalar_lb_constrain(0);

        T__ sd_h18;
        (void) sd_h18;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_h18 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_h18 = in__.scalar_lb_constrain(0);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h1;
        (void) h1;  // dummy to suppress unused var warning
        if (jacobian__)
            h1 = in__.vector_constrain(n_block,lp__);
        else
            h1 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h2;
        (void) h2;  // dummy to suppress unused var warning
        if (jacobian__)
            h2 = in__.vector_constrain(n_block,lp__);
        else
            h2 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h3;
        (void) h3;  // dummy to suppress unused var warning
        if (jacobian__)
            h3 = in__.vector_constrain(n_block,lp__);
        else
            h3 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h4;
        (void) h4;  // dummy to suppress unused var warning
        if (jacobian__)
            h4 = in__.vector_constrain(n_block,lp__);
        else
            h4 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h5;
        (void) h5;  // dummy to suppress unused var warning
        if (jacobian__)
            h5 = in__.vector_constrain(n_block,lp__);
        else
            h5 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h6;
        (void) h6;  // dummy to suppress unused var warning
        if (jacobian__)
            h6 = in__.vector_constrain(n_block,lp__);
        else
            h6 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h7;
        (void) h7;  // dummy to suppress unused var warning
        if (jacobian__)
            h7 = in__.vector_constrain(n_block,lp__);
        else
            h7 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h8;
        (void) h8;  // dummy to suppress unused var warning
        if (jacobian__)
            h8 = in__.vector_constrain(n_block,lp__);
        else
            h8 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h9;
        (void) h9;  // dummy to suppress unused var warning
        if (jacobian__)
            h9 = in__.vector_constrain(n_block,lp__);
        else
            h9 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h10;
        (void) h10;  // dummy to suppress unused var warning
        if (jacobian__)
            h10 = in__.vector_constrain(n_block,lp__);
        else
            h10 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h11;
        (void) h11;  // dummy to suppress unused var warning
        if (jacobian__)
            h11 = in__.vector_constrain(n_block,lp__);
        else
            h11 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h12;
        (void) h12;  // dummy to suppress unused var warning
        if (jacobian__)
            h12 = in__.vector_constrain(n_block,lp__);
        else
            h12 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h13;
        (void) h13;  // dummy to suppress unused var warning
        if (jacobian__)
            h13 = in__.vector_constrain(n_block,lp__);
        else
            h13 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h14;
        (void) h14;  // dummy to suppress unused var warning
        if (jacobian__)
            h14 = in__.vector_constrain(n_block,lp__);
        else
            h14 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h15;
        (void) h15;  // dummy to suppress unused var warning
        if (jacobian__)
            h15 = in__.vector_constrain(n_block,lp__);
        else
            h15 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h16;
        (void) h16;  // dummy to suppress unused var warning
        if (jacobian__)
            h16 = in__.vector_constrain(n_block,lp__);
        else
            h16 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h17;
        (void) h17;  // dummy to suppress unused var warning
        if (jacobian__)
            h17 = in__.vector_constrain(n_block,lp__);
        else
            h17 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h18;
        (void) h18;  // dummy to suppress unused var warning
        if (jacobian__)
            h18 = in__.vector_constrain(n_block,lp__);
        else
            h18 = in__.vector_constrain(n_block);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h1_holdout;
        (void) h1_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h1_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h1_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h2_holdout;
        (void) h2_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h2_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h2_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h3_holdout;
        (void) h3_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h3_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h3_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h4_holdout;
        (void) h4_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h4_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h4_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h5_holdout;
        (void) h5_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h5_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h5_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h6_holdout;
        (void) h6_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h6_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h6_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h7_holdout;
        (void) h7_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h7_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h7_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h8_holdout;
        (void) h8_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h8_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h8_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h9_holdout;
        (void) h9_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h9_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h9_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h10_holdout;
        (void) h10_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h10_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h10_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h11_holdout;
        (void) h11_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h11_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h11_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h12_holdout;
        (void) h12_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h12_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h12_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h13_holdout;
        (void) h13_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h13_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h13_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h14_holdout;
        (void) h14_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h14_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h14_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h15_holdout;
        (void) h15_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h15_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h15_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h16_holdout;
        (void) h16_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h16_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h16_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h17_holdout;
        (void) h17_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h17_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h17_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  h18_holdout;
        (void) h18_holdout;  // dummy to suppress unused var warning
        if (jacobian__)
            h18_holdout = in__.vector_constrain(n_block_pred,lp__);
        else
            h18_holdout = in__.vector_constrain(n_block_pred);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  b1;
        (void) b1;  // dummy to suppress unused var warning
        if (jacobian__)
            b1 = in__.vector_constrain(n_x1,lp__);
        else
            b1 = in__.vector_constrain(n_x1);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  b2;
        (void) b2;  // dummy to suppress unused var warning
        if (jacobian__)
            b2 = in__.vector_constrain(n_x2,lp__);
        else
            b2 = in__.vector_constrain(n_x2);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  b3;
        (void) b3;  // dummy to suppress unused var warning
        if (jacobian__)
            b3 = in__.vector_constrain(n_x3,lp__);
        else
            b3 = in__.vector_constrain(n_x3);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  b4;
        (void) b4;  // dummy to suppress unused var warning
        if (jacobian__)
            b4 = in__.vector_constrain(n_x4,lp__);
        else
            b4 = in__.vector_constrain(n_x4);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  b5;
        (void) b5;  // dummy to suppress unused var warning
        if (jacobian__)
            b5 = in__.vector_constrain(n_x5,lp__);
        else
            b5 = in__.vector_constrain(n_x5);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  b6;
        (void) b6;  // dummy to suppress unused var warning
        if (jacobian__)
            b6 = in__.vector_constrain(n_x6,lp__);
        else
            b6 = in__.vector_constrain(n_x6);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  b7;
        (void) b7;  // dummy to suppress unused var warning
        if (jacobian__)
            b7 = in__.vector_constrain(n_x7,lp__);
        else
            b7 = in__.vector_constrain(n_x7);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  b8;
        (void) b8;  // dummy to suppress unused var warning
        if (jacobian__)
            b8 = in__.vector_constrain(n_x8,lp__);
        else
            b8 = in__.vector_constrain(n_x8);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  b9;
        (void) b9;  // dummy to suppress unused var warning
        if (jacobian__)
            b9 = in__.vector_constrain(n_x9,lp__);
        else
            b9 = in__.vector_constrain(n_x9);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  b10;
        (void) b10;  // dummy to suppress unused var warning
        if (jacobian__)
            b10 = in__.vector_constrain(n_x10,lp__);
        else
            b10 = in__.vector_constrain(n_x10);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  b11;
        (void) b11;  // dummy to suppress unused var warning
        if (jacobian__)
            b11 = in__.vector_constrain(n_x11,lp__);
        else
            b11 = in__.vector_constrain(n_x11);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  b12;
        (void) b12;  // dummy to suppress unused var warning
        if (jacobian__)
            b12 = in__.vector_constrain(n_x12,lp__);
        else
            b12 = in__.vector_constrain(n_x12);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  b13;
        (void) b13;  // dummy to suppress unused var warning
        if (jacobian__)
            b13 = in__.vector_constrain(n_x13,lp__);
        else
            b13 = in__.vector_constrain(n_x13);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  b14;
        (void) b14;  // dummy to suppress unused var warning
        if (jacobian__)
            b14 = in__.vector_constrain(n_x14,lp__);
        else
            b14 = in__.vector_constrain(n_x14);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  b15;
        (void) b15;  // dummy to suppress unused var warning
        if (jacobian__)
            b15 = in__.vector_constrain(n_x15,lp__);
        else
            b15 = in__.vector_constrain(n_x15);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  b16;
        (void) b16;  // dummy to suppress unused var warning
        if (jacobian__)
            b16 = in__.vector_constrain(n_x16,lp__);
        else
            b16 = in__.vector_constrain(n_x16);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  b17;
        (void) b17;  // dummy to suppress unused var warning
        if (jacobian__)
            b17 = in__.vector_constrain(n_x17,lp__);
        else
            b17 = in__.vector_constrain(n_x17);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  b18;
        (void) b18;  // dummy to suppress unused var warning
        if (jacobian__)
            b18 = in__.vector_constrain(n_x18,lp__);
        else
            b18 = in__.vector_constrain(n_x18);


        // transformed parameters
        validate_non_negative_index("mu", "n", n);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  mu(static_cast<Eigen::VectorXd::Index>(n));
        (void) mu;  // dummy to suppress unused var warning

        stan::math::initialize(mu, DUMMY_VAR__);
        stan::math::fill(mu,DUMMY_VAR__);
        validate_non_negative_index("psi1", "n_block", n_block);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi1(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi1;  // dummy to suppress unused var warning

        stan::math::initialize(psi1, DUMMY_VAR__);
        stan::math::fill(psi1,DUMMY_VAR__);
        validate_non_negative_index("psi2", "n_block", n_block);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi2(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi2;  // dummy to suppress unused var warning

        stan::math::initialize(psi2, DUMMY_VAR__);
        stan::math::fill(psi2,DUMMY_VAR__);
        validate_non_negative_index("psi3", "n_block", n_block);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi3(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi3;  // dummy to suppress unused var warning

        stan::math::initialize(psi3, DUMMY_VAR__);
        stan::math::fill(psi3,DUMMY_VAR__);
        validate_non_negative_index("psi4", "n_block", n_block);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi4(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi4;  // dummy to suppress unused var warning

        stan::math::initialize(psi4, DUMMY_VAR__);
        stan::math::fill(psi4,DUMMY_VAR__);
        validate_non_negative_index("psi5", "n_block", n_block);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi5(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi5;  // dummy to suppress unused var warning

        stan::math::initialize(psi5, DUMMY_VAR__);
        stan::math::fill(psi5,DUMMY_VAR__);
        validate_non_negative_index("psi6", "n_block", n_block);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi6(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi6;  // dummy to suppress unused var warning

        stan::math::initialize(psi6, DUMMY_VAR__);
        stan::math::fill(psi6,DUMMY_VAR__);
        validate_non_negative_index("psi7", "n_block", n_block);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi7(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi7;  // dummy to suppress unused var warning

        stan::math::initialize(psi7, DUMMY_VAR__);
        stan::math::fill(psi7,DUMMY_VAR__);
        validate_non_negative_index("psi8", "n_block", n_block);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi8(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi8;  // dummy to suppress unused var warning

        stan::math::initialize(psi8, DUMMY_VAR__);
        stan::math::fill(psi8,DUMMY_VAR__);
        validate_non_negative_index("psi9", "n_block", n_block);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi9(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi9;  // dummy to suppress unused var warning

        stan::math::initialize(psi9, DUMMY_VAR__);
        stan::math::fill(psi9,DUMMY_VAR__);
        validate_non_negative_index("psi10", "n_block", n_block);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi10(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi10;  // dummy to suppress unused var warning

        stan::math::initialize(psi10, DUMMY_VAR__);
        stan::math::fill(psi10,DUMMY_VAR__);
        validate_non_negative_index("psi11", "n_block", n_block);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi11(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi11;  // dummy to suppress unused var warning

        stan::math::initialize(psi11, DUMMY_VAR__);
        stan::math::fill(psi11,DUMMY_VAR__);
        validate_non_negative_index("psi12", "n_block", n_block);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi12(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi12;  // dummy to suppress unused var warning

        stan::math::initialize(psi12, DUMMY_VAR__);
        stan::math::fill(psi12,DUMMY_VAR__);
        validate_non_negative_index("psi13", "n_block", n_block);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi13(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi13;  // dummy to suppress unused var warning

        stan::math::initialize(psi13, DUMMY_VAR__);
        stan::math::fill(psi13,DUMMY_VAR__);
        validate_non_negative_index("psi14", "n_block", n_block);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi14(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi14;  // dummy to suppress unused var warning

        stan::math::initialize(psi14, DUMMY_VAR__);
        stan::math::fill(psi14,DUMMY_VAR__);
        validate_non_negative_index("psi15", "n_block", n_block);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi15(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi15;  // dummy to suppress unused var warning

        stan::math::initialize(psi15, DUMMY_VAR__);
        stan::math::fill(psi15,DUMMY_VAR__);
        validate_non_negative_index("psi16", "n_block", n_block);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi16(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi16;  // dummy to suppress unused var warning

        stan::math::initialize(psi16, DUMMY_VAR__);
        stan::math::fill(psi16,DUMMY_VAR__);
        validate_non_negative_index("psi17", "n_block", n_block);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi17(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi17;  // dummy to suppress unused var warning

        stan::math::initialize(psi17, DUMMY_VAR__);
        stan::math::fill(psi17,DUMMY_VAR__);
        validate_non_negative_index("psi18", "n_block", n_block);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi18(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi18;  // dummy to suppress unused var warning

        stan::math::initialize(psi18, DUMMY_VAR__);
        stan::math::fill(psi18,DUMMY_VAR__);
        validate_non_negative_index("psi1_pred", "n_block_pred", n_block_pred);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi1_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi1_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi1_pred, DUMMY_VAR__);
        stan::math::fill(psi1_pred,DUMMY_VAR__);
        validate_non_negative_index("psi2_pred", "n_block_pred", n_block_pred);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi2_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi2_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi2_pred, DUMMY_VAR__);
        stan::math::fill(psi2_pred,DUMMY_VAR__);
        validate_non_negative_index("psi3_pred", "n_block_pred", n_block_pred);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi3_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi3_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi3_pred, DUMMY_VAR__);
        stan::math::fill(psi3_pred,DUMMY_VAR__);
        validate_non_negative_index("psi4_pred", "n_block_pred", n_block_pred);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi4_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi4_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi4_pred, DUMMY_VAR__);
        stan::math::fill(psi4_pred,DUMMY_VAR__);
        validate_non_negative_index("psi5_pred", "n_block_pred", n_block_pred);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi5_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi5_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi5_pred, DUMMY_VAR__);
        stan::math::fill(psi5_pred,DUMMY_VAR__);
        validate_non_negative_index("psi6_pred", "n_block_pred", n_block_pred);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi6_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi6_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi6_pred, DUMMY_VAR__);
        stan::math::fill(psi6_pred,DUMMY_VAR__);
        validate_non_negative_index("psi7_pred", "n_block_pred", n_block_pred);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi7_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi7_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi7_pred, DUMMY_VAR__);
        stan::math::fill(psi7_pred,DUMMY_VAR__);
        validate_non_negative_index("psi8_pred", "n_block_pred", n_block_pred);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi8_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi8_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi8_pred, DUMMY_VAR__);
        stan::math::fill(psi8_pred,DUMMY_VAR__);
        validate_non_negative_index("psi9_pred", "n_block_pred", n_block_pred);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi9_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi9_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi9_pred, DUMMY_VAR__);
        stan::math::fill(psi9_pred,DUMMY_VAR__);
        validate_non_negative_index("psi10_pred", "n_block_pred", n_block_pred);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi10_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi10_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi10_pred, DUMMY_VAR__);
        stan::math::fill(psi10_pred,DUMMY_VAR__);
        validate_non_negative_index("psi11_pred", "n_block_pred", n_block_pred);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi11_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi11_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi11_pred, DUMMY_VAR__);
        stan::math::fill(psi11_pred,DUMMY_VAR__);
        validate_non_negative_index("psi12_pred", "n_block_pred", n_block_pred);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi12_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi12_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi12_pred, DUMMY_VAR__);
        stan::math::fill(psi12_pred,DUMMY_VAR__);
        validate_non_negative_index("psi13_pred", "n_block_pred", n_block_pred);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi13_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi13_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi13_pred, DUMMY_VAR__);
        stan::math::fill(psi13_pred,DUMMY_VAR__);
        validate_non_negative_index("psi14_pred", "n_block_pred", n_block_pred);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi14_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi14_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi14_pred, DUMMY_VAR__);
        stan::math::fill(psi14_pred,DUMMY_VAR__);
        validate_non_negative_index("psi15_pred", "n_block_pred", n_block_pred);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi15_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi15_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi15_pred, DUMMY_VAR__);
        stan::math::fill(psi15_pred,DUMMY_VAR__);
        validate_non_negative_index("psi16_pred", "n_block_pred", n_block_pred);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi16_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi16_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi16_pred, DUMMY_VAR__);
        stan::math::fill(psi16_pred,DUMMY_VAR__);
        validate_non_negative_index("psi17_pred", "n_block_pred", n_block_pred);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi17_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi17_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi17_pred, DUMMY_VAR__);
        stan::math::fill(psi17_pred,DUMMY_VAR__);
        validate_non_negative_index("psi18_pred", "n_block_pred", n_block_pred);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  psi18_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi18_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi18_pred, DUMMY_VAR__);
        stan::math::fill(psi18_pred,DUMMY_VAR__);


        try {
            for (int i = 1; i <= n; ++i) {
                stan::math::assign(get_base1_lhs(mu,i,"mu",1), ((((((((((((((((((get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),1,"b_spline",2) * get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),2,"b_spline",2) * get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),3,"b_spline",2) * get_base1(h3,get_base1(block_data,i,"block_data",1),"h3",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),4,"b_spline",2) * get_base1(h4,get_base1(block_data,i,"block_data",1),"h4",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),5,"b_spline",2) * get_base1(h5,get_base1(block_data,i,"block_data",1),"h5",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),6,"b_spline",2) * get_base1(h6,get_base1(block_data,i,"block_data",1),"h6",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),7,"b_spline",2) * get_base1(h7,get_base1(block_data,i,"block_data",1),"h7",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),8,"b_spline",2) * get_base1(h8,get_base1(block_data,i,"block_data",1),"h8",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),9,"b_spline",2) * get_base1(h9,get_base1(block_data,i,"block_data",1),"h9",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),10,"b_spline",2) * get_base1(h10,get_base1(block_data,i,"block_data",1),"h10",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),11,"b_spline",2) * get_base1(h11,get_base1(block_data,i,"block_data",1),"h11",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),12,"b_spline",2) * get_base1(h12,get_base1(block_data,i,"block_data",1),"h12",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),13,"b_spline",2) * get_base1(h13,get_base1(block_data,i,"block_data",1),"h13",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),14,"b_spline",2) * get_base1(h14,get_base1(block_data,i,"block_data",1),"h14",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),15,"b_spline",2) * get_base1(h15,get_base1(block_data,i,"block_data",1),"h15",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),16,"b_spline",2) * get_base1(h16,get_base1(block_data,i,"block_data",1),"h16",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),17,"b_spline",2) * get_base1(h17,get_base1(block_data,i,"block_data",1),"h17",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),18,"b_spline",2) * get_base1(h18,get_base1(block_data,i,"block_data",1),"h18",1))));
            }
            stan::math::assign(psi1, multiply(x1,b1));
            stan::math::assign(psi2, multiply(x2,b2));
            stan::math::assign(psi3, multiply(x3,b3));
            stan::math::assign(psi4, multiply(x4,b4));
            stan::math::assign(psi5, multiply(x5,b5));
            stan::math::assign(psi6, multiply(x6,b6));
            stan::math::assign(psi7, multiply(x7,b7));
            stan::math::assign(psi8, multiply(x8,b8));
            stan::math::assign(psi9, multiply(x9,b9));
            stan::math::assign(psi10, multiply(x10,b10));
            stan::math::assign(psi11, multiply(x11,b11));
            stan::math::assign(psi12, multiply(x12,b12));
            stan::math::assign(psi13, multiply(x13,b13));
            stan::math::assign(psi14, multiply(x14,b14));
            stan::math::assign(psi15, multiply(x15,b15));
            stan::math::assign(psi16, multiply(x16,b16));
            stan::math::assign(psi17, multiply(x17,b17));
            stan::math::assign(psi18, multiply(x18,b18));
            stan::math::assign(psi1_pred, multiply(x1_pred,b1));
            stan::math::assign(psi2_pred, multiply(x2_pred,b2));
            stan::math::assign(psi3_pred, multiply(x3_pred,b3));
            stan::math::assign(psi4_pred, multiply(x4_pred,b4));
            stan::math::assign(psi5_pred, multiply(x5_pred,b5));
            stan::math::assign(psi6_pred, multiply(x6_pred,b6));
            stan::math::assign(psi7_pred, multiply(x7_pred,b7));
            stan::math::assign(psi8_pred, multiply(x8_pred,b8));
            stan::math::assign(psi9_pred, multiply(x9_pred,b9));
            stan::math::assign(psi10_pred, multiply(x10_pred,b10));
            stan::math::assign(psi11_pred, multiply(x11_pred,b11));
            stan::math::assign(psi12_pred, multiply(x12_pred,b12));
            stan::math::assign(psi13_pred, multiply(x13_pred,b13));
            stan::math::assign(psi14_pred, multiply(x14_pred,b14));
            stan::math::assign(psi15_pred, multiply(x15_pred,b15));
            stan::math::assign(psi16_pred, multiply(x16_pred,b16));
            stan::math::assign(psi17_pred, multiply(x17_pred,b17));
            stan::math::assign(psi18_pred, multiply(x18_pred,b18));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < n; ++i0__) {
            if (stan::math::is_uninitialized(mu(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: mu" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block; ++i0__) {
            if (stan::math::is_uninitialized(psi1(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi1" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block; ++i0__) {
            if (stan::math::is_uninitialized(psi2(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi2" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block; ++i0__) {
            if (stan::math::is_uninitialized(psi3(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi3" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block; ++i0__) {
            if (stan::math::is_uninitialized(psi4(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi4" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block; ++i0__) {
            if (stan::math::is_uninitialized(psi5(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi5" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block; ++i0__) {
            if (stan::math::is_uninitialized(psi6(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi6" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block; ++i0__) {
            if (stan::math::is_uninitialized(psi7(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi7" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block; ++i0__) {
            if (stan::math::is_uninitialized(psi8(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi8" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block; ++i0__) {
            if (stan::math::is_uninitialized(psi9(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi9" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block; ++i0__) {
            if (stan::math::is_uninitialized(psi10(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi10" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block; ++i0__) {
            if (stan::math::is_uninitialized(psi11(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi11" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block; ++i0__) {
            if (stan::math::is_uninitialized(psi12(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi12" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block; ++i0__) {
            if (stan::math::is_uninitialized(psi13(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi13" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block; ++i0__) {
            if (stan::math::is_uninitialized(psi14(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi14" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block; ++i0__) {
            if (stan::math::is_uninitialized(psi15(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi15" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block; ++i0__) {
            if (stan::math::is_uninitialized(psi16(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi16" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block; ++i0__) {
            if (stan::math::is_uninitialized(psi17(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi17" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block; ++i0__) {
            if (stan::math::is_uninitialized(psi18(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi18" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block_pred; ++i0__) {
            if (stan::math::is_uninitialized(psi1_pred(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi1_pred" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block_pred; ++i0__) {
            if (stan::math::is_uninitialized(psi2_pred(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi2_pred" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block_pred; ++i0__) {
            if (stan::math::is_uninitialized(psi3_pred(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi3_pred" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block_pred; ++i0__) {
            if (stan::math::is_uninitialized(psi4_pred(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi4_pred" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block_pred; ++i0__) {
            if (stan::math::is_uninitialized(psi5_pred(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi5_pred" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block_pred; ++i0__) {
            if (stan::math::is_uninitialized(psi6_pred(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi6_pred" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block_pred; ++i0__) {
            if (stan::math::is_uninitialized(psi7_pred(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi7_pred" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block_pred; ++i0__) {
            if (stan::math::is_uninitialized(psi8_pred(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi8_pred" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block_pred; ++i0__) {
            if (stan::math::is_uninitialized(psi9_pred(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi9_pred" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block_pred; ++i0__) {
            if (stan::math::is_uninitialized(psi10_pred(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi10_pred" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block_pred; ++i0__) {
            if (stan::math::is_uninitialized(psi11_pred(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi11_pred" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block_pred; ++i0__) {
            if (stan::math::is_uninitialized(psi12_pred(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi12_pred" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block_pred; ++i0__) {
            if (stan::math::is_uninitialized(psi13_pred(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi13_pred" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block_pred; ++i0__) {
            if (stan::math::is_uninitialized(psi14_pred(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi14_pred" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block_pred; ++i0__) {
            if (stan::math::is_uninitialized(psi15_pred(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi15_pred" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block_pred; ++i0__) {
            if (stan::math::is_uninitialized(psi16_pred(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi16_pred" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block_pred; ++i0__) {
            if (stan::math::is_uninitialized(psi17_pred(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi17_pred" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < n_block_pred; ++i0__) {
            if (stan::math::is_uninitialized(psi18_pred(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: psi18_pred" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning

        // model body
        try {

            lp_accum__.add(normal_log<propto__>(log(size_data), mu, sigma_obs));
            lp_accum__.add(normal_log<propto__>(sigma_obs, 0, 2));
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h1,j,"h1",1), get_base1(psi1,j,"psi1",1), sd_h1));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h2,j,"h2",1), get_base1(psi2,j,"psi2",1), sd_h2));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h3,j,"h3",1), get_base1(psi3,j,"psi3",1), sd_h3));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h4,j,"h4",1), get_base1(psi4,j,"psi4",1), sd_h4));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h5,j,"h5",1), get_base1(psi5,j,"psi5",1), sd_h5));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h6,j,"h6",1), get_base1(psi6,j,"psi6",1), sd_h6));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h7,j,"h7",1), get_base1(psi7,j,"psi7",1), sd_h7));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h8,j,"h8",1), get_base1(psi8,j,"psi8",1), sd_h8));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h9,j,"h9",1), get_base1(psi9,j,"psi9",1), sd_h9));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h10,j,"h10",1), get_base1(psi10,j,"psi10",1), sd_h10));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h11,j,"h11",1), get_base1(psi11,j,"psi11",1), sd_h11));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h12,j,"h12",1), get_base1(psi12,j,"psi12",1), sd_h12));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h13,j,"h13",1), get_base1(psi13,j,"psi13",1), sd_h13));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h14,j,"h14",1), get_base1(psi14,j,"psi14",1), sd_h14));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h15,j,"h15",1), get_base1(psi15,j,"psi15",1), sd_h15));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h16,j,"h16",1), get_base1(psi16,j,"psi16",1), sd_h16));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h17,j,"h17",1), get_base1(psi17,j,"psi17",1), sd_h17));
            }
            for (int j = 1; j <= n_block; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h18,j,"h18",1), get_base1(psi18,j,"psi18",1), sd_h18));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h1_holdout,j,"h1_holdout",1), get_base1(psi1_pred,j,"psi1_pred",1), sd_h1));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h2_holdout,j,"h2_holdout",1), get_base1(psi2_pred,j,"psi2_pred",1), sd_h2));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h3_holdout,j,"h3_holdout",1), get_base1(psi3_pred,j,"psi3_pred",1), sd_h3));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h4_holdout,j,"h4_holdout",1), get_base1(psi4_pred,j,"psi4_pred",1), sd_h4));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h5_holdout,j,"h5_holdout",1), get_base1(psi5_pred,j,"psi5_pred",1), sd_h5));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h6_holdout,j,"h6_holdout",1), get_base1(psi6_pred,j,"psi6_pred",1), sd_h6));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h7_holdout,j,"h7_holdout",1), get_base1(psi7_pred,j,"psi7_pred",1), sd_h7));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h8_holdout,j,"h8_holdout",1), get_base1(psi8_pred,j,"psi8_pred",1), sd_h8));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h9_holdout,j,"h9_holdout",1), get_base1(psi9_pred,j,"psi9_pred",1), sd_h9));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h10_holdout,j,"h10_holdout",1), get_base1(psi10_pred,j,"psi10_pred",1), sd_h10));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h11_holdout,j,"h11_holdout",1), get_base1(psi11_pred,j,"psi11_pred",1), sd_h11));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h12_holdout,j,"h12_holdout",1), get_base1(psi12_pred,j,"psi12_pred",1), sd_h12));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h13_holdout,j,"h13_holdout",1), get_base1(psi13_pred,j,"psi13_pred",1), sd_h13));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h14_holdout,j,"h14_holdout",1), get_base1(psi14_pred,j,"psi14_pred",1), sd_h14));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h15_holdout,j,"h15_holdout",1), get_base1(psi15_pred,j,"psi15_pred",1), sd_h15));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h16_holdout,j,"h16_holdout",1), get_base1(psi16_pred,j,"psi16_pred",1), sd_h16));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h17_holdout,j,"h17_holdout",1), get_base1(psi17_pred,j,"psi17_pred",1), sd_h17));
            }
            for (int j = 1; j <= n_block_pred; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(h18_holdout,j,"h18_holdout",1), get_base1(psi18_pred,j,"psi18_pred",1), sd_h18));
            }
            for (int j = 1; j <= n_x1; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(b1,j,"b1",1), 0.0, 1.0));
            }
            for (int j = 1; j <= n_x2; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(b2,j,"b2",1), 0.0, 1.0));
            }
            for (int j = 1; j <= n_x3; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(b3,j,"b3",1), 0.0, 1.0));
            }
            for (int j = 1; j <= n_x4; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(b4,j,"b4",1), 0.0, 1.0));
            }
            for (int j = 1; j <= n_x5; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(b5,j,"b5",1), 0.0, 1.0));
            }
            for (int j = 1; j <= n_x6; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(b6,j,"b6",1), 0.0, 1.0));
            }
            for (int j = 1; j <= n_x7; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(b7,j,"b7",1), 0.0, 1.0));
            }
            for (int j = 1; j <= n_x8; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(b8,j,"b8",1), 0.0, 1.0));
            }
            for (int j = 1; j <= n_x9; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(b9,j,"b9",1), 0.0, 1.0));
            }
            for (int j = 1; j <= n_x10; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(b10,j,"b10",1), 0.0, 1.0));
            }
            for (int j = 1; j <= n_x11; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(b11,j,"b11",1), 0.0, 1.0));
            }
            for (int j = 1; j <= n_x12; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(b12,j,"b12",1), 0.0, 1.0));
            }
            for (int j = 1; j <= n_x13; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(b13,j,"b13",1), 0.0, 1.0));
            }
            for (int j = 1; j <= n_x14; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(b14,j,"b14",1), 0.0, 1.0));
            }
            for (int j = 1; j <= n_x15; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(b15,j,"b15",1), 0.0, 1.0));
            }
            for (int j = 1; j <= n_x16; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(b16,j,"b16",1), 0.0, 1.0));
            }
            for (int j = 1; j <= n_x17; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(b17,j,"b17",1), 0.0, 1.0));
            }
            for (int j = 1; j <= n_x18; ++j) {
                lp_accum__.add(normal_log<propto__>(get_base1(b18,j,"b18",1), 0.0, 1.0));
            }
            lp_accum__.add(normal_log<propto__>(sd_h1, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h2, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h3, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h4, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h5, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h6, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h7, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h8, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h9, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h10, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h11, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h12, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h13, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h14, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h15, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h16, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h17, 0.0, 2.0));
            lp_accum__.add(normal_log<propto__>(sd_h18, 0.0, 2.0));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("sigma_obs");
        names__.push_back("sd_h1");
        names__.push_back("sd_h2");
        names__.push_back("sd_h3");
        names__.push_back("sd_h4");
        names__.push_back("sd_h5");
        names__.push_back("sd_h6");
        names__.push_back("sd_h7");
        names__.push_back("sd_h8");
        names__.push_back("sd_h9");
        names__.push_back("sd_h10");
        names__.push_back("sd_h11");
        names__.push_back("sd_h12");
        names__.push_back("sd_h13");
        names__.push_back("sd_h14");
        names__.push_back("sd_h15");
        names__.push_back("sd_h16");
        names__.push_back("sd_h17");
        names__.push_back("sd_h18");
        names__.push_back("h1");
        names__.push_back("h2");
        names__.push_back("h3");
        names__.push_back("h4");
        names__.push_back("h5");
        names__.push_back("h6");
        names__.push_back("h7");
        names__.push_back("h8");
        names__.push_back("h9");
        names__.push_back("h10");
        names__.push_back("h11");
        names__.push_back("h12");
        names__.push_back("h13");
        names__.push_back("h14");
        names__.push_back("h15");
        names__.push_back("h16");
        names__.push_back("h17");
        names__.push_back("h18");
        names__.push_back("h1_holdout");
        names__.push_back("h2_holdout");
        names__.push_back("h3_holdout");
        names__.push_back("h4_holdout");
        names__.push_back("h5_holdout");
        names__.push_back("h6_holdout");
        names__.push_back("h7_holdout");
        names__.push_back("h8_holdout");
        names__.push_back("h9_holdout");
        names__.push_back("h10_holdout");
        names__.push_back("h11_holdout");
        names__.push_back("h12_holdout");
        names__.push_back("h13_holdout");
        names__.push_back("h14_holdout");
        names__.push_back("h15_holdout");
        names__.push_back("h16_holdout");
        names__.push_back("h17_holdout");
        names__.push_back("h18_holdout");
        names__.push_back("b1");
        names__.push_back("b2");
        names__.push_back("b3");
        names__.push_back("b4");
        names__.push_back("b5");
        names__.push_back("b6");
        names__.push_back("b7");
        names__.push_back("b8");
        names__.push_back("b9");
        names__.push_back("b10");
        names__.push_back("b11");
        names__.push_back("b12");
        names__.push_back("b13");
        names__.push_back("b14");
        names__.push_back("b15");
        names__.push_back("b16");
        names__.push_back("b17");
        names__.push_back("b18");
        names__.push_back("mu");
        names__.push_back("psi1");
        names__.push_back("psi2");
        names__.push_back("psi3");
        names__.push_back("psi4");
        names__.push_back("psi5");
        names__.push_back("psi6");
        names__.push_back("psi7");
        names__.push_back("psi8");
        names__.push_back("psi9");
        names__.push_back("psi10");
        names__.push_back("psi11");
        names__.push_back("psi12");
        names__.push_back("psi13");
        names__.push_back("psi14");
        names__.push_back("psi15");
        names__.push_back("psi16");
        names__.push_back("psi17");
        names__.push_back("psi18");
        names__.push_back("psi1_pred");
        names__.push_back("psi2_pred");
        names__.push_back("psi3_pred");
        names__.push_back("psi4_pred");
        names__.push_back("psi5_pred");
        names__.push_back("psi6_pred");
        names__.push_back("psi7_pred");
        names__.push_back("psi8_pred");
        names__.push_back("psi9_pred");
        names__.push_back("psi10_pred");
        names__.push_back("psi11_pred");
        names__.push_back("psi12_pred");
        names__.push_back("psi13_pred");
        names__.push_back("psi14_pred");
        names__.push_back("psi15_pred");
        names__.push_back("psi16_pred");
        names__.push_back("psi17_pred");
        names__.push_back("psi18_pred");
        names__.push_back("mu_plot_growth");
        names__.push_back("mu_plot_agr");
        names__.push_back("mu_pred");
        names__.push_back("size_plot");
        names__.push_back("size_plot_agr");
        names__.push_back("size_pred");
        names__.push_back("log_lik");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x4);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x5);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x6);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x7);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x8);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x9);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x10);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x11);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x12);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x13);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x14);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x15);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x16);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x17);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x18);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_block_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_plot);
        dims__.push_back(n_block);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_pred);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_spline_pred_blockmod_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double sigma_obs = in__.scalar_lb_constrain(0);
        double sd_h1 = in__.scalar_lb_constrain(0);
        double sd_h2 = in__.scalar_lb_constrain(0);
        double sd_h3 = in__.scalar_lb_constrain(0);
        double sd_h4 = in__.scalar_lb_constrain(0);
        double sd_h5 = in__.scalar_lb_constrain(0);
        double sd_h6 = in__.scalar_lb_constrain(0);
        double sd_h7 = in__.scalar_lb_constrain(0);
        double sd_h8 = in__.scalar_lb_constrain(0);
        double sd_h9 = in__.scalar_lb_constrain(0);
        double sd_h10 = in__.scalar_lb_constrain(0);
        double sd_h11 = in__.scalar_lb_constrain(0);
        double sd_h12 = in__.scalar_lb_constrain(0);
        double sd_h13 = in__.scalar_lb_constrain(0);
        double sd_h14 = in__.scalar_lb_constrain(0);
        double sd_h15 = in__.scalar_lb_constrain(0);
        double sd_h16 = in__.scalar_lb_constrain(0);
        double sd_h17 = in__.scalar_lb_constrain(0);
        double sd_h18 = in__.scalar_lb_constrain(0);
        vector_d h1 = in__.vector_constrain(n_block);
        vector_d h2 = in__.vector_constrain(n_block);
        vector_d h3 = in__.vector_constrain(n_block);
        vector_d h4 = in__.vector_constrain(n_block);
        vector_d h5 = in__.vector_constrain(n_block);
        vector_d h6 = in__.vector_constrain(n_block);
        vector_d h7 = in__.vector_constrain(n_block);
        vector_d h8 = in__.vector_constrain(n_block);
        vector_d h9 = in__.vector_constrain(n_block);
        vector_d h10 = in__.vector_constrain(n_block);
        vector_d h11 = in__.vector_constrain(n_block);
        vector_d h12 = in__.vector_constrain(n_block);
        vector_d h13 = in__.vector_constrain(n_block);
        vector_d h14 = in__.vector_constrain(n_block);
        vector_d h15 = in__.vector_constrain(n_block);
        vector_d h16 = in__.vector_constrain(n_block);
        vector_d h17 = in__.vector_constrain(n_block);
        vector_d h18 = in__.vector_constrain(n_block);
        vector_d h1_holdout = in__.vector_constrain(n_block_pred);
        vector_d h2_holdout = in__.vector_constrain(n_block_pred);
        vector_d h3_holdout = in__.vector_constrain(n_block_pred);
        vector_d h4_holdout = in__.vector_constrain(n_block_pred);
        vector_d h5_holdout = in__.vector_constrain(n_block_pred);
        vector_d h6_holdout = in__.vector_constrain(n_block_pred);
        vector_d h7_holdout = in__.vector_constrain(n_block_pred);
        vector_d h8_holdout = in__.vector_constrain(n_block_pred);
        vector_d h9_holdout = in__.vector_constrain(n_block_pred);
        vector_d h10_holdout = in__.vector_constrain(n_block_pred);
        vector_d h11_holdout = in__.vector_constrain(n_block_pred);
        vector_d h12_holdout = in__.vector_constrain(n_block_pred);
        vector_d h13_holdout = in__.vector_constrain(n_block_pred);
        vector_d h14_holdout = in__.vector_constrain(n_block_pred);
        vector_d h15_holdout = in__.vector_constrain(n_block_pred);
        vector_d h16_holdout = in__.vector_constrain(n_block_pred);
        vector_d h17_holdout = in__.vector_constrain(n_block_pred);
        vector_d h18_holdout = in__.vector_constrain(n_block_pred);
        vector_d b1 = in__.vector_constrain(n_x1);
        vector_d b2 = in__.vector_constrain(n_x2);
        vector_d b3 = in__.vector_constrain(n_x3);
        vector_d b4 = in__.vector_constrain(n_x4);
        vector_d b5 = in__.vector_constrain(n_x5);
        vector_d b6 = in__.vector_constrain(n_x6);
        vector_d b7 = in__.vector_constrain(n_x7);
        vector_d b8 = in__.vector_constrain(n_x8);
        vector_d b9 = in__.vector_constrain(n_x9);
        vector_d b10 = in__.vector_constrain(n_x10);
        vector_d b11 = in__.vector_constrain(n_x11);
        vector_d b12 = in__.vector_constrain(n_x12);
        vector_d b13 = in__.vector_constrain(n_x13);
        vector_d b14 = in__.vector_constrain(n_x14);
        vector_d b15 = in__.vector_constrain(n_x15);
        vector_d b16 = in__.vector_constrain(n_x16);
        vector_d b17 = in__.vector_constrain(n_x17);
        vector_d b18 = in__.vector_constrain(n_x18);
        vars__.push_back(sigma_obs);
        vars__.push_back(sd_h1);
        vars__.push_back(sd_h2);
        vars__.push_back(sd_h3);
        vars__.push_back(sd_h4);
        vars__.push_back(sd_h5);
        vars__.push_back(sd_h6);
        vars__.push_back(sd_h7);
        vars__.push_back(sd_h8);
        vars__.push_back(sd_h9);
        vars__.push_back(sd_h10);
        vars__.push_back(sd_h11);
        vars__.push_back(sd_h12);
        vars__.push_back(sd_h13);
        vars__.push_back(sd_h14);
        vars__.push_back(sd_h15);
        vars__.push_back(sd_h16);
        vars__.push_back(sd_h17);
        vars__.push_back(sd_h18);
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h1[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h2[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h3[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h4[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h5[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h6[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h7[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h8[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h9[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h10[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h11[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h12[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h13[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h14[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h15[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h16[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h17[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(h18[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h1_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h2_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h3_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h4_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h5_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h6_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h7_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h8_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h9_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h10_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h11_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h12_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h13_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h14_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h15_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h16_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h17_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(h18_holdout[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_x1; ++k_0__) {
            vars__.push_back(b1[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_x2; ++k_0__) {
            vars__.push_back(b2[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_x3; ++k_0__) {
            vars__.push_back(b3[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_x4; ++k_0__) {
            vars__.push_back(b4[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_x5; ++k_0__) {
            vars__.push_back(b5[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_x6; ++k_0__) {
            vars__.push_back(b6[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_x7; ++k_0__) {
            vars__.push_back(b7[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_x8; ++k_0__) {
            vars__.push_back(b8[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_x9; ++k_0__) {
            vars__.push_back(b9[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_x10; ++k_0__) {
            vars__.push_back(b10[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_x11; ++k_0__) {
            vars__.push_back(b11[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_x12; ++k_0__) {
            vars__.push_back(b12[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_x13; ++k_0__) {
            vars__.push_back(b13[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_x14; ++k_0__) {
            vars__.push_back(b14[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_x15; ++k_0__) {
            vars__.push_back(b15[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_x16; ++k_0__) {
            vars__.push_back(b16[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_x17; ++k_0__) {
            vars__.push_back(b17[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_x18; ++k_0__) {
            vars__.push_back(b18[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        validate_non_negative_index("mu", "n", n);
        vector_d mu(static_cast<Eigen::VectorXd::Index>(n));
        (void) mu;  // dummy to suppress unused var warning

        stan::math::initialize(mu, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu,DUMMY_VAR__);
        validate_non_negative_index("psi1", "n_block", n_block);
        vector_d psi1(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi1;  // dummy to suppress unused var warning

        stan::math::initialize(psi1, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi1,DUMMY_VAR__);
        validate_non_negative_index("psi2", "n_block", n_block);
        vector_d psi2(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi2;  // dummy to suppress unused var warning

        stan::math::initialize(psi2, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi2,DUMMY_VAR__);
        validate_non_negative_index("psi3", "n_block", n_block);
        vector_d psi3(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi3;  // dummy to suppress unused var warning

        stan::math::initialize(psi3, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi3,DUMMY_VAR__);
        validate_non_negative_index("psi4", "n_block", n_block);
        vector_d psi4(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi4;  // dummy to suppress unused var warning

        stan::math::initialize(psi4, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi4,DUMMY_VAR__);
        validate_non_negative_index("psi5", "n_block", n_block);
        vector_d psi5(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi5;  // dummy to suppress unused var warning

        stan::math::initialize(psi5, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi5,DUMMY_VAR__);
        validate_non_negative_index("psi6", "n_block", n_block);
        vector_d psi6(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi6;  // dummy to suppress unused var warning

        stan::math::initialize(psi6, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi6,DUMMY_VAR__);
        validate_non_negative_index("psi7", "n_block", n_block);
        vector_d psi7(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi7;  // dummy to suppress unused var warning

        stan::math::initialize(psi7, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi7,DUMMY_VAR__);
        validate_non_negative_index("psi8", "n_block", n_block);
        vector_d psi8(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi8;  // dummy to suppress unused var warning

        stan::math::initialize(psi8, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi8,DUMMY_VAR__);
        validate_non_negative_index("psi9", "n_block", n_block);
        vector_d psi9(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi9;  // dummy to suppress unused var warning

        stan::math::initialize(psi9, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi9,DUMMY_VAR__);
        validate_non_negative_index("psi10", "n_block", n_block);
        vector_d psi10(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi10;  // dummy to suppress unused var warning

        stan::math::initialize(psi10, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi10,DUMMY_VAR__);
        validate_non_negative_index("psi11", "n_block", n_block);
        vector_d psi11(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi11;  // dummy to suppress unused var warning

        stan::math::initialize(psi11, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi11,DUMMY_VAR__);
        validate_non_negative_index("psi12", "n_block", n_block);
        vector_d psi12(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi12;  // dummy to suppress unused var warning

        stan::math::initialize(psi12, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi12,DUMMY_VAR__);
        validate_non_negative_index("psi13", "n_block", n_block);
        vector_d psi13(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi13;  // dummy to suppress unused var warning

        stan::math::initialize(psi13, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi13,DUMMY_VAR__);
        validate_non_negative_index("psi14", "n_block", n_block);
        vector_d psi14(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi14;  // dummy to suppress unused var warning

        stan::math::initialize(psi14, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi14,DUMMY_VAR__);
        validate_non_negative_index("psi15", "n_block", n_block);
        vector_d psi15(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi15;  // dummy to suppress unused var warning

        stan::math::initialize(psi15, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi15,DUMMY_VAR__);
        validate_non_negative_index("psi16", "n_block", n_block);
        vector_d psi16(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi16;  // dummy to suppress unused var warning

        stan::math::initialize(psi16, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi16,DUMMY_VAR__);
        validate_non_negative_index("psi17", "n_block", n_block);
        vector_d psi17(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi17;  // dummy to suppress unused var warning

        stan::math::initialize(psi17, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi17,DUMMY_VAR__);
        validate_non_negative_index("psi18", "n_block", n_block);
        vector_d psi18(static_cast<Eigen::VectorXd::Index>(n_block));
        (void) psi18;  // dummy to suppress unused var warning

        stan::math::initialize(psi18, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi18,DUMMY_VAR__);
        validate_non_negative_index("psi1_pred", "n_block_pred", n_block_pred);
        vector_d psi1_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi1_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi1_pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi1_pred,DUMMY_VAR__);
        validate_non_negative_index("psi2_pred", "n_block_pred", n_block_pred);
        vector_d psi2_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi2_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi2_pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi2_pred,DUMMY_VAR__);
        validate_non_negative_index("psi3_pred", "n_block_pred", n_block_pred);
        vector_d psi3_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi3_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi3_pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi3_pred,DUMMY_VAR__);
        validate_non_negative_index("psi4_pred", "n_block_pred", n_block_pred);
        vector_d psi4_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi4_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi4_pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi4_pred,DUMMY_VAR__);
        validate_non_negative_index("psi5_pred", "n_block_pred", n_block_pred);
        vector_d psi5_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi5_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi5_pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi5_pred,DUMMY_VAR__);
        validate_non_negative_index("psi6_pred", "n_block_pred", n_block_pred);
        vector_d psi6_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi6_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi6_pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi6_pred,DUMMY_VAR__);
        validate_non_negative_index("psi7_pred", "n_block_pred", n_block_pred);
        vector_d psi7_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi7_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi7_pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi7_pred,DUMMY_VAR__);
        validate_non_negative_index("psi8_pred", "n_block_pred", n_block_pred);
        vector_d psi8_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi8_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi8_pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi8_pred,DUMMY_VAR__);
        validate_non_negative_index("psi9_pred", "n_block_pred", n_block_pred);
        vector_d psi9_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi9_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi9_pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi9_pred,DUMMY_VAR__);
        validate_non_negative_index("psi10_pred", "n_block_pred", n_block_pred);
        vector_d psi10_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi10_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi10_pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi10_pred,DUMMY_VAR__);
        validate_non_negative_index("psi11_pred", "n_block_pred", n_block_pred);
        vector_d psi11_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi11_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi11_pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi11_pred,DUMMY_VAR__);
        validate_non_negative_index("psi12_pred", "n_block_pred", n_block_pred);
        vector_d psi12_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi12_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi12_pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi12_pred,DUMMY_VAR__);
        validate_non_negative_index("psi13_pred", "n_block_pred", n_block_pred);
        vector_d psi13_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi13_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi13_pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi13_pred,DUMMY_VAR__);
        validate_non_negative_index("psi14_pred", "n_block_pred", n_block_pred);
        vector_d psi14_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi14_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi14_pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi14_pred,DUMMY_VAR__);
        validate_non_negative_index("psi15_pred", "n_block_pred", n_block_pred);
        vector_d psi15_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi15_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi15_pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi15_pred,DUMMY_VAR__);
        validate_non_negative_index("psi16_pred", "n_block_pred", n_block_pred);
        vector_d psi16_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi16_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi16_pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi16_pred,DUMMY_VAR__);
        validate_non_negative_index("psi17_pred", "n_block_pred", n_block_pred);
        vector_d psi17_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi17_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi17_pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi17_pred,DUMMY_VAR__);
        validate_non_negative_index("psi18_pred", "n_block_pred", n_block_pred);
        vector_d psi18_pred(static_cast<Eigen::VectorXd::Index>(n_block_pred));
        (void) psi18_pred;  // dummy to suppress unused var warning

        stan::math::initialize(psi18_pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(psi18_pred,DUMMY_VAR__);


        try {
            for (int i = 1; i <= n; ++i) {
                stan::math::assign(get_base1_lhs(mu,i,"mu",1), ((((((((((((((((((get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),1,"b_spline",2) * get_base1(h1,get_base1(block_data,i,"block_data",1),"h1",1)) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),2,"b_spline",2) * get_base1(h2,get_base1(block_data,i,"block_data",1),"h2",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),3,"b_spline",2) * get_base1(h3,get_base1(block_data,i,"block_data",1),"h3",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),4,"b_spline",2) * get_base1(h4,get_base1(block_data,i,"block_data",1),"h4",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),5,"b_spline",2) * get_base1(h5,get_base1(block_data,i,"block_data",1),"h5",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),6,"b_spline",2) * get_base1(h6,get_base1(block_data,i,"block_data",1),"h6",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),7,"b_spline",2) * get_base1(h7,get_base1(block_data,i,"block_data",1),"h7",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),8,"b_spline",2) * get_base1(h8,get_base1(block_data,i,"block_data",1),"h8",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),9,"b_spline",2) * get_base1(h9,get_base1(block_data,i,"block_data",1),"h9",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),10,"b_spline",2) * get_base1(h10,get_base1(block_data,i,"block_data",1),"h10",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),11,"b_spline",2) * get_base1(h11,get_base1(block_data,i,"block_data",1),"h11",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),12,"b_spline",2) * get_base1(h12,get_base1(block_data,i,"block_data",1),"h12",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),13,"b_spline",2) * get_base1(h13,get_base1(block_data,i,"block_data",1),"h13",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),14,"b_spline",2) * get_base1(h14,get_base1(block_data,i,"block_data",1),"h14",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),15,"b_spline",2) * get_base1(h15,get_base1(block_data,i,"block_data",1),"h15",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),16,"b_spline",2) * get_base1(h16,get_base1(block_data,i,"block_data",1),"h16",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),17,"b_spline",2) * get_base1(h17,get_base1(block_data,i,"block_data",1),"h17",1))) + (get_base1(get_base1(b_spline,get_base1(age_index,i,"age_index",1),"b_spline",1),18,"b_spline",2) * get_base1(h18,get_base1(block_data,i,"block_data",1),"h18",1))));
            }
            stan::math::assign(psi1, multiply(x1,b1));
            stan::math::assign(psi2, multiply(x2,b2));
            stan::math::assign(psi3, multiply(x3,b3));
            stan::math::assign(psi4, multiply(x4,b4));
            stan::math::assign(psi5, multiply(x5,b5));
            stan::math::assign(psi6, multiply(x6,b6));
            stan::math::assign(psi7, multiply(x7,b7));
            stan::math::assign(psi8, multiply(x8,b8));
            stan::math::assign(psi9, multiply(x9,b9));
            stan::math::assign(psi10, multiply(x10,b10));
            stan::math::assign(psi11, multiply(x11,b11));
            stan::math::assign(psi12, multiply(x12,b12));
            stan::math::assign(psi13, multiply(x13,b13));
            stan::math::assign(psi14, multiply(x14,b14));
            stan::math::assign(psi15, multiply(x15,b15));
            stan::math::assign(psi16, multiply(x16,b16));
            stan::math::assign(psi17, multiply(x17,b17));
            stan::math::assign(psi18, multiply(x18,b18));
            stan::math::assign(psi1_pred, multiply(x1_pred,b1));
            stan::math::assign(psi2_pred, multiply(x2_pred,b2));
            stan::math::assign(psi3_pred, multiply(x3_pred,b3));
            stan::math::assign(psi4_pred, multiply(x4_pred,b4));
            stan::math::assign(psi5_pred, multiply(x5_pred,b5));
            stan::math::assign(psi6_pred, multiply(x6_pred,b6));
            stan::math::assign(psi7_pred, multiply(x7_pred,b7));
            stan::math::assign(psi8_pred, multiply(x8_pred,b8));
            stan::math::assign(psi9_pred, multiply(x9_pred,b9));
            stan::math::assign(psi10_pred, multiply(x10_pred,b10));
            stan::math::assign(psi11_pred, multiply(x11_pred,b11));
            stan::math::assign(psi12_pred, multiply(x12_pred,b12));
            stan::math::assign(psi13_pred, multiply(x13_pred,b13));
            stan::math::assign(psi14_pred, multiply(x14_pred,b14));
            stan::math::assign(psi15_pred, multiply(x15_pred,b15));
            stan::math::assign(psi16_pred, multiply(x16_pred,b16));
            stan::math::assign(psi17_pred, multiply(x17_pred,b17));
            stan::math::assign(psi18_pred, multiply(x18_pred,b18));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters
        for (int k_0__ = 0; k_0__ < n; ++k_0__) {
            vars__.push_back(mu[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi1[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi2[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi3[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi4[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi5[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi6[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi7[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi8[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi9[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi10[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi11[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi12[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi13[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi14[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi15[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi16[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi17[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block; ++k_0__) {
            vars__.push_back(psi18[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(psi1_pred[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(psi2_pred[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(psi3_pred[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(psi4_pred[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(psi5_pred[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(psi6_pred[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(psi7_pred[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(psi8_pred[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(psi9_pred[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(psi10_pred[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(psi11_pred[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(psi12_pred[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(psi13_pred[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(psi14_pred[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(psi15_pred[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(psi16_pred[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(psi17_pred[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n_block_pred; ++k_0__) {
            vars__.push_back(psi18_pred[k_0__]);
        }

        if (!include_gqs__) return;
        // declare and define generated quantities
        validate_non_negative_index("mu_plot_growth", "n_plot", n_plot);
        validate_non_negative_index("mu_plot_growth", "n_block", n_block);
        matrix_d mu_plot_growth(static_cast<Eigen::VectorXd::Index>(n_plot),static_cast<Eigen::VectorXd::Index>(n_block));
        (void) mu_plot_growth;  // dummy to suppress unused var warning

        stan::math::initialize(mu_plot_growth, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu_plot_growth,DUMMY_VAR__);
        validate_non_negative_index("mu_plot_agr", "n_plot", n_plot);
        validate_non_negative_index("mu_plot_agr", "n_block", n_block);
        matrix_d mu_plot_agr(static_cast<Eigen::VectorXd::Index>(n_plot),static_cast<Eigen::VectorXd::Index>(n_block));
        (void) mu_plot_agr;  // dummy to suppress unused var warning

        stan::math::initialize(mu_plot_agr, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu_plot_agr,DUMMY_VAR__);
        validate_non_negative_index("mu_pred", "n_pred", n_pred);
        vector_d mu_pred(static_cast<Eigen::VectorXd::Index>(n_pred));
        (void) mu_pred;  // dummy to suppress unused var warning

        stan::math::initialize(mu_pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(mu_pred,DUMMY_VAR__);
        validate_non_negative_index("size_plot", "n_plot", n_plot);
        validate_non_negative_index("size_plot", "n_block", n_block);
        matrix_d size_plot(static_cast<Eigen::VectorXd::Index>(n_plot),static_cast<Eigen::VectorXd::Index>(n_block));
        (void) size_plot;  // dummy to suppress unused var warning

        stan::math::initialize(size_plot, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(size_plot,DUMMY_VAR__);
        validate_non_negative_index("size_plot_agr", "n_plot", n_plot);
        validate_non_negative_index("size_plot_agr", "n_block", n_block);
        matrix_d size_plot_agr(static_cast<Eigen::VectorXd::Index>(n_plot),static_cast<Eigen::VectorXd::Index>(n_block));
        (void) size_plot_agr;  // dummy to suppress unused var warning

        stan::math::initialize(size_plot_agr, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(size_plot_agr,DUMMY_VAR__);
        validate_non_negative_index("size_pred", "n_pred", n_pred);
        vector_d size_pred(static_cast<Eigen::VectorXd::Index>(n_pred));
        (void) size_pred;  // dummy to suppress unused var warning

        stan::math::initialize(size_pred, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(size_pred,DUMMY_VAR__);
        validate_non_negative_index("log_lik", "n", n);
        vector_d log_lik(static_cast<Eigen::VectorXd::Index>(n));
        (void) log_lik;  // dummy to suppress unused var warning

        stan::math::initialize(log_lik, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(log_lik,DUMMY_VAR__);


        try {
            for (int i = 1; i <= n_plot; ++i) {
                for (int j = 1; j <= n_block; ++j) {
                    stan::math::assign(get_base1_lhs(mu_plot_growth,i,j,"mu_plot_growth",1), ((((((((((((((((((get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),1,"b_spline_plot",3) * get_base1(h1,j,"h1",1)) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),2,"b_spline_plot",3) * get_base1(h2,j,"h2",1))) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),3,"b_spline_plot",3) * get_base1(h3,j,"h3",1))) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),4,"b_spline_plot",3) * get_base1(h4,j,"h4",1))) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),5,"b_spline_plot",3) * get_base1(h5,j,"h5",1))) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),6,"b_spline_plot",3) * get_base1(h6,j,"h6",1))) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),7,"b_spline_plot",3) * get_base1(h7,j,"h7",1))) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),8,"b_spline_plot",3) * get_base1(h8,j,"h8",1))) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),9,"b_spline_plot",3) * get_base1(h9,j,"h9",1))) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),10,"b_spline_plot",3) * get_base1(h10,j,"h10",1))) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),11,"b_spline_plot",3) * get_base1(h11,j,"h11",1))) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),12,"b_spline_plot",3) * get_base1(h12,j,"h12",1))) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),13,"b_spline_plot",3) * get_base1(h13,j,"h13",1))) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),14,"b_spline_plot",3) * get_base1(h14,j,"h14",1))) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),15,"b_spline_plot",3) * get_base1(h15,j,"h15",1))) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),16,"b_spline_plot",3) * get_base1(h16,j,"h16",1))) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),17,"b_spline_plot",3) * get_base1(h17,j,"h17",1))) + (get_base1(get_base1(get_base1(b_spline_plot,i,"b_spline_plot",1),j,"b_spline_plot",2),18,"b_spline_plot",3) * get_base1(h18,j,"h18",1))));
                }
            }
            for (int i = 1; i <= n_plot; ++i) {
                for (int j = 1; j <= n_block; ++j) {
                    stan::math::assign(get_base1_lhs(size_plot,i,j,"size_plot",1), exp(get_base1(mu_plot_growth,i,j,"mu_plot_growth",1)));
                }
            }
            for (int i = 1; i <= n_plot; ++i) {
                for (int j = 1; j <= n_block; ++j) {
                    stan::math::assign(get_base1_lhs(mu_plot_agr,i,j,"mu_plot_agr",1), ((((((((((((((((((get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),1,"b_spline_deriv",3) * get_base1(h1,j,"h1",1)) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),2,"b_spline_deriv",3) * get_base1(h2,j,"h2",1))) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),3,"b_spline_deriv",3) * get_base1(h3,j,"h3",1))) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),4,"b_spline_deriv",3) * get_base1(h4,j,"h4",1))) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),5,"b_spline_deriv",3) * get_base1(h5,j,"h5",1))) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),6,"b_spline_deriv",3) * get_base1(h6,j,"h6",1))) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),7,"b_spline_deriv",3) * get_base1(h7,j,"h7",1))) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),8,"b_spline_deriv",3) * get_base1(h8,j,"h8",1))) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),9,"b_spline_deriv",3) * get_base1(h9,j,"h9",1))) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),10,"b_spline_deriv",3) * get_base1(h10,j,"h10",1))) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),11,"b_spline_deriv",3) * get_base1(h11,j,"h11",1))) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),12,"b_spline_deriv",3) * get_base1(h12,j,"h12",1))) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),13,"b_spline_deriv",3) * get_base1(h13,j,"h13",1))) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),14,"b_spline_deriv",3) * get_base1(h14,j,"h14",1))) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),15,"b_spline_deriv",3) * get_base1(h15,j,"h15",1))) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),16,"b_spline_deriv",3) * get_base1(h16,j,"h16",1))) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),17,"b_spline_deriv",3) * get_base1(h17,j,"h17",1))) + (get_base1(get_base1(get_base1(b_spline_deriv,i,"b_spline_deriv",1),j,"b_spline_deriv",2),18,"b_spline_deriv",3) * get_base1(h18,j,"h18",1))));
                }
            }
            for (int i = 1; i <= n_plot; ++i) {
                for (int j = 1; j <= n_block; ++j) {
                    stan::math::assign(get_base1_lhs(size_plot_agr,i,j,"size_plot_agr",1), exp(get_base1(mu_plot_agr,i,j,"mu_plot_agr",1)));
                }
            }
            for (int i = 1; i <= n_pred; ++i) {
                stan::math::assign(get_base1_lhs(mu_pred,i,"mu_pred",1), ((((((((((((((((((get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),1,"b_spline_pred",2) * get_base1(h1_holdout,get_base1(block_holdout,i,"block_holdout",1),"h1_holdout",1)) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),2,"b_spline_pred",2) * get_base1(h2_holdout,get_base1(block_holdout,i,"block_holdout",1),"h2_holdout",1))) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),3,"b_spline_pred",2) * get_base1(h3_holdout,get_base1(block_holdout,i,"block_holdout",1),"h3_holdout",1))) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),4,"b_spline_pred",2) * get_base1(h4_holdout,get_base1(block_holdout,i,"block_holdout",1),"h4_holdout",1))) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),5,"b_spline_pred",2) * get_base1(h5_holdout,get_base1(block_holdout,i,"block_holdout",1),"h5_holdout",1))) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),6,"b_spline_pred",2) * get_base1(h6_holdout,get_base1(block_holdout,i,"block_holdout",1),"h6_holdout",1))) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),7,"b_spline_pred",2) * get_base1(h7_holdout,get_base1(block_holdout,i,"block_holdout",1),"h7_holdout",1))) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),8,"b_spline_pred",2) * get_base1(h8_holdout,get_base1(block_holdout,i,"block_holdout",1),"h8_holdout",1))) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),9,"b_spline_pred",2) * get_base1(h9_holdout,get_base1(block_holdout,i,"block_holdout",1),"h9_holdout",1))) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),10,"b_spline_pred",2) * get_base1(h10_holdout,get_base1(block_holdout,i,"block_holdout",1),"h10_holdout",1))) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),11,"b_spline_pred",2) * get_base1(h11_holdout,get_base1(block_holdout,i,"block_holdout",1),"h11_holdout",1))) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),12,"b_spline_pred",2) * get_base1(h12_holdout,get_base1(block_holdout,i,"block_holdout",1),"h12_holdout",1))) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),13,"b_spline_pred",2) * get_base1(h13_holdout,get_base1(block_holdout,i,"block_holdout",1),"h13_holdout",1))) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),14,"b_spline_pred",2) * get_base1(h14_holdout,get_base1(block_holdout,i,"block_holdout",1),"h14_holdout",1))) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),15,"b_spline_pred",2) * get_base1(h15_holdout,get_base1(block_holdout,i,"block_holdout",1),"h15_holdout",1))) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),16,"b_spline_pred",2) * get_base1(h16_holdout,get_base1(block_holdout,i,"block_holdout",1),"h16_holdout",1))) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),17,"b_spline_pred",2) * get_base1(h17_holdout,get_base1(block_holdout,i,"block_holdout",1),"h17_holdout",1))) + (get_base1(get_base1(b_spline_pred,get_base1(age_index_pred,i,"age_index_pred",1),"b_spline_pred",1),18,"b_spline_pred",2) * get_base1(h18_holdout,get_base1(block_holdout,i,"block_holdout",1),"h18_holdout",1))));
            }
            for (int i = 1; i <= n_pred; ++i) {
                stan::math::assign(get_base1_lhs(size_pred,i,"size_pred",1), exp(get_base1(mu_pred,i,"mu_pred",1)));
            }
            for (int i = 1; i <= n; ++i) {
                stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), normal_log(log(get_base1(size_data,i,"size_data",1)),get_base1(mu,i,"mu",1),sigma_obs));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities
        check_greater_or_equal(function__,"size_plot",size_plot,0);
        check_greater_or_equal(function__,"size_plot_agr",size_plot_agr,0);
        check_greater_or_equal(function__,"size_pred",size_pred,0);

        // write generated quantities
        for (int k_1__ = 0; k_1__ < n_block; ++k_1__) {
            for (int k_0__ = 0; k_0__ < n_plot; ++k_0__) {
                vars__.push_back(mu_plot_growth(k_0__, k_1__));
            }
        }
        for (int k_1__ = 0; k_1__ < n_block; ++k_1__) {
            for (int k_0__ = 0; k_0__ < n_plot; ++k_0__) {
                vars__.push_back(mu_plot_agr(k_0__, k_1__));
            }
        }
        for (int k_0__ = 0; k_0__ < n_pred; ++k_0__) {
            vars__.push_back(mu_pred[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < n_block; ++k_1__) {
            for (int k_0__ = 0; k_0__ < n_plot; ++k_0__) {
                vars__.push_back(size_plot(k_0__, k_1__));
            }
        }
        for (int k_1__ = 0; k_1__ < n_block; ++k_1__) {
            for (int k_0__ = 0; k_0__ < n_plot; ++k_0__) {
                vars__.push_back(size_plot_agr(k_0__, k_1__));
            }
        }
        for (int k_0__ = 0; k_0__ < n_pred; ++k_0__) {
            vars__.push_back(size_pred[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < n; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_spline_pred_blockmod";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_obs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h4";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h5";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h6";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h7";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h8";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h9";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h10";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h11";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h12";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h13";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h14";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h15";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h16";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h17";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h18";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h4" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h5" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h6" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h7" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h8" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h9" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h10" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h11" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h12" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h13" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h14" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h15" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h16" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h17" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h18" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h1_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h2_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h3_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h4_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h5_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h6_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h7_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h8_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h9_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h10_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h11_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h12_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h13_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h14_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h15_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h16_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h17_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h18_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x3; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x4; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b4" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x5; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b5" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x6; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b6" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x7; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b7" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x8; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b8" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x9; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b9" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x10; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b10" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x11; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b11" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x12; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b12" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x13; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b13" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x14; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b14" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x15; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b15" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x16; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b16" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x17; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b17" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x18; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b18" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi4" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi5" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi6" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi7" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi8" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi9" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi10" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi11" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi12" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi13" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi14" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi15" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi16" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi17" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi18" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi1_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi2_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi3_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi4_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi5_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi6_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi7_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi8_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi9_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi10_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi11_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi12_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi13_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi14_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi15_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi16_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi17_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi18_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= n_block; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_plot_growth" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= n_block; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_plot_agr" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= n_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= n_block; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "size_plot" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= n_block; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "size_plot_agr" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= n_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_obs";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h4";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h5";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h6";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h7";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h8";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h9";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h10";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h11";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h12";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h13";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h14";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h15";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h16";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h17";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_h18";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h4" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h5" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h6" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h7" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h8" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h9" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h10" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h11" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h12" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h13" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h14" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h15" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h16" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h17" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h18" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h1_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h2_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h3_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h4_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h5_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h6_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h7_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h8_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h9_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h10_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h11_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h12_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h13_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h14_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h15_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h16_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h17_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "h18_holdout" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x3; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x4; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b4" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x5; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b5" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x6; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b6" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x7; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b7" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x8; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b8" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x9; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b9" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x10; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b10" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x11; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b11" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x12; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b12" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x13; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b13" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x14; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b14" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x15; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b15" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x16; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b16" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x17; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b17" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_x18; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b18" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi3" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi4" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi5" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi6" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi7" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi8" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi9" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi10" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi11" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi12" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi13" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi14" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi15" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi16" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi17" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi18" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi1_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi2_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi3_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi4_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi5_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi6_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi7_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi8_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi9_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi10_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi11_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi12_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi13_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi14_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi15_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi16_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi17_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_block_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "psi18_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= n_block; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_plot_growth" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= n_block; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_plot_agr" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= n_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= n_block; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "size_plot" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= n_block; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n_plot; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "size_plot_agr" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= n_pred; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "size_pred" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}




#endif
